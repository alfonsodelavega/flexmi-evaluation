<?nsuri http://www.eclipse.org/emf/2002/Ecore?>
<?import http://www.eclipse.org/emf/2002/Ecore?>
<package name="camel" nsURI="http://www.paasage.eu/2015/06/camel" nsPrefix="camel">
	<EAnnotation source="http://www.eclipse.org/OCL/Import">
		<EStringToStringMapEntry key="ecore" value="http://www.eclipse.org/emf/2002/Ecore"/>
	</EAnnotation>
	<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
		<EStringToStringMapEntry key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
		<EStringToStringMapEntry key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
		<EStringToStringMapEntry key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
	</EAnnotation>
	<class name="Model" abstract="true">
		<attr name="name" lowerBound="1" type="//EString"/>
		<attr name="importURI" upperBound="-1" type="//EString">
			<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
				<EStringToStringMapEntry key="body" value="Metric"/>
				<EStringToStringMapEntry key="unique" value="false"/>
				<EStringToStringMapEntry key="upper" value="*"/>
			</EAnnotation>
		</attr>
	</class>
	<class name="CamelModel">
		<ref name="actions" ordered="false" upperBound="-1" containment="true" type="Action"/>
		<ref name="applications" ordered="false" upperBound="-1" containment="true" type="Application"/>
		<ref name="deploymentModels" ordered="false" upperBound="-1" containment="true" type="DeploymentModel"/>
		<ref name="executionModels" ordered="false" upperBound="-1" containment="true" type="ExecutionModel"/>
		<ref name="locationModels" upperBound="-1" containment="true" type="LocationModel"/>
		<ref name="metricModels" upperBound="-1" containment="true" type="MetricModel"/>
		<ref name="organisationModels" ordered="false" upperBound="-1" containment="true" type="OrganisationModel"/>
		<ref name="providerModels" ordered="false" upperBound="-1" containment="true" type="ProviderModel"/>
		<ref name="requirementModels" upperBound="-1" containment="true" type="RequirementModel"/>
		<ref name="scalabilityModels" ordered="false" upperBound="-1" containment="true" type="ScalabilityModel"/>
		<ref name="securityModels" ordered="false" upperBound="-1" containment="true" type="SecurityModel"/>
		<ref name="typeModels" ordered="false" upperBound="-1" containment="true" type="TypeModel"/>
		<ref name="unitModels" ordered="false" upperBound="-1" containment="true" type="UnitModel"/>
	</class>
	<class name="Action">
		<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
			<EStringToStringMapEntry key="constraints" value="correct_action_type"/>
		</EAnnotation>
		<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
			<EStringToStringMapEntry key="correct_action_type" value="Tuple {
			message : String = 'Action: ' + self.toString() + ' has a wrong type (' + self.type.toString() +
			'). Any kind of scaling action should be take one of the four possible action type values, while in the opposite case should map to a CREATION_EVENT',
			status : Boolean = if
			(self.oclIsKindOf(camel::scalability::ScalingAction))
			then (self.type = ActionType::SCALE_IN or self.type = ActionType::SCALE_OUT or self.type = ActionType::SCALE_UP or
			self.type = ActionType::SCALE_DOWN)
			else not (self.type = ActionType::SCALE_IN or self.type = ActionType::SCALE_OUT or self.type =
			ActionType::SCALE_UP or self.type = ActionType::SCALE_DOWN)
			endif
			}.status"/>
		</EAnnotation>
		<attr name="name" lowerBound="1" type="//EString">
			<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
				<EStringToStringMapEntry key="body" value="InternalComponentMeasurement"/>
				<EStringToStringMapEntry key="unique" value="false"/>
				<EStringToStringMapEntry key="upper" value="*"/>
			</EAnnotation>
		</attr>
		<attr name="type" lowerBound="1" type="//ActionType">
			<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
				<EStringToStringMapEntry key="body" value="UserGroup"/>
				<EStringToStringMapEntry key="unique" value="false"/>
				<EStringToStringMapEntry key="upper" value="*"/>
			</EAnnotation>
		</attr>
	</class>
	<EEnum name="ActionType">
		<EEnumLiteral name="EVENT_CREATION"/>
		<EEnumLiteral name="SCALE_IN" value="1"/>
		<EEnumLiteral name="SCALE_OUT" value="2"/>
		<EEnumLiteral name="SCALE_UP" value="3"/>
		<EEnumLiteral name="SCALE_DOWN" value="4"/>
		<EEnumLiteral name="READ" value="5"/>
		<EEnumLiteral name="WRITE" value="6"/>
	</EEnum>
	<class name="Application">
		<attr name="name" lowerBound="1" type="//EString"/>
		<attr name="version" lowerBound="1" type="//EString"/>
		<attr name="description" type="//EString"/>
		<ref name="owner" lowerBound="1" type="Entity"/>
		<ref name="deploymentModels" ordered="false" upperBound="-1" type="DeploymentModel"/>
	</class>
	<EEnum name="LayerType">
		<EEnumLiteral name="SaaS"/>
		<EEnumLiteral name="PaaS" value="1"/>
		<EEnumLiteral name="IaaS" value="2"/>
		<EEnumLiteral name="BPM" value="3"/>
		<EEnumLiteral name="SCC" value="4"/>
	</EEnum>
	<package name="deployment" nsURI="http://www.paasage.eu/2015/06/camel/deployment" nsPrefix="deployment">
		<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
			<EStringToStringMapEntry key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
			<EStringToStringMapEntry key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
			<EStringToStringMapEntry key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
		</EAnnotation>
		<class name="DeploymentElement" abstract="true">
			<attr name="name" lowerBound="1" type="//EString"/>
		</class>
		<class name="DeploymentModel">
			<ref name="internalComponents" upperBound="-1" containment="true" type="InternalComponent"/>
			<ref name="internalComponentInstances" upperBound="-1" containment="true" type="InternalComponentInstance"/>
			<ref name="vms" upperBound="-1" containment="true" type="VM"/>
			<ref name="vmInstances" upperBound="-1" containment="true" type="VMInstance"/>
			<ref name="communications" upperBound="-1" containment="true" type="Communication"/>
			<ref name="communicationInstances" upperBound="-1" containment="true" type="CommunicationInstance"/>
			<ref name="hostings" upperBound="-1" containment="true" type="Hosting"/>
			<ref name="hostingInstances" upperBound="-1" containment="true" type="HostingInstance"/>
			<ref name="vmRequirementSets" upperBound="-1" containment="true" type="VMRequirementSet"/>
			<ref name="globalVMRequirementSet" type="VMRequirementSet"/>
		</class>
		<class name="Component" abstract="true">
			<ref name="providedCommunications" upperBound="-1" containment="true" type="ProvidedCommunication"/>
			<ref name="providedHosts" upperBound="-1" containment="true" type="ProvidedHost"/>
			<ref name="configurations" upperBound="-1" containment="true" type="Configuration"/>
		</class>
		<class name="InternalComponent">
			<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
				<EStringToStringMapEntry key="constraints" value="no_recursion_in_parts_of_internal_component"/>
			</EAnnotation>
			<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
				<EStringToStringMapEntry key="no_recursion_in_parts_of_internal_component" value="Tuple {
				message : String = 'InternalComponent: ' + self.name +
				' should not be recursively contained by itself via the compositeInternalComponent association',
				status : Boolean = not
				(self.contains(self, self))
				}.status"/>
			</EAnnotation>
			<EOperation name="contains" type="EBoolean">
				<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
					<EStringToStringMapEntry key="body" value="ic.compositeInternalComponents
					->exists(p | p.name = rc.name or p.contains(p, rc))"/>
					</EAnnotation>
					<EParameter name="ic" lowerBound="1" type="InternalComponent"/>
					<EParameter name="rc" lowerBound="1" type="InternalComponent"/>
				</EOperation>
				<ref name="compositeInternalComponents" upperBound="-1" containment="true" type="InternalComponent"/>
				<ref name="requiredCommunications" upperBound="-1" containment="true" type="RequiredCommunication"/>
				<ref name="requiredHost" containment="true" type="RequiredHost"/>
				<attr name="version" type="//EString"/>
			</class>
			<class name="VM">
				<ref name="vmRequirementSet" type="VMRequirementSet"/>
			</class>
			<class name="VMRequirementSet">
				<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
					<EStringToStringMapEntry key="constraints" value="at_least_one_alternative_in_vm_req_set"/>
				</EAnnotation>
				<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
					<EStringToStringMapEntry key="at_least_one_alternative_in_vm_req_set" value="Tuple {
					message : String = 'VMRequirementSet: ' + self.name +
					' should include the specification of at least one requirement',
					status : Boolean = (locationRequirement <> null or
						providerRequirement <> null or osOrImageRequirement <> null or qualitativeHardwareRequirement <> null or
							quantitativeHardwareRequirement <> null)
								}.status"/>
							</EAnnotation>
							<attr name="name" lowerBound="1" type="//EString"/>
							<ref name="locationRequirement" type="LocationRequirement"/>
							<ref name="providerRequirement" type="ProviderRequirement"/>
							<ref name="qualitativeHardwareRequirement" type="QualitativeHardwareRequirement">
								<EAnnotation source="teneo.jpa">
									<EStringToStringMapEntry key="value" value="@JoinColumn(name="qualitativehardwarerequirement")"/>
								</EAnnotation>
							</ref>
							<ref name="quantitativeHardwareRequirement" type="QuantitativeHardwareRequirement">
								<EAnnotation source="teneo.jpa">
									<EStringToStringMapEntry key="value" value="@JoinColumn(name="quantitativehardwarerequirement")"/>
								</EAnnotation>
							</ref>
							<ref name="osOrImageRequirement" type="OSOrImageRequirement"/>
						</class>
						<class name="Configuration">
							<attr name="downloadCommand" type="//EString"/>
							<attr name="uploadCommand" type="//EString"/>
							<attr name="installCommand" type="//EString"/>
							<attr name="configureCommand" type="//EString"/>
							<attr name="startCommand" type="//EString"/>
							<attr name="stopCommand" type="//EString"/>
						</class>
						<class name="Communication">
							<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
								<EStringToStringMapEntry key="constraints" value="local_communication_both_comp_same_vm"/>
							</EAnnotation>
							<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
								<EStringToStringMapEntry key="local_communication_both_comp_same_vm" value="Tuple {
								message : String = 'The communication:' + self.name +
								' is local but the communicating components are mapped to different VMs',
								status : Boolean = let firstOwner : Component =
								self.providedCommunication.oclContainer().oclContainer().oclAsType(DeploymentModel).hostings
								->select(p | p.requiredHost.oclContainer() = self.providedCommunication.oclContainer())
									->first().providedHost.oclContainer() , secondOwner : Component =
									self.requiredCommunication.oclContainer().oclContainer().oclAsType(DeploymentModel).hostings
									->select(q | q.requiredHost.oclContainer() = self.requiredCommunication.oclContainer())
									->first().providedHost.oclContainer()
									in (self.type = CommunicationType::LOCAL) implies (if (firstOwner.oclIsTypeOf(InternalComponent) and
									secondOwner.oclIsTypeOf(InternalComponent))
									then firstOwner.oclAsType(InternalComponent).oclContainer().oclAsType(DeploymentModel).hostings
									->select(p | p.requiredHost.oclContainer() = firstOwner)
									->first().providedHost.oclContainer() =
									secondOwner.oclAsType(InternalComponent).oclContainer().oclAsType(DeploymentModel).hostings
									->select(p | p.requiredHost.oclContainer() = secondOwner)
									->first().providedHost.oclContainer()
									else if (firstOwner.oclIsTypeOf(VM) and secondOwner.oclIsTypeOf(InternalComponent))
									then firstOwner = secondOwner.oclAsType(InternalComponent).oclContainer().oclAsType(DeploymentModel).hostings
									->select(p | p.requiredHost.oclContainer() = secondOwner)
									->first().providedHost.oclContainer()
									else if (firstOwner.oclIsTypeOf(InternalComponent) and secondOwner.oclIsTypeOf(VM))
									then firstOwner.oclAsType(InternalComponent).oclContainer().oclAsType(DeploymentModel).hostings
									->select(p | p.requiredHost.oclContainer() = firstOwner)
									->first().providedHost.oclContainer() = secondOwner
									else if (firstOwner = secondOwner)
									then true
									else false
									endif
									endif
									endif
									endif)
									}.status"/>
								</EAnnotation>
								<attr name="type" lowerBound="1" defaultValueLiteral="ANY" type="//CommunicationType"/>
								<ref name="providedCommunication" lowerBound="1" type="ProvidedCommunication"/>
								<ref name="requiredCommunication" lowerBound="1" type="RequiredCommunication"/>
								<ref name="providedPortConfiguration" containment="true" type="Configuration"/>
								<ref name="requiredPortConfiguration" containment="true" type="Configuration"/>
							</class>
							<EEnum name="CommunicationType">
								<EEnumLiteral name="ANY"/>
								<EEnumLiteral name="LOCAL" value="1"/>
								<EEnumLiteral name="REMOTE" value="2"/>
							</EEnum>
							<class name="CommunicationPort" abstract="true">
								<attr name="portNumber" type="//EInt"/>
							</class>
							<class name="ProvidedCommunication"/>
							<class name="RequiredCommunication">
								<attr name="isMandatory" lowerBound="1" type="//EBoolean"/>
							</class>
							<class name="Hosting">
								<ref name="providedHost" lowerBound="1" type="ProvidedHost"/>
								<ref name="requiredHost" lowerBound="1" type="RequiredHost"/>
								<ref name="providedHostConfiguration" containment="true" type="Configuration"/>
								<ref name="requiredHostConfiguration" containment="true" type="Configuration"/>
							</class>
							<class name="HostingPort" abstract="true"/>
							<class name="ProvidedHost"/>
							<class name="RequiredHost"/>
							<class name="ComponentInstance" abstract="true">
								<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
									<EStringToStringMapEntry key="constraints" value="component_port_instances_of_correct_type"/>
								</EAnnotation>
								<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
									<EStringToStringMapEntry key="component_port_instances_of_correct_type" value="Tuple {
									message : String = 'The type of component instance:' + self.name +
									' should have as provided communication/hosts the types of the component instance\'s provided communication/host instances',
									status : Boolean = providedCommunicationInstances
									->forAll(p | type.providedCommunications
										->includes(p.type)) and providedHostInstances
										->forAll(p | type.providedHosts
										->includes(p.type))
										}.status"/>
									</EAnnotation>
									<ref name="type" lowerBound="1" type="Component"/>
									<ref name="providedCommunicationInstances" upperBound="-1" containment="true" type="ProvidedCommunicationInstance"/>
									<ref name="providedHostInstances" upperBound="-1" containment="true" type="ProvidedHostInstance"/>
									<attr name="instantiatedOn" type="//EDate"/>
									<attr name="destroyedOn" type="//EDate"/>
								</class>
								<class name="InternalComponentInstance">
									<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
										<EStringToStringMapEntry key="constraints" value="internal_component_port_instances_of_correct_type"/>
									</EAnnotation>
									<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
										<EStringToStringMapEntry key="internal_component_port_instances_of_correct_type" value="Tuple {
										message : String = 'The type of component instance:' + self.name +
										' should have as required communication/hosts the types of the component instance\'s required communication/host instances',
										status : Boolean = type.oclIsKindOf(InternalComponent)
										and requiredCommunicationInstances
										->forAll(p | type.oclAsType(InternalComponent).requiredCommunications
											->includes(p.type)) and (requiredHostInstance <> null implies requiredHostInstance.type =
											type.oclAsType(InternalComponent).requiredHost)
											}.status"/>
										</EAnnotation>
										<ref name="requiredCommunicationInstances" upperBound="-1" containment="true" type="RequiredCommunicationInstance"/>
										<ref name="requiredHostInstance" containment="true" type="RequiredHostInstance"/>
									</class>
									<class name="VMInstance">
										<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
											<EStringToStringMapEntry key="constraints" value="correct_type_for_vm_instance correct_vm_type_value_in_vm_instance"/>
										</EAnnotation>
										<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
											<EStringToStringMapEntry key="correct_type_for_vm_instance" value="Tuple {
											message : String = 'VM Instance: ' + self.name +
											' should have as type a VM',
											status : Boolean = type.oclIsTypeOf(VM)
											}.status"/>
											<EStringToStringMapEntry key="correct_vm_type_value_in_vm_instance" value="Tuple {
											message : String = 'VMInstance: ' + self.name +
											' has a vmTypeValue which is not included in the ValueType of the vmType Attribute',
											status : Boolean = ((vmType <> null and
												vmType.valueType <> null) implies (if (vmType.valueType.oclIsTypeOf(camel::type::Range))
												then if (vmTypeValue.oclIsTypeOf(camel::type::IntegerValue))
												then
												vmType.valueType.oclAsType(camel::type::Range).includesValue(vmTypeValue.oclAsType(camel::type::IntegerValue).value.oclAsType(ecore::EDouble))
												else if (vmTypeValue.oclIsTypeOf(camel::type::FloatsValue))
												then
												vmType.valueType.oclAsType(camel::type::Range).includesValue(vmTypeValue.oclAsType(camel::type::FloatsValue).value.oclAsType(ecore::EDouble))
												else if (vmTypeValue.oclIsTypeOf(camel::type::DoublePrecisionValue))
												then
												vmType.valueType.oclAsType(camel::type::Range).includesValue(vmTypeValue.oclAsType(camel::type::DoublePrecisionValue).value)
												else false
												endif
												endif
												endif
												else if (vmType.valueType.oclIsTypeOf(camel::type::Enumeration))
												then if (vmTypeValue.oclIsTypeOf(camel::type::StringsValue))
												then
												vmType.valueType.oclAsType(camel::type::Enumeration).includesName(vmTypeValue.oclAsType(camel::type::StringsValue).value)
												else if (vmTypeValue.oclIsTypeOf(camel::type::EnumerateValue))
												then
												vmType.valueType.oclAsType(camel::type::Enumeration).includesName(vmTypeValue.oclAsType(camel::type::EnumerateValue).name)
												else false
												endif
												endif
												else if (vmType.valueType.oclIsTypeOf(camel::type::List))
												then vmType.valueType.oclAsType(camel::type::List).includesValue(vmTypeValue)
												else if (vmType.valueType.oclIsTypeOf(camel::type::RangeUnion))
												then if (vmTypeValue.oclIsTypeOf(camel::type::IntegerValue))
												then
												vmType.valueType.oclAsType(camel::type::RangeUnion).includesValue(vmTypeValue.oclAsType(camel::type::IntegerValue).value.oclAsType(ecore::EDouble))
												else if (vmTypeValue.oclIsTypeOf(camel::type::FloatsValue))
												then
												vmType.valueType.oclAsType(camel::type::RangeUnion).includesValue(vmTypeValue.oclAsType(camel::type::FloatsValue).value.oclAsType(ecore::EDouble))
												else if (vmTypeValue.oclIsTypeOf(camel::type::DoublePrecisionValue))
												then
												vmType.valueType.oclAsType(camel::type::RangeUnion).includesValue(vmTypeValue.oclAsType(camel::type::DoublePrecisionValue).value)
												else false
												endif
												endif
												endif
												else false
												endif
												endif
												endif
												endif))
												}.status"/>
											</EAnnotation>
											<EOperation name="checkDates" type="EBoolean">
												<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
													<EStringToStringMapEntry key="body" value="System.out.println("Checking dates for VMInstance: " + vm);
													java.util.Date createdOn = vm.getInstantiatedOn();
													java.util.Date destroyedOn = vm.getDestroyedOn();
													if (createdOn != null && destroyedOn != null && destroyedOn.before(createdOn)) return Boolean.FALSE;
													return Boolean.TRUE;"/>
												</EAnnotation>
												<EParameter name="vm" type="VMInstance"/>
											</EOperation>
											<ref name="vmType" type="Attribute"/>
											<ref name="vmTypeValue" type="SingleValue"/>
											<attr name="ip" type="//EString">
												<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
													<EStringToStringMapEntry key="body" value="CommunicationInstance"/>
													<EStringToStringMapEntry key="unique" value="false"/>
													<EStringToStringMapEntry key="upper" value="*"/>
												</EAnnotation>
											</attr>
										</class>
										<class name="CommunicationInstance">
											<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
												<EStringToStringMapEntry key="constraints" value="communication_instance_correct_port_instances"/>
											</EAnnotation>
											<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
												<EStringToStringMapEntry key="communication_instance_correct_port_instances" value="Tuple {
												message : String = 'CommunicationInstance: ' + self.name +
												' should have its provided and required communication instances\' types mapping to its required communication/host type, respectively',
												status : Boolean = requiredCommunicationInstance.type
												= type.requiredCommunication and providedCommunicationInstance.type = type.providedCommunication
												}.status"/>
											</EAnnotation>
											<ref name="type" lowerBound="1" type="Communication"/>
											<ref name="providedCommunicationInstance" lowerBound="1" type="ProvidedCommunicationInstance"/>
											<ref name="requiredCommunicationInstance" lowerBound="1" type="RequiredCommunicationInstance"/>
										</class>
										<class name="CommunicationPortInstance">
											<ref name="type" lowerBound="1" type="CommunicationPort"/>
										</class>
										<class name="ProvidedCommunicationInstance"/>
										<class name="RequiredCommunicationInstance"/>
										<class name="HostingInstance">
											<ref name="type" lowerBound="1" type="Hosting"/>
											<ref name="providedHostInstance" lowerBound="1" type="ProvidedHostInstance"/>
											<ref name="requiredHostInstance" lowerBound="1" type="RequiredHostInstance"/>
										</class>
										<class name="HostingPortInstance" abstract="true">
											<ref name="type" lowerBound="1" type="HostingPort"/>
										</class>
										<class name="ProvidedHostInstance"/>
										<class name="RequiredHostInstance"/>
									</package>
									<package name="execution" nsURI="http://www.paasage.eu/2015/06/camel/execution" nsPrefix="execution">
										<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
											<EStringToStringMapEntry key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
											<EStringToStringMapEntry key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
											<EStringToStringMapEntry key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
										</EAnnotation>
										<class name="ExecutionModel">
											<ref name="actionRealisations" ordered="false" upperBound="-1" containment="true" type="ActionRealisation"/>
											<ref name="eventInstances" upperBound="-1" containment="true" type="EventInstance"/>
											<ref name="executionContexts" ordered="false" upperBound="-1" containment="true" type="ExecutionContext"/>
											<ref name="measurements" ordered="false" upperBound="-1" containment="true" type="Measurement"/>
											<ref name="sloAssessessments" ordered="false" upperBound="-1" containment="true" type="SLOAssessment"/>
											<ref name="ruleTriggers" ordered="false" upperBound="-1" containment="true" type="RuleTrigger"/>
										</class>
										<class name="ActionRealisation">
											<attr name="name" lowerBound="1" iD="true" type="//EString"/>
											<ref name="action" lowerBound="1" type="Action"/>
											<attr name="startTime" type="//EDate"/>
											<attr name="endTime" type="//EDate"/>
											<attr name="lowLevelActions" type="//EString"/>
										</class>
										<class name="ExecutionContext">
											<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
												<EStringToStringMapEntry key="constraints" value="execution_context_total_cost execution_context_unit_cost"/>
											</EAnnotation>
											<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
												<EStringToStringMapEntry key="execution_context_total_cost" value="Tuple {
												message : String = 'The total cost of execution context: ' + self.name +
												' should be non-negative',
												status : Boolean = self.totalCost >= 0
													}.status"/>
													<EStringToStringMapEntry key="execution_context_unit_cost" value="Tuple {
													message : String = 'The unit of cost should be provided as the totalCost of execution context: '
													+ self.name + ' is positive',
													status : Boolean = self.totalCost > 0 implies costUnit <> null
														}.status"/>
													</EAnnotation>
													<attr name="name" lowerBound="1" iD="true" type="//EString">
														<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
															<EStringToStringMapEntry key="body" value="Measurement"/>
															<EStringToStringMapEntry key="unique" value="false"/>
															<EStringToStringMapEntry key="upper" value="*"/>
														</EAnnotation>
													</attr>
													<ref name="application" lowerBound="1" type="Application"/>
													<attr name="startTime" type="//EDate">
														<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
															<EStringToStringMapEntry key="body" value="Measurement"/>
															<EStringToStringMapEntry key="unique" value="false"/>
															<EStringToStringMapEntry key="upper" value="*"/>
														</EAnnotation>
													</attr>
													<attr name="endTime" type="//EDate"/>
													<attr name="totalCost" type="//EDouble"/>
													<ref name="costUnit" type="MonetaryUnit"/>
													<ref name="deploymentModel" lowerBound="1" type="DeploymentModel"/>
													<ref name="requirementGroup" lowerBound="1" type="RequirementGroup"/>
												</class>
												<class name="Measurement">
													<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
														<EStringToStringMapEntry key="constraints" value="measurement_slo_refer_to_correct_metric measurement_event_instance_same_metric correct_measurement_value measurement_metric_refers_to_correct_execution_context"/>
													</EAnnotation>
													<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
														<EStringToStringMapEntry key="measurement_slo_refer_to_correct_metric" value="Tuple {
														message : String = 'Measurement: ' + self.name +
														' should have a metric instance with a type that maps to the metric referred to by the the measurement\'s respective SLO',
														status : Boolean = self.slo
														<> null implies (if (self.slo.customServiceLevel.oclIsTypeOf(camel::metric::MetricCondition))
															then self.slo.customServiceLevel.oclAsType(camel::metric::MetricCondition).metricContext.metric =
															self.metricInstance.metric
															else false
															endif)
															}.status"/>
															<EStringToStringMapEntry key="measurement_event_instance_same_metric" value="Tuple {
															message : String = 'Measurement: ' + self.name +
															' maps to non-functional event instance : ' + eventInstance.toString() +
															' with a type related to a metric different from the one of this measurement',
															status : Boolean = (self.eventInstance <> null and
																self.eventInstance.event.oclIsTypeOf(camel::scalability::NonFunctionalEvent)) implies self.metricInstance.metric =
																self.eventInstance.event.oclAsType(camel::scalability::NonFunctionalEvent).metricCondition.metricContext.metric
																}.status"/>
																<EStringToStringMapEntry key="correct_measurement_value" value="Tuple {
																message : String = 'Measurement: ' + self.name + ' has a value: ' + value.toString() +
																' that is outside the range of values of metric instance: ' + metricInstance.name,
																status : Boolean = let type :
																camel::type::ValueType = metricInstance.metric.valueType
																in if (type <> null)
																	then if (type.oclIsTypeOf(camel::type::Range))
																	then type.oclAsType(camel::type::Range).includesValue(self.value)
																	else if (type.oclIsTypeOf(camel::type::RangeUnion))
																	then type.oclAsType(camel::type::RangeUnion).includesValue(self.value)
																	else true
																	endif
																	endif
																	else true
																	endif
																	}.status"/>
																	<EStringToStringMapEntry key="measurement_metric_refers_to_correct_execution_context" value="Tuple {
																	message : String = 'Measurement: ' + self.name +
																	' has execution context:' + executionContext.name +
																	' which is different from the one of the binding of the respective metric instance:' +
																	metricInstance.name,
																	status : Boolean = executionContext = metricInstance.objectBinding.executionContext
																	}.status"/>
																</EAnnotation>
																<attr name="name" lowerBound="1" iD="true" type="//EString"/>
																<ref name="executionContext" lowerBound="1" type="ExecutionContext"/>
																<ref name="metricInstance" lowerBound="1" type="MetricInstance"/>
																<attr name="value" lowerBound="1" type="//EDouble"/>
																<attr name="rawData" type="//EString"/>
																<attr name="measurementTime" lowerBound="1" type="//EDate"/>
																<ref name="slo" type="ServiceLevelObjective"/>
																<ref name="eventInstance" type="EventInstance"/>
															</class>
															<class name="ApplicationMeasurement">
																<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																	<EStringToStringMapEntry key="constraints" value="application_measurement_same_app"/>
																</EAnnotation>
																<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																	<EStringToStringMapEntry key="application_measurement_same_app" value="Tuple {
																	message : String = 'ApplicationMeasurement: ' + self.name +
																	' has a different application from the one referenced by its execution context: ' +
																	self.executionContext.name,
																	status : Boolean = self.executionContext.application = self.application
																	}.status"/>
																</EAnnotation>
																<ref name="application" lowerBound="1" type="Application"/>
															</class>
															<class name="InternalComponentMeasurement">
																<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																	<EStringToStringMapEntry key="constraints" value="internal_component_measurement_metric_refer_to_same_component internal_component_measurement_included_in_execution_context"/>
																</EAnnotation>
																<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																	<EStringToStringMapEntry key="internal_component_measurement_metric_refer_to_same_component" value="Tuple {
																	message : String = 'The ComponentInstance: ' +
																	internalComponentInstance.name + ' of InternalComponentMeasurement: ' + self.name +
																	' is different from the one referenced by the binding of the respective metric instance: ' +
																	self.metricInstance.name,
																	status : Boolean = metricInstance.objectBinding.oclIsTypeOf(camel::metric::MetricComponentBinding) and
																	metricInstance.objectBinding.oclAsType(camel::metric::MetricComponentBinding).componentInstance =
																	internalComponentInstance
																	}.status"/>
																	<EStringToStringMapEntry key="internal_component_measurement_included_in_execution_context" value="Tuple {
																	message : String = 'ComponentInstance: ' +
																	internalComponentInstance.name + ' is not included in the deployment model of execution context: ' +
																	self.executionContext.name + ' for InternalComponentMeasurement: ' +
																	self.name,
																	status : Boolean = executionContext.deploymentModel.internalComponentInstances
																	->includes(internalComponentInstance)
																		}.status"/>
																	</EAnnotation>
																	<ref name="internalComponentInstance" lowerBound="1" type="InternalComponentInstance"/>
																</class>
																<class name="CommunicationMeasurement">
																	<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																		<EStringToStringMapEntry key="constraints" value="resource_coupling_measurement_diff_vm_instances"/>
																	</EAnnotation>
																	<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																		<EStringToStringMapEntry key="resource_coupling_measurement_diff_vm_instances" value="Tuple {
																		message : String = 'The source: ' + sourceVMInstance.name +
																		' and destination: ' + destinationVMInstance.name + ' VM instances of ResourceCouplingMeasurement: ' + self.name +
																		' are either identical or not included in the deployment model of the respective execution context: ' +
																		self.executionContext.name,
																		status : Boolean = sourceVMInstance <> destinationVMInstance and
																			(executionContext.deploymentModel.vmInstances
																			->includes(sourceVMInstance)) and (executionContext.deploymentModel.vmInstances
																			->includes(destinationVMInstance))
																			}.status"/>
																		</EAnnotation>
																		<ref name="sourceVMInstance" lowerBound="1" type="VMInstance"/>
																		<ref name="destinationVMInstance" lowerBound="1" type="VMInstance"/>
																	</class>
																	<class name="VMMeasurement">
																		<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																			<EStringToStringMapEntry key="constraints" value="resource_measurement_ec_deployment_model_vm_instance resource_measurement_metric_vm_instance"/>
																		</EAnnotation>
																		<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																			<EStringToStringMapEntry key="resource_measurement_ec_deployment_model_vm_instance" value="Tuple {
																			message : String = 'The VMInstance: ' + vmInstance.name +
																			' of ResourceMeasurement: ' + self.name +
																			' is not included in the deployment model of the respective execution context: ' +
																			self.executionContext.name,
																			status : Boolean = vmInstance <> null implies (executionContext.deploymentModel.vmInstances
																				->includes(vmInstance))
																				}.status"/>
																				<EStringToStringMapEntry key="resource_measurement_metric_vm_instance" value="Tuple {
																				message : String = 'The binding of metric instance: ' + metricInstance.name +
																				' associated to ResourceMeasurement: ' + self.name +
																				' refers to a different VMInstance from the one related to this measurement',
																				status : Boolean = vmInstance <> null implies
																					(metricInstance.objectBinding.oclIsTypeOf(camel::metric::MetricVMBinding) and
																					metricInstance.objectBinding.oclAsType(camel::metric::MetricVMBinding).vmInstance = vmInstance)
																					}.status"/>
																				</EAnnotation>
																				<ref name="vmInstance" lowerBound="1" type="VMInstance"/>
																			</class>
																			<class name="SLOAssessment">
																				<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																					<EStringToStringMapEntry key="constraints" value="slo_assessment_same_metric slo_assessment_slo_in_reqs_for_execution_context slo_assessment_same_exec_context"/>
																				</EAnnotation>
																				<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																					<EStringToStringMapEntry key="slo_assessment_same_metric" value="Tuple {
																					message : String = 'The metric in slo: ' + slo.name + ' of SLOAssessment: ' + self.name +
																					' is not the same as the one referenced by the respective measurement: ' + measurement.name,
																					status : Boolean = if
																					(slo.customServiceLevel.oclIsTypeOf(camel::metric::MetricCondition))
																					then measurement.metricInstance.metric =
																					slo.customServiceLevel.oclAsType(camel::metric::MetricCondition).metricContext.metric
																					else false
																					endif
																					}.status"/>
																					<EStringToStringMapEntry key="slo_assessment_slo_in_reqs_for_execution_context" value="Tuple {
																					message : String = 'SLO: ' + self.slo.name +
																					' is not included in the requirement group of the respective execution context: ' + self.executionContext.name +
																					' of SLO Assessment: ' + self.name,
																					status : Boolean = self.executionContext.requirementGroup.requirements
																					->includes(self.slo)
																						}.status"/>
																						<EStringToStringMapEntry key="slo_assessment_same_exec_context" value="Tuple {
																						message : String = 'ExecutionContext: ' + executionContext.name + ' in SLOAssessment: ' +
																						self.name + ' is not the same as the one of the respective measurement: ' +
																						self.measurement.name,
																						status : Boolean = executionContext = measurement.executionContext
																						}.status"/>
																					</EAnnotation>
																					<attr name="name" lowerBound="1" type="//EString"/>
																					<ref name="slo" lowerBound="1" type="ServiceLevelObjective"/>
																					<attr name="assessment" lowerBound="1" type="//EBoolean"/>
																					<ref name="executionContext" lowerBound="1" type="ExecutionContext"/>
																					<ref name="measurement" lowerBound="1" type="Measurement"/>
																					<attr name="assessmentTime" lowerBound="1" type="//EDate"/>
																				</class>
																				<class name="RuleTrigger">
																					<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																						<EStringToStringMapEntry key="constraints" value="rule_trigger_event_instance_correct_events rule_trigger_correct_action rule_trigger_scal_reqs_of_correct_dep_model"/>
																					</EAnnotation>
																					<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																						<EStringToStringMapEntry key="rule_trigger_event_instance_correct_events" value="Tuple {
																						message : String = 'The eventInstances ' + ' of RuleTrigger: ' + self.name +
																						' do not correspond to the event(s) of the respective scalability rule: ' + self.scalabilityRule.name,
																						status : Boolean = if
																						(self.scalabilityRule.event.oclIsKindOf(camel::scalability::SimpleEvent))
																						then (self.eventInstances
																						->size() = 1 and self.eventInstances
																							->exists(p | p.event.oclAsType(camel::scalability::SimpleEvent) =
																							self.scalabilityRule.event.oclAsType(camel::scalability::SimpleEvent)))
																							else self.eventInstances
																							->forAll(p | self.scalabilityRule.event.oclAsType(camel::scalability::EventPattern).includesEvent(p.event))
																							endif
																							}.status"/>
																							<EStringToStringMapEntry key="rule_trigger_correct_action" value="Tuple {
																							message : String = 'Either the size of action realizations for RuleTrigger: ' + self.name +
																							' is not the same as the one corresponding to the actions of the respective scalability rule: ' +
																							self.scalabilityRule.name +
																							' or there is an action realization mapping to an action not contained in the action list of the trigger\'s scalability rule',
																							status : Boolean = (self.actionRealisations
																							->size() = self.scalabilityRule.actions
																								->size()) and (self.actionRealisations
																								->forAll(p | self.scalabilityRule.actions
																								->exists(q | q = p.action)))
																								}.status"/>
																								<EStringToStringMapEntry key="rule_trigger_scal_reqs_of_correct_dep_model" value="Tuple {
																								message : String = 'There is a scale requirements for the scalability rule: ' +
																								self.scalabilityRule.name + ' of RuleTrigger: ' + self.name +
																								' with a component or vm not included in the deployment model of the trigger\'s respective execution context: ' +
																								self.executionContext.name,
																								status : Boolean = scalabilityRule.scaleRequirements
																								->forAll(p | if (p.oclIsTypeOf(camel::requirement::HorizontalScaleRequirement) and
																									p.oclAsType(camel::requirement::HorizontalScaleRequirement).component <> null)
																									then (executionContext.deploymentModel.internalComponents
																									->includes(p.oclAsType(camel::requirement::HorizontalScaleRequirement).component))
																										else if (p.oclIsTypeOf(camel::requirement::VerticalScaleRequirement) and
																										p.oclAsType(camel::requirement::VerticalScaleRequirement).vm <> null)
																										then (executionContext.deploymentModel.vms
																										->includes(p.oclAsType(camel::requirement::VerticalScaleRequirement).vm))
																											else true
																											endif
																											endif)
																											}.status"/>
																										</EAnnotation>
																										<attr name="name" lowerBound="1" type="//EString"/>
																										<ref name="scalabilityRule" lowerBound="1" type="ScalabilityRule"/>
																										<ref name="eventInstances" lowerBound="1" upperBound="-1" type="EventInstance"/>
																										<ref name="actionRealisations" lowerBound="1" upperBound="-1" type="ActionRealisation"/>
																										<attr name="trigerringTime" lowerBound="1" type="//EDate"/>
																										<ref name="executionContext" lowerBound="1" type="ExecutionContext"/>
																									</class>
																								</package>
																								<package name="location" nsURI="http://www.paasage.eu/2015/06/camel/location" nsPrefix="location">
																									<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																										<EStringToStringMapEntry key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
																										<EStringToStringMapEntry key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
																										<EStringToStringMapEntry key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
																									</EAnnotation>
																									<class name="LocationModel">
																										<ref name="cloudLocations" upperBound="-1" containment="true" type="CloudLocation"/>
																										<ref name="countries" upperBound="-1" containment="true" type="Country"/>
																										<ref name="regions" upperBound="-1" containment="true" type="GeographicalRegion"/>
																									</class>
																									<class name="Location" abstract="true">
																										<attr name="id" lowerBound="1" type="//EString"/>
																									</class>
																									<class name="CloudLocation">
																										<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																											<EStringToStringMapEntry key="constraints" value="cloud_location_same_as_parent"/>
																										</EAnnotation>
																										<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																											<EStringToStringMapEntry key="cloud_location_same_as_parent" value="Tuple {
																											message : String = 'CloudLocation: ' + self.id +
																											' should not be the same as its parent',
																											status : Boolean = parent <> null implies parent.id <> self.id
																												}.status"/>
																											</EAnnotation>
																											<EOperation name="checkRecursiveness" type="EBoolean">
																												<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																													<EStringToStringMapEntry key="body" value="System.out.println("Checking recursiveness for CloudLocation: " + cl1.getId());
																													for (eu.paasage.camel.location.CloudLocation cl: cl1.getSubLocations()){
																													if (cl.getId().equals(cl2.getId())) return Boolean.TRUE;
																													if (checkRecursiveness(cl,cl2)) return Boolean.TRUE;
																													}
																													return Boolean.FALSE;"/>
																												</EAnnotation>
																												<EParameter name="cl1" type="CloudLocation"/>
																												<EParameter name="cl2" type="CloudLocation"/>
																											</EOperation>
																											<attr name="isAssignable" lowerBound="1" defaultValueLiteral="false" type="//EBoolean"/>
																											<ref name="subLocations" upperBound="-1" containment="true" type="CloudLocation"/>
																											<ref name="parent" type="CloudLocation"/>
																											<ref name="geographicalRegion" type="GeographicalRegion"/>
																										</class>
																										<class name="GeographicalRegion">
																											<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																												<EStringToStringMapEntry key="constraints" value="geographical_region_not_in_parents"/>
																											</EAnnotation>
																											<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																												<EStringToStringMapEntry key="geographical_region_not_in_parents" value="Tuple {
																												message : String = 'Geographical Region:' + self.name +
																												' cannot be equivalent to any of its parents',
																												status : Boolean = self.parentRegions
																												->forAll(p | p.name <> self.name)
																													}.status"/>
																												</EAnnotation>
																												<attr name="name" lowerBound="1" type="//EString"/>
																												<ref name="parentRegions" upperBound="-1" type="GeographicalRegion"/>
																												<attr name="alternativeNames" upperBound="-1" type="//EString"/>
																											</class>
																											<class name="Country"/>
																										</package>
																										<package name="metric" nsURI="http://www.paasage.eu/2015/06/camel/metric" nsPrefix="metric">
																											<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																												<EStringToStringMapEntry key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
																												<EStringToStringMapEntry key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
																												<EStringToStringMapEntry key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
																											</EAnnotation>
																											<class name="Condition" abstract="true">
																												<attr name="name" lowerBound="1" type="//EString"/>
																												<attr name="comparisonOperator" lowerBound="1" type="//ComparisonOperatorType"/>
																												<attr name="threshold" lowerBound="1" type="//EDouble"/>
																												<attr name="validity" type="//EDate">
																													<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																														<EStringToStringMapEntry key="body" value="MetricCondition"/>
																														<EStringToStringMapEntry key="unique" value="false"/>
																														<EStringToStringMapEntry key="upper" value="*"/>
																													</EAnnotation>
																												</attr>
																											</class>
																											<class name="MetricCondition">
																												<ref name="metricContext" lowerBound="1" type="MetricContext"/>
																											</class>
																											<class name="PropertyCondition">
																												<ref name="propertyContext" lowerBound="1" type="PropertyContext"/>
																												<ref name="unit" type="MonetaryUnit"/>
																												<ref name="timeUnit" type="TimeIntervalUnit"/>
																											</class>
																											<EEnum name="ComparisonOperatorType">
																												<EEnumLiteral name="GREATER_THAN"/>
																												<EEnumLiteral name="GREATER_EQUAL_THAN" value="1"/>
																												<EEnumLiteral name="LESS_THAN" value="2"/>
																												<EEnumLiteral name="LESS_EQUAL_THAN" value="3"/>
																												<EEnumLiteral name="EQUAL" value="4"/>
																												<EEnumLiteral name="NOT_EQUAL" value="5"/>
																											</EEnum>
																											<class name="MetricInstance" abstract="true">
																												<EOperation name="checkRecursiveness" type="EBoolean">
																													<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																														<EStringToStringMapEntry key="body" value="System.out.println("Checking recursiveness for MetricInstance: " + m1.getName());
																														eu.paasage.camel.metric.CompositeMetricInstance cmi = (eu.paasage.camel.metric.CompositeMetricInstance)m1;
																														for (eu.paasage.camel.metric.MetricInstance m: cmi.getComposingMetricInstances()){
																														if (m.getName().equals(m2.getName())) return Boolean.TRUE;
																														if (m instanceof eu.paasage.camel.metric.CompositeMetricInstance && checkRecursiveness(m,m2)) return Boolean.TRUE;
																														}
																														return Boolean.FALSE;"/>
																													</EAnnotation>
																													<EParameter name="m1" type="MetricInstance"/>
																													<EParameter name="m2" type="MetricInstance"/>
																												</EOperation>
																												<attr name="name" lowerBound="1" iD="true" type="//EString">
																													<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																														<EStringToStringMapEntry key="body" value="MetricFormulaParameter"/>
																														<EStringToStringMapEntry key="unique" value="false"/>
																														<EStringToStringMapEntry key="upper" value="*"/>
																													</EAnnotation>
																												</attr>
																												<ref name="metric" lowerBound="1" type="Metric"/>
																												<ref name="schedule" type="Schedule"/>
																												<ref name="window" type="Window"/>
																												<ref name="objectBinding" lowerBound="1" type="MetricObjectBinding"/>
																												<ref name="metricContext" type="MetricContext"/>
																											</class>
																											<class name="CompositeMetricInstance">
																												<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																													<EStringToStringMapEntry key="constraints" value="composite_metric_instance_to_components component_instances_metric_map_formula_templates component_metrics_refer_to_same_level_or_lower"/>
																												</EAnnotation>
																												<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																													<EStringToStringMapEntry key="composite_metric_instance_to_components" value="Tuple {
																													message : String = 'CompositeMetricInstance: ' + self.name +
																													' maps to a composite metric but there exists a composing metric with a different execution context associated to it',
																													status : Boolean = metric.oclIsTypeOf(CompositeMetric)
																													and composingMetricInstances
																													->forAll(p | p.objectBinding.executionContext = objectBinding.executionContext)
																														}.status"/>
																														<EStringToStringMapEntry key="component_instances_metric_map_formula_templates" value="Tuple {
																														message : String = 'CompositeMetricInstance: ' + self.name +
																														' should have component metric instances which map to the metrics referenced in the formula of the composite instance\'s metric',
																														status : Boolean = metric.oclIsTypeOf(CompositeMetric)
																														and self.metric.oclAsType(CompositeMetric).formula.parameters
																														->forAll(p | p.oclIsKindOf(Metric) implies self.composingMetricInstances
																															->exists(q | q.metric = p)) and self.metric.oclAsType(CompositeMetric).formula.parameters
																															->select(p | p.oclIsKindOf(Metric))
																															->size() = self.composingMetricInstances
																															->size()
																															}.status"/>
																															<EStringToStringMapEntry key="component_metrics_refer_to_same_level_or_lower" value="Tuple {
																															message : String = 'CompositeMetricInstance: ' + self.name +
																															' as a binding with a type that maps to a lower cloud level with respect to the one of its composing metrics (e.g., MetricVMBinding while composing metric has MetricComponentBinding)',
																															status : Boolean = if
																															(not (objectBinding.oclIsTypeOf(MetricApplicationBinding)))
																															then if (objectBinding.oclIsTypeOf(MetricComponentBinding))
																															then composingMetricInstances
																															->forAll(p | p.objectBinding.executionContext = self.objectBinding.executionContext and not
																																(p.objectBinding.oclIsTypeOf(MetricApplicationBinding)) and if
																																(self.objectBinding.oclAsType(MetricComponentBinding).componentInstance.oclIsKindOf(camel::deployment::InternalComponentInstance))
																																then if (p.objectBinding.oclIsTypeOf(MetricVMBinding))
																																then self.objectBinding.executionContext.deploymentModel.hostingInstances
																																->exists(q | q.providedHostInstance.oclContainer() = p.objectBinding.oclAsType(MetricVMBinding).vmInstance and
																																q.requiredHostInstance.oclContainer() = self.objectBinding.oclAsType(MetricComponentBinding).componentInstance)
																																else true
																																endif
																																else false
																																endif)
																																else composingMetricInstances
																																->forAll(p | p.objectBinding.oclIsTypeOf(MetricVMBinding))
																																endif
																																else true
																																endif
																																}.status"/>
																															</EAnnotation>
																															<ref name="composingMetricInstances" lowerBound="1" upperBound="-1" type="MetricInstance"/>
																														</class>
																														<class name="RawMetricInstance">
																															<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																<EStringToStringMapEntry key="constraints" value="raw_metric_instance_correct_metric_type"/>
																															</EAnnotation>
																															<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																<EStringToStringMapEntry key="raw_metric_instance_correct_metric_type" value="Tuple {
																																message : String = 'RawMetricInstance: ' + self.name +
																																' mut map to a raw metric',
																																status : Boolean = metric.oclIsTypeOf(RawMetric)
																																}.status"/>
																															</EAnnotation>
																															<ref name="sensor" lowerBound="1" type="Sensor"/>
																														</class>
																														<class name="MetricFormulaParameter">
																															<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																<EStringToStringMapEntry key="constraints" value="value_attribute_set_for_non_metric_formula_parameters"/>
																															</EAnnotation>
																															<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																<EStringToStringMapEntry key="value_attribute_set_for_non_metric_formula_parameters" value="Tuple {
																																message : String = 'MetricFormulaParameter: ' + self.name +
																																' has a value of null while not mapping to a metric or metric formula',
																																status : Boolean = not (self.oclIsKindOf(Metric) or
																																(self.oclIsKindOf(MetricFormula))) implies self.value <> null
																																	}.status"/>
																																</EAnnotation>
																																<attr name="name" lowerBound="1" type="//EString"/>
																																<ref name="value" containment="true" type="SingleValue"/>
																															</class>
																															<class name="MetricFormula">
																																<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																	<EStringToStringMapEntry key="constraints" value="metric_formula_has_metric metric_formula_correct_arity_for_function_wrt_parameters metric_formula_correct_arity_for_function"/>
																																</EAnnotation>
																																<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																	<EStringToStringMapEntry key="metric_formula_has_metric" value="Tuple {
																																	message : String = 'MetricFormula: ' + self.toString() + ' does not involve any metric as input parameter',
																																	status : Boolean = 
																																	hasMetric()
																																	}.status"/>
																																	<EStringToStringMapEntry key="metric_formula_correct_arity_for_function_wrt_parameters" value="Tuple {
																																	message : String = 'MetricFormula: ' + self.toString() +
																																	' has an incorrect arity: ' + functionArity.toString() + ' according to the size of the parameters list: ' +
																																	parameters
																																	->size().toString(),
																																		status : Boolean = ((self.functionArity = MetricFunctionArityType::UNARY) implies (self.parameters
																																		->size() = 1)) and ((self.functionArity = MetricFunctionArityType::BINARY) implies self.parameters
																																		->size() = 2) and ((self.functionArity = MetricFunctionArityType::N_ARY) implies self.parameters
																																		->size() >= 2)
																																		}.status"/>
																																		<EStringToStringMapEntry key="metric_formula_correct_arity_for_function" value="Tuple {
																																		message : String = 'MetricFormula: ' + self.toString() + ' has function: ' +
																																		function.toString() + ' that does not correctly correspond to its arity: ' +
																																		functionArity.toString(),
																																		status : Boolean = ((self.function = MetricFunctionType::MODULO or self.function =
																																		MetricFunctionType::PERCENTILE) implies self.functionArity = MetricFunctionArityType::BINARY) and (((self.function
																																		= MetricFunctionType::MEAN or self.function = MetricFunctionType::STD or self.function = MetricFunctionType::MIN
																																		or self.function = MetricFunctionType::MAX or self.function = MetricFunctionType::MODE or self.function =
																																		MetricFunctionType::MEDIAN or self.function = MetricFunctionType::DERIVATIVE or self.function =
																																		MetricFunctionType::COUNT) implies self.functionArity = MetricFunctionArityType::UNARY)) and (((self.function =
																																		MetricFunctionType::TIMES or self.function = MetricFunctionType::DIV) implies (self.functionArity =
																																		MetricFunctionArityType::BINARY or self.functionArity = MetricFunctionArityType::N_ARY)))
																																		}.status"/>
																																	</EAnnotation>
																																	<EOperation name="containsMetric" type="EBoolean">
																																		<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																			<EStringToStringMapEntry key="body" value="self.parameters
																																			->includes(m) or self.parameters
																																				->exists(p | p.oclIsTypeOf(MetricFormula) and p.oclAsType(MetricFormula).containsMetric(m))"/>
																																			</EAnnotation>
																																			<EParameter name="m" lowerBound="1" type="Metric"/>
																																		</EOperation>
																																		<EOperation name="hasMetric" type="EBoolean">
																																			<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																				<EStringToStringMapEntry key="body" value="self.parameters
																																				->exists(p | p.oclIsKindOf(Metric)) or 
																																					self.parameters->exists(p | p.oclIsTypeOf(MetricFormula) and p.oclAsType(MetricFormula).hasMetric())"/>
																																				</EAnnotation>
																																			</EOperation>
																																			<attr name="function" lowerBound="1" type="//MetricFunctionType"/>
																																			<attr name="functionArity" lowerBound="1" type="//MetricFunctionArityType"/>
																																			<attr name="functionPattern" type="//FunctionPatternType"/>
																																			<ref name="parameters" lowerBound="1" upperBound="-1" type="MetricFormulaParameter"/>
																																		</class>
																																		<class name="Metric" abstract="true">
																																			<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																				<EStringToStringMapEntry key="constraints" value="metric_measures_measurable_property"/>
																																			</EAnnotation>
																																			<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																				<EStringToStringMapEntry key="metric_measures_measurable_property" value="Tuple {
																																				message : String = 'Metric: ' + name + ' measures property: ' + self.property.name +
																																				' which is ABSTRACT (i.e., not MEASURABLE)',
																																				status : Boolean = self.property.type = PropertyType::MEASURABLE
																																				}.status"/>
																																			</EAnnotation>
																																			<EOperation name="checkRecursiveness" type="EBoolean">
																																				<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																					<EStringToStringMapEntry key="body" value="System.out.println("Checking recursiveness for Metric: " + mt1.getName());
																																					eu.paasage.camel.metric.CompositeMetric m1 = (eu.paasage.camel.metric.CompositeMetric)mt1;
																																					for (eu.paasage.camel.metric.MetricFormulaParameter param: m1.getFormula().getParameters()){
																																					if (param instanceof eu.paasage.camel.metric.Metric){
																																					eu.paasage.camel.metric.Metric mt = (eu.paasage.camel.metric.Metric)param;
																																					if (mt.getName().equals(mt2.getName())) return Boolean.TRUE;
																																					if (mt instanceof eu.paasage.camel.metric.CompositeMetric && checkRecursiveness(mt,mt2)) return Boolean.TRUE;
																																					}
																																					}
																																					return Boolean.FALSE;"/>
																																				</EAnnotation>
																																				<EParameter name="mt1" type="Metric"/>
																																				<EParameter name="mt2" type="Metric"/>
																																			</EOperation>
																																			<attr name="description" type="//EString"/>
																																			<ref name="valueType" type="ValueType"/>
																																			<attr name="valueDirection" type="//EShort"/>
																																			<ref name="unit" lowerBound="1" type="Unit"/>
																																			<attr name="layer" type="//LayerType"/>
																																			<ref name="property" lowerBound="1" type="Property"/>
																																			<attr name="isVariable" type="//EBoolean"/>
																																		</class>
																																		<class name="CompositeMetric">
																																			<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																				<EStringToStringMapEntry key="constraints" value="metric_layer_enforcement metric_percentage_unit_enforcement metric_composite_unit_enforcement"/>
																																			</EAnnotation>
																																			<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																				<EStringToStringMapEntry key="metric_layer_enforcement" value="Tuple {
																																				message : String = 'Composite Metric: ' + name +
																																				' has a layer which is below those of its composing metrics in the respective formula',
																																				status : Boolean = self.formula.parameters
																																				->forAll(p | (p.oclIsKindOf(Metric) implies self.greaterEqualThanLayer(self.layer, p.oclAsType(Metric).layer)))
																																					}.status"/>
																																					<EStringToStringMapEntry key="metric_percentage_unit_enforcement" value="Tuple {
																																					message : String = 'Composite Metric: ' + name +
																																					' has an incorrect unit (percentage) by considering the units of its composing metrics and the function(s) involved in the respective metric formula',
																																					status : Boolean = if
																																					(self.unit.unit = camel::unit::UnitType::PERCENTAGE)
																																					then (self.formula.parameters
																																					->forAll(p | p.oclIsKindOf(Metric) implies p.oclAsType(Metric).unit.unit = camel::unit::UnitType::PERCENTAGE) or
																																						(self.formula.function = MetricFunctionType::DIV and self.formula.parameters
																																						->size() = 2 and self.formula.parameters
																																						->forAll(p1, p2 | (p1.oclIsKindOf(Metric) and p2.oclIsKindOf(Metric)) implies p1.oclAsType(Metric).unit.unit =
																																						p2.oclAsType(Metric).unit.unit)))
																																						else true
																																						endif
																																						}.status"/>
																																						<EStringToStringMapEntry key="metric_composite_unit_enforcement" value="Tuple {
																																						message : String = 'Composite Metric: ' + self.name +
																																						' has a composite unit that does not correspond to the units of its composing metrics by also considering that its derivation formula maps to the DIV function',
																																						status : Boolean = if
																																						(self.formula.function = MetricFunctionType::DIV)
																																						then ((self.unit.unit = camel::unit::UnitType::BYTES_PER_SECOND) implies (self.formula.parameters
																																						->size() = 2 and self.formula.parameters
																																							->at(1).oclAsType(Metric).unit.unit = camel::unit::UnitType::BYTES and self.formula.parameters
																																							->at(2).oclAsType(Metric).unit.unit = camel::unit::UnitType::SECONDS) and (self.unit.unit =
																																							camel::unit::UnitType::REQUESTS_PER_SECOND) implies (self.formula.parameters
																																							->size() = 2 and self.formula.parameters
																																							->at(1).oclAsType(Metric).unit.unit = camel::unit::UnitType::REQUESTS and self.formula.parameters
																																							->at(2).oclAsType(Metric).unit.unit = camel::unit::UnitType::SECONDS) and (self.unit.unit =
																																							camel::unit::UnitType::TRANSACTIONS_PER_SECOND) implies (self.formula.parameters
																																							->size() = 2 and self.formula.parameters
																																							->at(1).oclAsType(Metric).unit.unit = camel::unit::UnitType::TRANSACTIONS and self.formula.parameters
																																							->at(2).oclAsType(Metric).unit.unit = camel::unit::UnitType::SECONDS))
																																							else true
																																							endif
																																							}.status"/>
																																						</EAnnotation>
																																						<EOperation name="greaterEqualThanLayer" lowerBound="1" type="EBoolean">
																																							<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																								<EStringToStringMapEntry key="body" value="if (l1 = camel::LayerType::SaaS)
																																								then true
																																								else (if (l1 = camel::LayerType::PaaS)
																																								then (if (l2 = camel::LayerType::PaaS or l2 = camel::LayerType::IaaS)
																																								then true
																																								else false
																																								endif)
																																								else (if (l2 = camel::LayerType::IaaS)
																																								then true
																																								else false
																																								endif)
																																								endif)
																																								endif"/>
																																							</EAnnotation>
																																							<EParameter name="l1" lowerBound="1" type="LayerType"/>
																																							<EParameter name="l2" lowerBound="1" type="LayerType"/>
																																						</EOperation>
																																						<ref name="formula" lowerBound="1" containment="true" type="MetricFormula"/>
																																					</class>
																																					<class name="RawMetric"/>
																																					<EEnum name="MetricFunctionArityType">
																																						<EEnumLiteral name="UNARY"/>
																																						<EEnumLiteral name="BINARY" value="1"/>
																																						<EEnumLiteral name="N_ARY" value="2"/>
																																					</EEnum>
																																					<EEnum name="MetricFunctionType">
																																						<EEnumLiteral name="PLUS"/>
																																						<EEnumLiteral name="MINUS" value="1"/>
																																						<EEnumLiteral name="TIMES" value="2"/>
																																						<EEnumLiteral name="DIV" value="3"/>
																																						<EEnumLiteral name="MODULO" value="4"/>
																																						<EEnumLiteral name="MEAN" value="5"/>
																																						<EEnumLiteral name="STD" value="6"/>
																																						<EEnumLiteral name="COUNT" value="7"/>
																																						<EEnumLiteral name="MIN" value="8"/>
																																						<EEnumLiteral name="MAX" value="9"/>
																																						<EEnumLiteral name="PERCENTILE" value="10"/>
																																						<EEnumLiteral name="DERIVATIVE" value="11"/>
																																						<EEnumLiteral name="MODE" value="12"/>
																																						<EEnumLiteral name="MEDIAN" value="13"/>
																																					</EEnum>
																																					<class name="MetricObjectBinding" abstract="true">
																																						<attr name="name" lowerBound="1" type="//EString"/>
																																						<ref name="executionContext" lowerBound="1" type="ExecutionContext"/>
																																					</class>
																																					<class name="MetricApplicationBinding"/>
																																					<class name="MetricComponentBinding">
																																						<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																							<EStringToStringMapEntry key="constraints" value="vm_and_sw_comp_connected_in_component_binding"/>
																																						</EAnnotation>
																																						<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																							<EStringToStringMapEntry key="vm_and_sw_comp_connected_in_component_binding" value="Tuple {
																																							message : String = 'MetricComponentBinding: ' + self.name +
																																							' has a componentInstance: ' + self.componentInstance.name +
																																							'which is either not included in the the respective deployment model of the binding\'s execution context: ' +
																																							self.executionContext.name +
																																							' or is not connected in this deployment model with the vmInstance or it is an external component such that in this case a null value for the vmInstance should have been provided',
																																							status : Boolean = if
																																							(componentInstance.oclIsTypeOf(camel::deployment::InternalComponentInstance))
																																							then (executionContext.deploymentModel.internalComponentInstances
																																							->includes(componentInstance)) and if (vmInstance <> null)
																																								then (executionContext.deploymentModel.vmInstances
																																								->includes(vmInstance)) and (executionContext.deploymentModel.hostingInstances
																																									->exists(c | c.requiredHostInstance.oclContainer() = componentInstance and c.providedHostInstance.oclContainer() = vmInstance) or
																																									(executionContext.deploymentModel.hostingInstances
																																									->exists(c | c.requiredHostInstance.oclContainer() = componentInstance and
																																									executionContext.deploymentModel.hostingInstances
																																									->exists(d | d.requiredHostInstance.oclContainer() = c.providedHostInstance.oclContainer() and d.providedHostInstance.oclContainer() =
																																									vmInstance))))
																																									else true
																																									endif
																																									else false
																																									endif
																																									}.status"/>
																																								</EAnnotation>
																																								<ref name="vmInstance" type="VMInstance"/>
																																								<ref name="componentInstance" lowerBound="1" type="ComponentInstance"/>
																																							</class>
																																							<class name="MetricVMBinding">
																																								<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																									<EStringToStringMapEntry key="constraints" value="vm_binding_vm_in_dep_model_of_app"/>
																																								</EAnnotation>
																																								<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																									<EStringToStringMapEntry key="vm_binding_vm_in_dep_model_of_app" value="Tuple {
																																									message : String = 'MetricVMBinding: ' + self.name + ' has VMInstance: ' + vmInstance.name
																																									+ ' which is not included in the deployment model of the respective execution context: ' +
																																									self.executionContext.name,
																																									status : Boolean = (executionContext.deploymentModel.vmInstances
																																									->includes(vmInstance))
																																										}.status"/>
																																									</EAnnotation>
																																									<ref name="vmInstance" lowerBound="1" type="VMInstance"/>
																																								</class>
																																								<class name="Property">
																																									<attr name="name" lowerBound="1" type="//EString"/>
																																									<attr name="description" type="//EString"/>
																																									<attr name="type" lowerBound="1" type="//PropertyType"/>
																																									<ref name="subProperties" upperBound="-1" type="Property"/>
																																									<ref name="sensors" upperBound="-1" type="Sensor"/>
																																								</class>
																																								<EEnum name="PropertyType">
																																									<EEnumLiteral name="ABSTRACT"/>
																																									<EEnumLiteral name="MEASURABLE" value="1"/>
																																								</EEnum>
																																								<class name="Schedule">
																																									<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																										<EStringToStringMapEntry key="constraints" value="schedule_correct_values"/>
																																									</EAnnotation>
																																									<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																										<EStringToStringMapEntry key="schedule_correct_values" value="Tuple {
																																										message : String = 'Schedule: ' + self.name +
																																										' has wrong value combination for its attributes and properties. In particular, either the type of the schedule is SINGLE_EVENT and a value of any of the rest of the attributes or the unit property has been given or the schedule type is different but a non-positive value of the interval attribute or no value for the unit property has been provided',
																																										status : Boolean = (self.type
																																										<> ScheduleType::SINGLE_EVENT implies (self.interval > 0 and self.unit <> null)) and ((self.type =
																																											ScheduleType::SINGLE_EVENT implies (interval = 0 and start = null and end = null and unit = null)))
																																											}.status"/>
																																										</EAnnotation>
																																										<EOperation name="checkStartEndDates" type="EBoolean">
																																											<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																												<EStringToStringMapEntry key="body" value="System.out.println("CHECKING Schedule_Start_Before_End: " + this + " " + this.getStart() + " " + this.getEnd()); java.util.Date date1 = this.getStart(); java.util.Date date2 = this.getEnd(); if ((this.getType() != ScheduleType.SINGLE_EVENT) && (date1 == null || date2 == null)) return Boolean.FALSE; if (date1 == null || date2 == null || (date1 != null && date2 != null && date1.before(date2))) return Boolean.TRUE; return Boolean.FALSE;"/>
																																											</EAnnotation>
																																											<EParameter name="this" lowerBound="1" type="Schedule"/>
																																										</EOperation>
																																										<EOperation name="checkIntervalRepetitions" type="EBoolean">
																																											<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																												<EStringToStringMapEntry key="body" value="System.out.println("Schedule_correct_rep: " + s + " " + s.getStart() + " " + s.getEnd() + " " + s.getInterval() + " " + s.getRepetitions());
																																												Date d1 = s.getStart();
																																												Date d2 = s.getEnd();
																																												int reps = s.getRepetitions();
																																												long interval = s.getInterval();
																																												eu.paasage.camel.unit.TimeIntervalUnit unit = s.getUnit();
																																												double diff = d2.getTime()-d1.getTime();
																																												if (d1 != null && d2 != null && interval != 0){
																																												if (unit.equals(eu.paasage.camel.unit.UnitType.SECONDS)){
																																												diff = diff / 1000.0;
																																												}
																																												else if (unit.equals(eu.paasage.camel.unit.UnitType.MINUTES)){
																																												diff = diff / (60 * 1000.0);
																																												}
																																												else if (unit.equals(eu.paasage.camel.unit.UnitType.HOURS)){
																																												diff = diff / (60 * 60 * 1000.0);
																																												}
																																												else if (unit.equals(eu.paasage.camel.unit.UnitType.DAYS)){
																																												diff = diff / (24 * 60 * 60 * 1000.0);
																																												}
																																												else if (unit.equals(eu.paasage.camel.unit.UnitType.WEEKS)){
																																												diff = diff / (7 * 24 * 60 * 60 * 1000.0);
																																												}
																																												else if (unit.equals(eu.paasage.camel.unit.UnitType.MONTHS)){
																																												diff = diff / (30 * 24 * 60 * 60 * 1000.0);
																																												}
																																												if (diff >= interval){
																																													if (reps == 0 || (reps != 0 && reps * interval <= diff)) return Boolean.TRUE;
																																													}
																																													}
																																													return Boolean.FALSE;"/>
																																												</EAnnotation>
																																												<EParameter name="s" lowerBound="1" type="Schedule"/>
																																											</EOperation>
																																											<attr name="name" lowerBound="1" type="//EString"/>
																																											<attr name="start" type="//EDate"/>
																																											<attr name="end" type="//EDate"/>
																																											<attr name="type" lowerBound="1" type="//ScheduleType">
																																												<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																																													<EStringToStringMapEntry key="body" value="HorizontalScalingPolicy"/>
																																													<EStringToStringMapEntry key="unique" value="false"/>
																																													<EStringToStringMapEntry key="upper" value="*"/>
																																												</EAnnotation>
																																											</attr>
																																											<ref name="unit" lowerBound="1" type="TimeIntervalUnit"/>
																																											<attr name="repetitions" type="//EInt"/>
																																											<attr name="interval" lowerBound="1" type="//ELong"/>
																																										</class>
																																										<EEnum name="ScheduleType">
																																											<EEnumLiteral name="FIXED_RATE"/>
																																											<EEnumLiteral name="FIXED_DELAY" value="1"/>
																																											<EEnumLiteral name="SINGLE_EVENT" value="2"/>
																																										</EEnum>
																																										<class name="Sensor">
																																											<attr name="name" lowerBound="1" type="//EString"/>
																																											<attr name="configuration" type="//EString">
																																												<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																																													<EStringToStringMapEntry key="body" value="ResourceGroup"/>
																																													<EStringToStringMapEntry key="unique" value="false"/>
																																													<EStringToStringMapEntry key="upper" value="*"/>
																																												</EAnnotation>
																																											</attr>
																																											<attr name="isPush" type="//EBoolean">
																																												<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																																													<EStringToStringMapEntry key="body" value="ScalabilityRule"/>
																																													<EStringToStringMapEntry key="unique" value="false"/>
																																													<EStringToStringMapEntry key="upper" value="*"/>
																																												</EAnnotation>
																																											</attr>
																																										</class>
																																										<class name="Window">
																																											<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																												<EStringToStringMapEntry key="constraints" value="window_positive_params window_right_params_exist"/>
																																											</EAnnotation>
																																											<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																												<EStringToStringMapEntry key="window_positive_params" value="Tuple {
																																												message : String = 'Window:' + self.name +
																																												' has a negative value for the measurementSize and timeSize attributes',
																																												status : Boolean = (measurementSize >= 0) and (timeSize >=
																																													0)
																																													}.status"/>
																																													<EStringToStringMapEntry key="window_right_params_exist" value="Tuple {
																																													message : String = 'Window: ' + self.name +
																																													' has wrong value combinations for its attributes and properties. If sizeType is MEASUREMENTS_ONLY, then the measurementSize should be positive and all other values zero or null. If sizeType is TIME_ONLY, then both the unit should not be null and the timeSize should be positive, while the measurementSize should be zero. For the other values of sizeType, the values of all remaining attributes and units should be provided',
																																													status : Boolean = (self.sizeType
																																													= WindowSizeType::MEASUREMENTS_ONLY implies (unit = null and timeSize = 0 and measurementSize > 0)) and
																																														(self.sizeType = WindowSizeType::TIME_ONLY implies (unit <> null and timeSize > 0 and measurementSize = 0)) and
																																															((self.sizeType = WindowSizeType::FIRST_MATCH or self.sizeType = WindowSizeType::BOTH_MATCH) implies (timeSize > 0
																																															and unit <> null and measurementSize > 0))
																																																}.status"/>
																																															</EAnnotation>
																																															<attr name="name" lowerBound="1" type="//EString"/>
																																															<ref name="unit" type="TimeIntervalUnit"/>
																																															<attr name="windowType" lowerBound="1" type="//WindowType"/>
																																															<attr name="sizeType" lowerBound="1" type="//WindowSizeType"/>
																																															<attr name="measurementSize" type="//ELong"/>
																																															<attr name="timeSize" type="//ELong"/>
																																														</class>
																																														<EEnum name="WindowSizeType">
																																															<EEnumLiteral name="MEASUREMENTS_ONLY"/>
																																															<EEnumLiteral name="TIME_ONLY" value="1"/>
																																															<EEnumLiteral name="FIRST_MATCH" value="2"/>
																																															<EEnumLiteral name="BOTH_MATCH" value="3"/>
																																														</EEnum>
																																														<EEnum name="WindowType">
																																															<EEnumLiteral name="FIXED"/>
																																															<EEnumLiteral name="SLIDING" value="1"/>
																																														</EEnum>
																																														<class name="ConditionContext" abstract="true">
																																															<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																<EStringToStringMapEntry key="constraints" value="context_right_params at_least_one_alternative_in_condition_context"/>
																																															</EAnnotation>
																																															<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																<EStringToStringMapEntry key="context_right_params" value="Tuple {
																																																message : String = 'Context: ' + self.name +
																																																' has wrong value combinations for the quantifier and quantity attributes. When quantifier equals to SOME, then we have the two following cases: (a) relative values: minQuantity should be greater than 0.0 and maxQuantity less or equal to 1.0 and minQuantity less or equal to maxQuantity; (b) absolute values: minQuantity should be greater or equal to 1 and maxQuantity either -1 (inf) or greater or equal to minQuantity and both quantities should be integer',
																																																status : Boolean = ((self.quantifier
																																																= QuantifierType::SOME and self.isRelative = true) implies (minQuantity > 0.0 and maxQuantity <= 1.0 and
																																																	maxQuantity >= minQuantity)) and ((self.quantifier = QuantifierType::SOME and self.isRelative = false) implies
																																																		(minQuantity >= 1.0 and ((maxQuantity >= 1.0 and maxQuantity >= minQuantity) or maxQuantity = - 1.0)) and
																																																		(minQuantity / minQuantity.round()) = 1 and (maxQuantity / maxQuantity.round()) = 1)
																																																		}.status"/>
																																																		<EStringToStringMapEntry key="at_least_one_alternative_in_condition_context" value="Tuple {
																																																		message : String = 'In ConditionContext: ' + self.name +
																																																		' either a component or an application should be referenced',
																																																		status : Boolean = self.component <> null or self.application <> null
																																																			}.status"/>
																																																		</EAnnotation>
																																																		<attr name="name" lowerBound="1" type="//EString"/>
																																																		<ref name="component" type="Component"/>
																																																		<ref name="application" type="Application"/>
																																																		<attr name="quantifier" lowerBound="1" defaultValueLiteral="ANY" type="//QuantifierType"/>
																																																		<attr name="minQuantity" type="//EDouble"/>
																																																		<attr name="maxQuantity" type="//EDouble"/>
																																																		<attr name="isRelative" type="//EBoolean"/>
																																																	</class>
																																																	<EEnum name="QuantifierType">
																																																		<EEnumLiteral name="ANY"/>
																																																		<EEnumLiteral name="ALL" value="1"/>
																																																		<EEnumLiteral name="SOME" value="2"/>
																																																	</EEnum>
																																																	<class name="MetricModel">
																																																		<ref name="contexts" upperBound="-1" containment="true" type="ConditionContext"/>
																																																		<ref name="metrics" ordered="false" upperBound="-1" containment="true" type="Metric"/>
																																																		<ref name="metricInstances" ordered="false" upperBound="-1" containment="true" type="MetricInstance"/>
																																																		<ref name="conditions" ordered="false" upperBound="-1" containment="true" type="Condition"/>
																																																		<ref name="properties" ordered="false" upperBound="-1" containment="true" type="Property"/>
																																																		<ref name="bindings" ordered="false" upperBound="-1" containment="true" type="MetricObjectBinding"/>
																																																		<ref name="windows" ordered="false" upperBound="-1" containment="true" type="Window"/>
																																																		<ref name="schedules" ordered="false" upperBound="-1" containment="true" type="Schedule"/>
																																																		<ref name="parameters" ordered="false" upperBound="-1" containment="true" type="MetricFormulaParameter"/>
																																																		<ref name="sensors" ordered="false" upperBound="-1" containment="true" type="Sensor"/>
																																																		<ref name="units" ordered="false" upperBound="-1" containment="true" type="Unit"/>
																																																	</class>
																																																	<class name="MetricContext" abstract="true">
																																																		<ref name="metric" lowerBound="1" type="Metric"/>
																																																		<ref name="window" type="Window"/>
																																																		<ref name="schedule" type="Schedule"/>
																																																	</class>
																																																	<class name="CompositeMetricContext">
																																																		<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																			<EStringToStringMapEntry key="constraints" value="metrics_in_composing_contexts_in_metric_formula composite_metric_context_correct_metric_type"/>
																																																		</EAnnotation>
																																																		<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																			<EStringToStringMapEntry key="metrics_in_composing_contexts_in_metric_formula" value="Tuple {
																																																			message : String = 'In MetricContext: ' + self.name +
																																																			' one or more composingMetricContexts correspond to metrics which are either equal to this context metric: ' +
																																																			self.metric.name + ' or do not belong to the context metric'
																																																			's formula',
																																																			status : Boolean = self.metric.oclIsTypeOf(CompositeMetric) and self.composingMetricContexts
																																																			->forAll(p | p.metric <> self.metric and self.metric.oclAsType(CompositeMetric).formula.containsMetric(p.metric))
																																																				}.status"/>
																																																				<EStringToStringMapEntry key="composite_metric_context_correct_metric_type" value="Tuple {
																																																				message : String = 'In CompositeMetricContext: ' + self.name + ' the metric: '
																																																				+ self.metric.name + ' should be composite but it isn\'t',
																																																				status : Boolean = self.metric.oclIsTypeOf(CompositeMetric)
																																																				}.status"/>
																																																			</EAnnotation>
																																																			<ref name="composingMetricContexts" upperBound="-1" type="MetricContext"/>
																																																		</class>
																																																		<class name="RawMetricContext">
																																																			<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																				<EStringToStringMapEntry key="constraints" value="raw_metric_context_correct_metric_type"/>
																																																			</EAnnotation>
																																																			<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																				<EStringToStringMapEntry key="raw_metric_context_correct_metric_type" value="Tuple {
																																																				message : String = 'In RawMetricContext: ' + self.name + ' the metric: ' +
																																																				self.metric.name + ' should be raw but it isn\'t',
																																																				status : Boolean = self.metric.oclIsTypeOf(RawMetric)
																																																				}.status"/>
																																																			</EAnnotation>
																																																			<ref name="sensor" lowerBound="1" type="Sensor"/>
																																																		</class>
																																																		<class name="PropertyContext">
																																																			<ref name="property" lowerBound="1" type="Property"/>
																																																		</class>
																																																		<EEnum name="FunctionPatternType">
																																																			<EEnumLiteral name="MAP"/>
																																																			<EEnumLiteral name="REDUCE" value="1"/>
																																																		</EEnum>
																																																	</package>
																																																	<package name="organisation" nsURI="http://www.paasage.eu/2015/06/camel/organisation" nsPrefix="organisation">
																																																		<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																			<EStringToStringMapEntry key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
																																																			<EStringToStringMapEntry key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
																																																			<EStringToStringMapEntry key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
																																																		</EAnnotation>
																																																		<class name="OrganisationModel">
																																																			<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																				<EStringToStringMapEntry key="constraints" value="org_model_provider_or_organisation_supplied"/>
																																																			</EAnnotation>
																																																			<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																				<EStringToStringMapEntry key="org_model_provider_or_organisation_supplied" value="Tuple {
																																																				message : String = 'The OrganisationModel: ' + self.name +
																																																				' should map to one and only organisation or cloud provider',
																																																				status : Boolean = provider <> null or organisation <> null
																																																					}.status"/>
																																																				</EAnnotation>
																																																				<ref name="organisation" containment="true" type="Organisation"/>
																																																				<ref name="provider" containment="true" type="CloudProvider"/>
																																																				<ref name="externalIdentifiers" ordered="false" upperBound="-1" containment="true" type="ExternalIdentifier"/>
																																																				<ref name="users" ordered="false" upperBound="-1" containment="true" type="User"/>
																																																				<ref name="userGroups" ordered="false" upperBound="-1" containment="true" type="UserGroup"/>
																																																				<ref name="dataCentres" ordered="false" upperBound="-1" containment="true" type="DataCenter"/>
																																																				<ref name="roles" ordered="false" upperBound="-1" containment="true" type="Role"/>
																																																				<ref name="roleAssigments" ordered="false" upperBound="-1" containment="true" type="RoleAssignment"/>
																																																				<ref name="permissions" ordered="false" upperBound="-1" containment="true" type="Permission"/>
																																																				<attr name="securityLevel" lowerBound="1" type="//SecurityLevel"/>
																																																				<ref name="resourceFilters" upperBound="-1" containment="true" type="ResourceFilter"/>
																																																			</class>
																																																			<class name="Credentials" abstract="true"/>
																																																			<class name="CloudCredentials">
																																																				<attr name="name" lowerBound="1" type="//EString"/>
																																																				<ref name="cloudProvider" lowerBound="1" type="CloudProvider"/>
																																																				<attr name="securityGroup" type="//EString"/>
																																																				<attr name="publicSSHKey" type="//EString"/>
																																																				<attr name="privateSSHKey" type="//EString"/>
																																																				<attr name="username" type="//EString"/>
																																																				<attr name="password" type="//EString"/>
																																																			</class>
																																																			<class name="DataCenter">
																																																				<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																					<EStringToStringMapEntry key="constraints" value="unique_datacenter_per_provider no_datacenter_same_location_same_provider"/>
																																																				</EAnnotation>
																																																				<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																					<EStringToStringMapEntry key="unique_datacenter_per_provider" value="Tuple {
																																																					message : String = 'There exist data centers of cloud provider that have the same name or the same code name',
																																																					status : Boolean = DataCenter.allInstances()
																																																					->forAll(p1, p2 | p1 <> p2 and p1.oclContainer().oclAsType(OrganisationModel).provider = p2.oclContainer().oclAsType(OrganisationModel).provider implies p1.name <> p2.name and p1.codeName <>
																																																							p2.codeName)
																																																							}.status"/>
																																																							<EStringToStringMapEntry key="no_datacenter_same_location_same_provider" value="Tuple {
																																																							message : String = 'There exist data centers of cloud provider which are on the same fine-grained location',
																																																							status : Boolean = DataCenter.allInstances()
																																																							->forAll(p1, p2 | p1 <> p2 and p1.name <> p2.name and p1.oclContainer().oclAsType(OrganisationModel).provider = p2.oclContainer().oclAsType(OrganisationModel).provider implies p1.location <>
																																																									p2.location)
																																																									}.status"/>
																																																								</EAnnotation>
																																																								<attr name="name" lowerBound="1" type="//EString"/>
																																																								<attr name="codeName" lowerBound="1" type="//EString"/>
																																																								<ref name="location" lowerBound="1" type="Location"/>
																																																							</class>
																																																							<class name="Entity"/>
																																																							<class name="Organisation">
																																																								<attr name="name" lowerBound="1" type="//EString"/>
																																																								<attr name="www" type="//EString"/>
																																																								<attr name="postalAddress" type="//EString"/>
																																																								<attr name="email" lowerBound="1" type="//EString"/>
																																																							</class>
																																																							<class name="CloudProvider">
																																																								<attr name="public" type="//EBoolean"/>
																																																								<attr name="SaaS" type="//EBoolean"/>
																																																								<attr name="PaaS" type="//EBoolean"/>
																																																								<attr name="IaaS" type="//EBoolean"/>
																																																								<ref name="providerModel" type="ProviderModel"/>
																																																								<ref name="securityCapability" ordered="false" upperBound="-1" type="SecurityCapability"/>
																																																							</class>
																																																							<class name="User">
																																																								<attr name="name" lowerBound="1" type="//EString"/>
																																																								<attr name="email" lowerBound="1" type="//EString"/>
																																																								<attr name="firstName" lowerBound="1" type="//EString"/>
																																																								<attr name="lastName" lowerBound="1" type="//EString"/>
																																																								<attr name="www" type="//EString"/>
																																																								<ref name="externalIdentifiers" upperBound="-1" containment="true" type="ExternalIdentifier"/>
																																																								<ref name="requirementModels" upperBound="-1" type="RequirementModel"/>
																																																								<ref name="cloudCredentials" upperBound="-1" containment="true" type="CloudCredentials"/>
																																																								<ref name="deploymentModels" upperBound="-1" type="DeploymentModel"/>
																																																								<ref name="paasageCredentials" lowerBound="1" containment="true" type="PaaSageCredentials"/>
																																																							</class>
																																																							<class name="ExternalIdentifier">
																																																								<attr name="identifier" lowerBound="1" type="//EString"/>
																																																								<attr name="description" type="//EString"/>
																																																							</class>
																																																							<class name="Permission">
																																																								<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																									<EStringToStringMapEntry key="constraints" value="permission_valid_actions"/>
																																																								</EAnnotation>
																																																								<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																									<EStringToStringMapEntry key="permission_valid_actions" value="Tuple {
																																																									message : String = 'Wrong actions were identified for resource:' + self.resourceFilter.name +
																																																									' in the context of Permission: ' + self.name,
																																																									status : Boolean = self.action = camel::ActionType::READ or self.action =
																																																									camel::ActionType::WRITE
																																																									}.status"/>
																																																								</EAnnotation>
																																																								<EOperation name="checkStartEndDates" type="EBoolean">
																																																									<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																																										<EStringToStringMapEntry key="body" value="System.out.println("CHECKING Permission_Start_Before_End: " + this + " " + this.getStartTime() + " " + this.getEndTime()); java.util.Date date1 = this.getStartTime(); java.util.Date date2 = this.getEndTime(); if (date1 == null || date2 == null || (date1 != null && date2 != null && date1.before(date2))) return Boolean.TRUE; return Boolean.FALSE;"/>
																																																									</EAnnotation>
																																																									<EParameter name="this" lowerBound="1" type="Permission"/>
																																																								</EOperation>
																																																								<attr name="name" lowerBound="1" type="//EString"/>
																																																								<ref name="role" lowerBound="1" type="Role"/>
																																																								<attr name="startTime" lowerBound="1" type="//EDate"/>
																																																								<attr name="endTime" type="//EDate"/>
																																																								<ref name="resourceFilter" lowerBound="1" type="ResourceFilter"/>
																																																								<attr name="action" lowerBound="1" type="//ActionType"/>
																																																							</class>
																																																							<EEnum name="SecurityLevel">
																																																								<EEnumLiteral name="LOW"/>
																																																								<EEnumLiteral name="MEDIUM" value="1"/>
																																																								<EEnumLiteral name="HIGH" value="2"/>
																																																							</EEnum>
																																																							<EEnum name="ResourcePattern">
																																																								<EEnumLiteral name="EXACT"/>
																																																								<EEnumLiteral name="TREE" value="1"/>
																																																							</EEnum>
																																																							<class name="ResourceFilter" abstract="true">
																																																								<attr name="name" lowerBound="1" type="//EString"/>
																																																								<attr name="resourcePattern" lowerBound="1" type="//ResourcePattern"/>
																																																							</class>
																																																							<class name="InformationResourceFilter">
																																																								<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																									<EStringToStringMapEntry key="constraints" value="information_resource_filter_validity"/>
																																																								</EAnnotation>
																																																								<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																									<EStringToStringMapEntry key="information_resource_filter_validity" value="Tuple {
																																																									message : String = 'InformationResourceFilter: ' + self.name +
																																																									' is not valid as both its own attributes were set',
																																																									status : Boolean = everyInformationResource = true implies
																																																									informationResourcePath = null
																																																									}.status"/>
																																																								</EAnnotation>
																																																								<attr name="informationResourcePath" type="//EString"/>
																																																								<attr name="everyInformationResource" lowerBound="1" type="//EBoolean"/>
																																																							</class>
																																																							<class name="ServiceResourceFilter">
																																																								<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																									<EStringToStringMapEntry key="constraints" value="service_resource_filter_validity"/>
																																																								</EAnnotation>
																																																								<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																									<EStringToStringMapEntry key="service_resource_filter_validity" value="Tuple {
																																																									message : String = 'ServiceResourceFilter: ' + self.name +
																																																									' is not valid as both its own attributes were set',
																																																									status : Boolean = everyService = true implies serviceURL = null
																																																									}.status"/>
																																																								</EAnnotation>
																																																								<attr name="serviceURL" type="//EString"/>
																																																								<attr name="everyService" lowerBound="1" type="//EBoolean"/>
																																																							</class>
																																																							<class name="Role">
																																																								<attr name="name" lowerBound="1" type="//EString"/>
																																																							</class>
																																																							<class name="RoleAssignment">
																																																								<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																									<EStringToStringMapEntry key="constraints" value="role_assignment_at_least_user_or_group same_role_concurrent_assignments"/>
																																																								</EAnnotation>
																																																								<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																									<EStringToStringMapEntry key="role_assignment_at_least_user_or_group" value="Tuple {
																																																									message : String = 'There is no user or user group associated to RoleAssigment:' +
																																																									self.name,
																																																									status : Boolean = self.user <> null or self.userGroup <> null
																																																										}.status"/>
																																																										<EStringToStringMapEntry key="same_role_concurrent_assignments" value="Tuple {
																																																										message : String = 'There are two or more role assignments which are odentical, i.e., refer to the same organisation, user/user group and role',
																																																										status : Boolean = RoleAssignment.allInstances()
																																																										->forAll(p1, p2 | p1 <> p2 and ((p1.user <> null and p2.user <> null and p1.user = p2.user) or (p1.userGroup <>
																																																													null and p2.userGroup <> null and p1.userGroup = p2.userGroup)) implies p1.role <> p2.role)
																																																														}.status"/>
																																																													</EAnnotation>
																																																													<EOperation name="checkAssignedOnDates" type="EBoolean">
																																																														<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																																															<EStringToStringMapEntry key="body" value="System.out.println("CHECKING Assignment_Assigned_Before_Start: " + this + " " + this.getStartTime() + " " + this.getEndTime() + " " + this.getAssignmentTime()); java.util.Date date1 = this.getStartTime(); java.util.Date date2 = this.getEndTime(); java.util.Date date = this.getAssignmentTime(); if (date == null) return Boolean.TRUE; else if (date1 != null){ if (date.equals(date1) || date.before(date1)) return Boolean.TRUE; else return Boolean.FALSE;} else if (date2 != null && date.before(date2)) return Boolean.TRUE; return Boolean.FALSE;"/>
																																																														</EAnnotation>
																																																														<EParameter name="this" lowerBound="1" type="RoleAssignment"/>
																																																													</EOperation>
																																																													<EOperation name="checkStartEndDates" type="EBoolean">
																																																														<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																																															<EStringToStringMapEntry key="body" value="System.out.println("CHECKING Assignment_Start_Before_End: " + this + " " + this.getStartTime() + " " + this.getEndTime() + " " + this.getAssignmentTime()); java.util.Date date1 = this.getStartTime(); java.util.Date date2 = this.getEndTime(); if (date1 == null || date2 == null || (date1 != null && date2 != null && date1.before(date2))) return Boolean.TRUE; return Boolean.FALSE;"/>
																																																														</EAnnotation>
																																																														<EParameter name="this" lowerBound="1" type="RoleAssignment"/>
																																																													</EOperation>
																																																													<attr name="name" lowerBound="1" type="//EString"/>
																																																													<ref name="user" type="User"/>
																																																													<ref name="role" lowerBound="1" type="Role"/>
																																																													<ref name="userGroup" type="UserGroup"/>
																																																													<attr name="startTime" type="//EDate"/>
																																																													<attr name="endTime" type="//EDate"/>
																																																													<attr name="assignmentTime" lowerBound="1" type="//EDate"/>
																																																												</class>
																																																												<class name="UserGroup">
																																																													<attr name="name" lowerBound="1" type="//EString"/>
																																																													<ref name="users" lowerBound="1" upperBound="-1" type="User"/>
																																																												</class>
																																																												<class name="PaaSageCredentials">
																																																													<attr name="password" lowerBound="1" type="//EString"/>
																																																												</class>
																																																											</package>
																																																											<package name="provider" nsURI="http://www.paasage.eu/2015/06/camel/provider" nsPrefix="provider">
																																																												<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																													<EStringToStringMapEntry key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
																																																													<EStringToStringMapEntry key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
																																																													<EStringToStringMapEntry key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
																																																												</EAnnotation>
																																																												<class name="ProviderModel">
																																																													<ref name="constraints" upperBound="-1" containment="true" type="Constraint"/>
																																																													<ref name="rootFeature" lowerBound="1" containment="true" type="Feature"/>
																																																												</class>
																																																												<class name="Attribute">
																																																													<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																														<EStringToStringMapEntry key="constraints" value="attribute_must_have_at_least_value_or_value_type attribute_value_in_value_type"/>
																																																													</EAnnotation>
																																																													<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																														<EStringToStringMapEntry key="attribute_must_have_at_least_value_or_value_type" value="Tuple {
																																																														message : String = 'Attribute: ' + self.name +
																																																														' does not have a value or value type',
																																																														status : Boolean = value <> null or valueType <> null
																																																															}.status"/>
																																																															<EStringToStringMapEntry key="attribute_value_in_value_type" value="Tuple {
																																																															message : String = 'Value  is not contained in ValueType in Attribute: ' + self.name,
																																																															status : Boolean = (value
																																																															<> null and valueType <> null) implies self.checkValue(value, false)
																																																																}.status"/>
																																																															</EAnnotation>
																																																															<EOperation name="checkValue" type="EBoolean">
																																																																<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																	<EStringToStringMapEntry key="body" value="if (self.valueType <> null)
																																																																		then if (self.valueType.oclIsTypeOf(camel::type::Range))
																																																																		then if (v.oclIsTypeOf(camel::type::BoolValue) or v.oclIsTypeOf(camel::type::StringsValue))
																																																																		then false
																																																																		else if (v.oclIsTypeOf(camel::type::IntegerValue))
																																																																		then
																																																																		self.valueType.oclAsType(camel::type::Range).includesValue(v.oclAsType(camel::type::IntegerValue).value.oclAsType(ecore::EDouble))
																																																																		else if (v.oclIsTypeOf(camel::type::FloatsValue))
																																																																		then
																																																																		self.valueType.oclAsType(camel::type::Range).includesValue(v.oclAsType(camel::type::FloatsValue).value.oclAsType(ecore::EDouble))
																																																																		else
																																																																		self.valueType.oclAsType(camel::type::Range).includesValue(v.oclAsType(camel::type::DoublePrecisionValue).value)
																																																																		endif
																																																																		endif
																																																																		endif
																																																																		else if (self.valueType.oclIsTypeOf(camel::type::RangeUnion))
																																																																		then if (v.oclIsTypeOf(camel::type::BoolValue) or v.oclIsTypeOf(camel::type::StringsValue))
																																																																		then false
																																																																		else if (v.oclIsTypeOf(camel::type::IntegerValue))
																																																																		then
																																																																		self.valueType.oclAsType(camel::type::RangeUnion).includesValue(v.oclAsType(camel::type::IntegerValue).value.oclAsType(ecore::EDouble))
																																																																		else if (v.oclIsTypeOf(camel::type::FloatsValue))
																																																																		then
																																																																		self.valueType.oclAsType(camel::type::RangeUnion).includesValue(v.oclAsType(camel::type::FloatsValue).value.oclAsType(ecore::EDouble))
																																																																		else
																																																																		self.valueType.oclAsType(camel::type::RangeUnion).includesValue(v.oclAsType(camel::type::DoublePrecisionValue).value)
																																																																		endif
																																																																		endif
																																																																		endif
																																																																		else if (self.valueType.oclIsTypeOf(camel::type::List))
																																																																		then (self.valueType.oclAsType(camel::type::List).checkValueType(v) and
																																																																		self.valueType.oclAsType(camel::type::List).includesValue(v))
																																																																		else if (self.valueType.oclIsTypeOf(camel::type::Enumeration) and v.oclIsTypeOf(camel::type::StringsValue))
																																																																		then
																																																																		self.valueType.oclAsType(camel::type::Enumeration).includesName(v.oclAsType(camel::type::StringsValue).value)
																																																																		else if (self.valueType.oclIsTypeOf(camel::type::Enumeration) and v.oclIsTypeOf(camel::type::EnumerateValue))
																																																																		then
																																																																		(self.valueType.oclAsType(camel::type::Enumeration).includesName(v.oclAsType(camel::type::EnumerateValue).name)
																																																																		and
																																																																		self.valueType.oclAsType(camel::type::Enumeration).includesValue(v.oclAsType(camel::type::EnumerateValue).value))
																																																																		else if (self.valueType.oclIsTypeOf(camel::type::StringValueType))
																																																																		then v.oclIsTypeOf(camel::type::StringsValue)
																																																																		else if (self.valueType.oclIsTypeOf(camel::type::BooleanValueType))
																																																																		then v.oclIsTypeOf(camel::type::BoolValue)
																																																																		else false
																																																																		endif
																																																																		endif
																																																																		endif
																																																																		endif
																																																																		endif
																																																																		endif
																																																																		endif
																																																																		else if (diff and self.value <> null)
																																																																		then self.value.valueEquals(v)
																																																																		else false
																																																																		endif
																																																																		endif"/>
																																																																	</EAnnotation>
																																																																	<EParameter name="v" lowerBound="1" type="SingleValue"/>
																																																																	<EParameter name="diff" lowerBound="1" type="EBoolean"/>
																																																																</EOperation>
																																																																<attr name="name" lowerBound="1" type="//EString"/>
																																																																<ref name="value" containment="true" type="SingleValue"/>
																																																																<ref name="valueType" type="ValueType"/>
																																																																<attr name="unitType" type="//UnitType">
																																																																	<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																																																																		<EStringToStringMapEntry key="body" value="OptimizationRequirement"/>
																																																																		<EStringToStringMapEntry key="unique" value="false"/>
																																																																		<EStringToStringMapEntry key="upper" value="*"/>
																																																																	</EAnnotation>
																																																																</attr>
																																																															</class>
																																																															<class name="AttributeConstraint">
																																																																<EAnnotation source="Ecore">
																																																																	<EStringToStringMapEntry key="attributeConstraintValidation" value="atLeastOneDefinied"/>
																																																																</EAnnotation>
																																																																<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																																	<EStringToStringMapEntry key="constraints" value="attribute_constraint_correct_values different_attrs_in_attribute_constraint"/>
																																																																</EAnnotation>
																																																																<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																	<EStringToStringMapEntry key="attribute_constraint_correct_values" value="Tuple {
																																																																	message : String = 'In AttributeConstraint: ' + self.toString() +
																																																																	' either the fromValue: ' + fromValue.toString() + ' or the toValue: ' + toValue.toString() +
																																																																	' are not contained in the value types of the respective attributes: ' + from.name + ' ' + to.name +
																																																																	', respectively',
																																																																	status : Boolean = from.checkValue(fromValue, true) and to.checkValue(toValue, true)
																																																																	}.status"/>
																																																																	<EStringToStringMapEntry key="different_attrs_in_attribute_constraint" value="Tuple {
																																																																	message : String = 'In AttributeConstraint: ' + self.toString() +
																																																																	' the same attribute: ' + from.name + ' is used in the from and to associations',
																																																																	status : Boolean = from <> to
																																																																		}.status"/>
																																																																	</EAnnotation>
																																																																	<attr name="name" type="//EString"/>
																																																																	<ref name="from" lowerBound="1" type="Attribute"/>
																																																																	<ref name="to" lowerBound="1" type="Attribute"/>
																																																																	<ref name="fromValue" lowerBound="1" containment="true" type="SingleValue"/>
																																																																	<ref name="toValue" lowerBound="1" containment="true" type="SingleValue"/>
																																																																</class>
																																																																<class name="Cardinality" abstract="true">
																																																																	<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																																		<EStringToStringMapEntry key="constraints" value="cardinality_min_less_equal_than_max"/>
																																																																	</EAnnotation>
																																																																	<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																		<EStringToStringMapEntry key="cardinality_min_less_equal_than_max" value="Tuple {
																																																																		message : String = 'In Cardinality' + self.toString() +
																																																																		' either negative values are given for cardinalityMin or cardinalityMax or cardinalityMin is greater than cardinalityMax',
																																																																		status : Boolean = cardinalityMin
																																																																		>= 0 and (cardinalityMax >= 0 implies cardinalityMin <= cardinalityMax)
																																																																			}.status"/>
																																																																		</EAnnotation>
																																																																		<attr name="cardinalityMin" lowerBound="1" type="//EInt"/>
																																																																		<attr name="cardinalityMax" lowerBound="1" type="//EInt"/>
																																																																	</class>
																																																																	<class name="FeatCardinality">
																																																																		<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																																			<EStringToStringMapEntry key="constraints" value="correct_feat_cardinality"/>
																																																																		</EAnnotation>
																																																																		<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																			<EStringToStringMapEntry key="correct_feat_cardinality" value="Tuple {
																																																																			message : String = 'In FeatCardinality: ' + self.toString() +
																																																																			' either the value given is negative or the value is less than cardinalityMin or value is greater than cardinalityMax',
																																																																			status : Boolean = (value
																																																																			> 0 implies (cardinalityMin <= value) and (cardinalityMax <> - 1 implies value <= cardinalityMax))
																																																																					}.status"/>
																																																																				</EAnnotation>
																																																																				<attr name="value" lowerBound="1" type="//EInt"/>
																																																																			</class>
																																																																			<class name="GroupCardinality"/>
																																																																			<class name="Clone">
																																																																				<attr name="name" lowerBound="1" type="//EString">
																																																																					<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																																																																						<EStringToStringMapEntry key="body" value="ServiceLevelObjective"/>
																																																																						<EStringToStringMapEntry key="unique" value="false"/>
																																																																						<EStringToStringMapEntry key="upper" value="*"/>
																																																																					</EAnnotation>
																																																																					<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																																																																						<EStringToStringMapEntry key="body" value="ServiceLevelObjective"/>
																																																																						<EStringToStringMapEntry key="unique" value="false"/>
																																																																						<EStringToStringMapEntry key="upper" value="*"/>
																																																																					</EAnnotation>
																																																																					<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																																																																						<EStringToStringMapEntry key="body" value="MetricCondition"/>
																																																																						<EStringToStringMapEntry key="unique" value="false"/>
																																																																						<EStringToStringMapEntry key="upper" value="*"/>
																																																																					</EAnnotation>
																																																																				</attr>
																																																																				<ref name="subClones" upperBound="-1" type="Clone"/>
																																																																			</class>
																																																																			<class name="Constraint" abstract="true">
																																																																				<EAnnotation source="Ecore">
																																																																					<EStringToStringMapEntry key="fromAttributeConstraintsvalidation" value="fromAttributesBelongsToFromFeature"/>
																																																																					<EStringToStringMapEntry key="toAttributeConstraintsvalidation" value="toAttributesBelongsToToFeature"/>
																																																																				</EAnnotation>
																																																																				<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																																					<EStringToStringMapEntry key="constraints" value="constraint_from_attributes_belong_to_from_feature_and_symmetric"/>
																																																																				</EAnnotation>
																																																																				<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																					<EStringToStringMapEntry key="constraint_from_attributes_belong_to_from_feature_and_symmetric" value="Tuple {
																																																																					message : String = 'Constraint: ' + name +
																																																																					' has attribute constraints which map to from or to attributes that do not belong to the respective from: ' +
																																																																					from.name + ' or to: ' + to.name + ' feature of this constraint',
																																																																					status : Boolean = attributeConstraints
																																																																					->forAll(p | (from.attributes
																																																																						->includes(p.from) and to.attributes
																																																																						->includes(p.to)))
																																																																						}.status"/>
																																																																					</EAnnotation>
																																																																					<attr name="name" lowerBound="1" type="//EString">
																																																																						<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																																																																							<EStringToStringMapEntry key="body" value="PropertyCondition"/>
																																																																							<EStringToStringMapEntry key="unique" value="false"/>
																																																																							<EStringToStringMapEntry key="upper" value="*"/>
																																																																						</EAnnotation>
																																																																					</attr>
																																																																					<ref name="from" lowerBound="1" type="Feature"/>
																																																																					<ref name="to" lowerBound="1" type="Feature"/>
																																																																					<ref name="attributeConstraints" upperBound="-1" containment="true" type="AttributeConstraint"/>
																																																																				</class>
																																																																				<class name="Excludes"/>
																																																																				<class name="Implies"/>
																																																																				<class name="Requires">
																																																																					<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																																						<EStringToStringMapEntry key="constraints" value="requires_cardFrom_to_conformance"/>
																																																																					</EAnnotation>
																																																																					<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																						<EStringToStringMapEntry key="requires_cardFrom_to_conformance" value="Tuple {
																																																																						message : String = 'In Requires Constraint: ' + self.name +
																																																																						' there are from or to cardinalities that do not conform to the designated cardinality restrictions of the respective from: '
																																																																						+ from.name + ' or to: ' + to.name + ' features of this constraint',
																																																																						status : Boolean = (cardFrom <> null implies
																																																																							(cardFrom.cardinalityMin >= from.featureCardinality.cardinalityMin and ((from.featureCardinality.cardinalityMax =
																																																																							- 1) or (cardFrom.cardinalityMax <> - 1 and cardFrom.cardinalityMax <= from.featureCardinality.cardinalityMax))))
																																																																							and (cardTo <> null implies (cardTo.cardinalityMin >= to.featureCardinality.cardinalityMin and
																																																																								((to.featureCardinality.cardinalityMax = - 1) or (cardTo.cardinalityMax <> - 1 and cardTo.cardinalityMax <=
																																																																								to.featureCardinality.cardinalityMax))))
																																																																								}.status"/>
																																																																							</EAnnotation>
																																																																							<ref name="scopeFrom" containment="true" type="Scope"/>
																																																																							<ref name="scopeTo" containment="true" type="Scope"/>
																																																																							<ref name="cardFrom" containment="true" type="FeatCardinality"/>
																																																																							<ref name="cardTo" containment="true" type="FeatCardinality"/>
																																																																						</class>
																																																																						<class name="Functional">
																																																																							<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																																								<EStringToStringMapEntry key="constraints" value="correct_values_for_functional"/>
																																																																							</EAnnotation>
																																																																							<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																								<EStringToStringMapEntry key="correct_values_for_functional" value="Tuple {
																																																																								message : String = 'In Functional Constraint: ' + self.name +
																																																																								', either the value of order is negative or that of the value attributes is not positive',
																																																																								status : Boolean = order >= 0 and value >
																																																																									0
																																																																									}.status"/>
																																																																								</EAnnotation>
																																																																								<attr name="type" type="//Operator">
																																																																									<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																																																																										<EStringToStringMapEntry key="body" value="ProviderRequirement"/>
																																																																										<EStringToStringMapEntry key="unique" value="false"/>
																																																																										<EStringToStringMapEntry key="upper" value="*"/>
																																																																									</EAnnotation>
																																																																									<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																																																																										<EStringToStringMapEntry key="body" value="ProviderRequirement"/>
																																																																										<EStringToStringMapEntry key="unique" value="false"/>
																																																																										<EStringToStringMapEntry key="upper" value="*"/>
																																																																									</EAnnotation>
																																																																									<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																																																																										<EStringToStringMapEntry key="body" value="BinaryEventPattern"/>
																																																																										<EStringToStringMapEntry key="unique" value="false"/>
																																																																										<EStringToStringMapEntry key="upper" value="*"/>
																																																																									</EAnnotation>
																																																																								</attr>
																																																																								<attr name="order" type="//EInt">
																																																																									<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																																																																										<EStringToStringMapEntry key="body" value="BinaryEventPattern"/>
																																																																										<EStringToStringMapEntry key="unique" value="false"/>
																																																																										<EStringToStringMapEntry key="upper" value="*"/>
																																																																									</EAnnotation>
																																																																								</attr>
																																																																								<attr name="value" lowerBound="1" type="//EInt"/>
																																																																							</class>
																																																																							<class name="Feature">
																																																																								<attr name="name" lowerBound="1" type="//EString"/>
																																																																								<ref name="attributes" upperBound="-1" containment="true" type="Attribute"/>
																																																																								<ref name="subFeatures" upperBound="-1" containment="true" type="Feature"/>
																																																																								<ref name="featureCardinality" lowerBound="1" containment="true" type="FeatCardinality"/>
																																																																								<ref name="clones" upperBound="-1" containment="true" type="Clone"/>
																																																																							</class>
																																																																							<class name="Alternative">
																																																																								<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																																									<EStringToStringMapEntry key="constraints" value="alternative_variants_diff_from_sub_features"/>
																																																																								</EAnnotation>
																																																																								<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																									<EStringToStringMapEntry key="alternative_variants_diff_from_sub_features" value="Tuple {
																																																																									message : String = 'There is a pair of subFeature and variant with the same name for Feature: '
																																																																									+ self.name,
																																																																									status : Boolean = subFeatures
																																																																									->forAll(p | not (variants
																																																																										->exists(q | q.name = p.name)))
																																																																										}.status"/>
																																																																									</EAnnotation>
																																																																									<ref name="groupCardinality" containment="true" type="GroupCardinality"/>
																																																																									<ref name="variants" lowerBound="1" upperBound="-1" containment="true" type="Feature"/>
																																																																								</class>
																																																																								<class name="Exclusive"/>
																																																																								<EEnum name="Operator">
																																																																									<EEnumLiteral name="select"/>
																																																																									<EEnumLiteral name="add" value="1"/>
																																																																									<EEnumLiteral name="remove" value="2"/>
																																																																									<EEnumLiteral name="multiply" value="3"/>
																																																																									<EEnumLiteral name="divide" value="4"/>
																																																																								</EEnum>
																																																																								<class name="Scope" abstract="true"/>
																																																																								<class name="Instance">
																																																																									<ref name="feature" lowerBound="1" type="Feature"/>
																																																																								</class>
																																																																								<class name="Product"/>
																																																																							</package>
																																																																							<package name="requirement" nsURI="http://www.paasage.eu/2015/06/camel/requirement" nsPrefix="requirement">
																																																																								<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																																									<EStringToStringMapEntry key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
																																																																									<EStringToStringMapEntry key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
																																																																									<EStringToStringMapEntry key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
																																																																								</EAnnotation>
																																																																								<class name="RequirementModel">
																																																																									<ref name="requirements" upperBound="-1" containment="true" type="Requirement"/>
																																																																								</class>
																																																																								<class name="Requirement" abstract="true">
																																																																									<attr name="name" lowerBound="1" type="//EString">
																																																																										<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																																																																											<EStringToStringMapEntry key="body" value="SecurityCapability"/>
																																																																											<EStringToStringMapEntry key="unique" value="false"/>
																																																																											<EStringToStringMapEntry key="upper" value="*"/>
																																																																										</EAnnotation>
																																																																									</attr>
																																																																								</class>
																																																																								<class name="RequirementGroup">
																																																																									<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																																										<EStringToStringMapEntry key="constraints" value="applications_in_sub_groups_in_group requirement_group_no_conflict_reqs requirements_in_group_refer_to_group_applications"/>
																																																																									</EAnnotation>
																																																																									<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																										<EStringToStringMapEntry key="applications_in_sub_groups_in_group" value="Tuple {
																																																																										message : String = 'RequirementGroup: ' + self.name +
																																																																										' has one or more sub-groups that map to applications which are not included in the group\'s list of applications',
																																																																										status : Boolean = self.requirements
																																																																										->forAll(p | p.oclIsTypeOf(RequirementGroup) implies p.oclAsType(RequirementGroup).application
																																																																											->forAll(a | self.application
																																																																											->includes(a)))
																																																																											}.status"/>
																																																																											<EStringToStringMapEntry key="requirement_group_no_conflict_reqs" value="Tuple {
																																																																											message : String = 'RequirementGroup: ' + self.name +
																																																																											' has two or more scale requirements of the same type that are conflicting, i.e., refer to the same VM (in case of vertical requirements) or component (in case of horizontal requirements)',
																																																																											status : Boolean = if
																																																																											(self.requirementOperator = RequirementOperatorType::AND)
																																																																											then self.requirements
																																																																											->forAll(p1, p2 | (p1 <> p2 and p1.oclIsKindOf(camel::requirement::ScaleRequirement) and
																																																																												p2.oclIsKindOf(camel::requirement::ScaleRequirement) and p1.oclType() = p2.oclType()) implies if
																																																																												(p1.oclIsTypeOf(camel::requirement::VerticalScaleRequirement))
																																																																												then p1.oclAsType(camel::requirement::VerticalScaleRequirement).vm <>
																																																																													p2.oclAsType(camel::requirement::VerticalScaleRequirement).vm
																																																																													else p1.oclAsType(camel::requirement::HorizontalScaleRequirement).component <>
																																																																													p2.oclAsType(camel::requirement::HorizontalScaleRequirement).component
																																																																													endif)
																																																																													else true
																																																																													endif
																																																																													}.status"/>
																																																																													<EStringToStringMapEntry key="requirements_in_group_refer_to_group_applications" value="Tuple {
																																																																													message : String = 'RequirementGroup: ' + self.name +
																																																																													' has one or more requirements that map to an application which is not included in the group\'s list of applications',
																																																																													status : Boolean = if
																																																																													(application
																																																																													->notEmpty())
																																																																														then requirements
																																																																														->forAll(p | if (p.oclIsTypeOf(camel::requirement::ServiceLevelObjective))
																																																																														then if
																																																																														(p.oclAsType(camel::requirement::ServiceLevelObjective).customServiceLevel.oclIsTypeOf(camel::metric::MetricCondition))
																																																																														then application
																																																																														->includes(p.oclAsType(camel::requirement::ServiceLevelObjective).customServiceLevel.oclAsType(camel::metric::MetricCondition).metricContext.application)
																																																																														else if
																																																																														(p.oclAsType(camel::requirement::ServiceLevelObjective).customServiceLevel.oclIsTypeOf(camel::metric::MetricCondition))
																																																																														then if
																																																																														(p.oclAsType(camel::requirement::ServiceLevelObjective).customServiceLevel.oclAsType(camel::metric::MetricCondition).metricContext.application
																																																																														<> null)
																																																																														then application
																																																																														->includes(p.oclAsType(camel::requirement::ServiceLevelObjective).customServiceLevel.oclAsType(camel::metric::MetricCondition).metricContext.application)
																																																																															else if
																																																																															(p.oclAsType(camel::requirement::ServiceLevelObjective).customServiceLevel.oclAsType(camel::metric::MetricCondition).metricContext.component
																																																																															<> null)
																																																																															then if
																																																																															(p.oclAsType(camel::requirement::ServiceLevelObjective).customServiceLevel.oclAsType(camel::metric::MetricCondition).metricContext.component.oclIsTypeOf(camel::deployment::InternalComponent))
																																																																															then application
																																																																															->exists(q | q.deploymentModels
																																																																																->exists(r | (r.internalComponents
																																																																																->includes(p.oclAsType(camel::requirement::ServiceLevelObjective).customServiceLevel.oclAsType(camel::metric::MetricCondition).metricContext.component.oclAsType(camel::deployment::InternalComponent)))))
																																																																																else application
																																																																																->exists(q | q.deploymentModels
																																																																																->exists(r | (r.vms
																																																																																->includes(p.oclAsType(camel::requirement::ServiceLevelObjective).customServiceLevel.oclAsType(camel::metric::MetricCondition).metricContext.component.oclAsType(camel::deployment::VM)))))
																																																																																endif
																																																																																else false
																																																																																endif
																																																																																endif
																																																																																else if
																																																																																(p.oclAsType(camel::requirement::ServiceLevelObjective).customServiceLevel.oclIsTypeOf(camel::metric::PropertyCondition))
																																																																																then if
																																																																																(p.oclAsType(camel::requirement::ServiceLevelObjective).customServiceLevel.oclAsType(camel::metric::PropertyCondition).propertyContext.application
																																																																																<> null)
																																																																																then application
																																																																																->includes(p.oclAsType(camel::requirement::ServiceLevelObjective).customServiceLevel.oclAsType(camel::metric::PropertyCondition).propertyContext.application)
																																																																																	else if
																																																																																	(p.oclAsType(camel::requirement::ServiceLevelObjective).customServiceLevel.oclAsType(camel::metric::PropertyCondition).propertyContext.component
																																																																																	<> null)
																																																																																	then if
																																																																																	(p.oclAsType(camel::requirement::ServiceLevelObjective).customServiceLevel.oclAsType(camel::metric::PropertyCondition).propertyContext.component.oclIsTypeOf(camel::deployment::InternalComponent))
																																																																																	then application
																																																																																	->exists(q | q.deploymentModels
																																																																																		->exists(r | (r.internalComponents
																																																																																		->includes(p.oclAsType(camel::requirement::ServiceLevelObjective).customServiceLevel.oclAsType(camel::metric::PropertyCondition).propertyContext.component.oclAsType(camel::deployment::InternalComponent)))))
																																																																																		else application
																																																																																		->exists(q | q.deploymentModels
																																																																																		->exists(r | (r.vms
																																																																																		->includes(p.oclAsType(camel::requirement::ServiceLevelObjective).customServiceLevel.oclAsType(camel::metric::PropertyCondition).propertyContext.component.oclAsType(camel::deployment::VM)))))
																																																																																		endif
																																																																																		else false
																																																																																		endif
																																																																																		endif
																																																																																		else false
																																																																																		endif
																																																																																		endif
																																																																																		endif
																																																																																		else if (p.oclIsTypeOf(camel::requirement::OptimisationRequirement))
																																																																																		then if (p.oclAsType(camel::requirement::OptimisationRequirement).metric <> null or
																																																																																		p.oclAsType(camel::requirement::OptimisationRequirement).property <> null)
																																																																																			then if (p.oclAsType(camel::requirement::OptimisationRequirement).application <> null)
																																																																																			then application
																																																																																			->includes(p.oclAsType(camel::requirement::OptimisationRequirement).application)
																																																																																				else if (p.oclAsType(camel::requirement::OptimisationRequirement).component <> null)
																																																																																				then if
																																																																																				(p.oclAsType(camel::requirement::OptimisationRequirement).component.oclIsTypeOf(camel::deployment::InternalComponent))
																																																																																				then application
																																																																																				->exists(q | q.deploymentModels
																																																																																					->exists(r | (r.internalComponents
																																																																																					->includes(p.oclAsType(camel::requirement::OptimisationRequirement).component.oclAsType(camel::deployment::InternalComponent)))))
																																																																																					else application
																																																																																					->exists(q | q.deploymentModels
																																																																																					->exists(r | (r.vms
																																																																																					->includes(p.oclAsType(camel::requirement::OptimisationRequirement).component.oclAsType(camel::deployment::VM)))))
																																																																																					endif
																																																																																					else false
																																																																																					endif
																																																																																					endif
																																																																																					else false
																																																																																					endif
																																																																																					else if (p.oclIsTypeOf(camel::requirement::SecurityRequirement))
																																																																																					then if (p.oclAsType(camel::requirement::SecurityRequirement).application <> null)
																																																																																					then application
																																																																																					->includes(p.oclAsType(camel::requirement::SecurityRequirement).application)
																																																																																						else false
																																																																																						endif
																																																																																						else true
																																																																																						endif
																																																																																						endif
																																																																																						endif)
																																																																																						else true
																																																																																						endif
																																																																																						}.status"/>
																																																																																					</EAnnotation>
																																																																																					<EOperation name="checkRecursiveness" type="EBoolean">
																																																																																						<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																																																																							<EStringToStringMapEntry key="body" value="System.out.println("Checking recursiveness for RequirementGroup: " + rg1);
																																																																																							for (Requirement r2: rg1.getRequirements()){
																																																																																							EList<RequirementGroup> context2 = null;
																																																																																								if (context == null) context2 = new org.eclipse.emf.common.util.BasicEList<RequirementGroup>();
																																																																																									else context2 = new org.eclipse.emf.common.util.BasicEList<RequirementGroup>(context);
																																																																																										if (!resources){
																																																																																										if (r2 instanceof RequirementGroup){
																																																																																										RequirementGroup rg2 = (RequirementGroup)r2;
																																																																																										if (context == null || !context.contains(rg2)){
																																																																																										context2.add(rg2);
																																																																																										if (rg2.getName().equals(r.getName())) return Boolean.TRUE;
																																																																																										if (checkRecursiveness(rg2,r,resources,context2)) return Boolean.TRUE;
																																																																																										}
																																																																																										}
																																																																																										}
																																																																																										else{
																																																																																										if (r.getName().equals(r2.getName())) return true;
																																																																																										if (r2 instanceof RequirementGroup){
																																																																																										RequirementGroup rg2 = (RequirementGroup)r2;
																																																																																										if (context == null || !context.contains(rg2)){
																																																																																										context2.add(rg2);
																																																																																										if (checkRecursiveness(rg2,r,resources,context2)) return Boolean.TRUE;
																																																																																										}
																																																																																										}
																																																																																										}
																																																																																										}
																																																																																										return Boolean.FALSE;"/>
																																																																																									</EAnnotation>
																																																																																									<EParameter name="rg1" type="RequirementGroup"/>
																																																																																									<EParameter name="r" type="HardRequirement"/>
																																																																																									<EParameter name="resources" type="EBoolean"/>
																																																																																									<EParameter name="context" upperBound="-1" type="RequirementGroup"/>
																																																																																								</EOperation>
																																																																																								<ref name="requirements" lowerBound="1" upperBound="-1" type="Requirement"/>
																																																																																								<ref name="application" upperBound="-1" type="Application"/>
																																																																																								<attr name="requirementOperator" lowerBound="1" type="//RequirementOperatorType">
																																																																																									<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																																																																																										<EStringToStringMapEntry key="body" value="Requires"/>
																																																																																									</EAnnotation>
																																																																																								</attr>
																																																																																							</class>
																																																																																							<EEnum name="RequirementOperatorType">
																																																																																								<EEnumLiteral name="AND"/>
																																																																																								<EEnumLiteral name="OR" value="1"/>
																																																																																								<EEnumLiteral name="XOR" value="2"/>
																																																																																							</EEnum>
																																																																																							<class name="HardRequirement" abstract="true"/>
																																																																																							<class name="SoftRequirement" abstract="true">
																																																																																								<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																																																									<EStringToStringMapEntry key="constraints" value="non_negative_priorities_for_soft_requirement"/>
																																																																																								</EAnnotation>
																																																																																								<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																																									<EStringToStringMapEntry key="non_negative_priorities_for_soft_requirement" value="Tuple {
																																																																																									message : String = 'Requirement: ' + self.name + ' has a negative priority: ' +
																																																																																									self.priority.toString(),
																																																																																									status : Boolean = self.priority >= 0.0
																																																																																										}.status"/>
																																																																																									</EAnnotation>
																																																																																									<attr name="priority" type="//EDouble">
																																																																																										<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																																																																																											<EStringToStringMapEntry key="body" value="BinaryEventPattern"/>
																																																																																											<EStringToStringMapEntry key="unique" value="false"/>
																																																																																											<EStringToStringMapEntry key="upper" value="*"/>
																																																																																										</EAnnotation>
																																																																																										<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																																																																																											<EStringToStringMapEntry key="body" value="BinaryEventPattern"/>
																																																																																											<EStringToStringMapEntry key="unique" value="false"/>
																																																																																											<EStringToStringMapEntry key="upper" value="*"/>
																																																																																										</EAnnotation>
																																																																																									</attr>
																																																																																								</class>
																																																																																								<class name="ServiceLevelObjective">
																																																																																									<ref name="customServiceLevel" lowerBound="1" type="Condition"/>
																																																																																								</class>
																																																																																								<class name="OptimisationRequirement">
																																																																																									<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																																																										<EStringToStringMapEntry key="constraints" value="optimization_requirement_metric_or_prop"/>
																																																																																									</EAnnotation>
																																																																																									<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																																										<EStringToStringMapEntry key="optimization_requirement_metric_or_prop" value="Tuple {
																																																																																										message : String = 'In OptimizationRequirement: ' + self.name +
																																																																																										' no metric or property has been given',
																																																																																										status : Boolean = (metric <> null and property = null and (application <> null or
																																																																																											component <> null)) or (property <> null and metric = null and (application <> null or component <> null))
																																																																																													}.status"/>
																																																																																												</EAnnotation>
																																																																																												<attr name="optimisationFunction" lowerBound="1" type="//OptimisationFunctionType"/>
																																																																																												<ref name="metric" type="Metric"/>
																																																																																												<ref name="property" type="Property"/>
																																																																																												<ref name="application" type="Application"/>
																																																																																												<ref name="component" type="Component"/>
																																																																																												<ref name="metricContext" type="MetricContext"/>
																																																																																											</class>
																																																																																											<class name="HardwareRequirement" abstract="true"/>
																																																																																											<class name="QualitativeHardwareRequirement">
																																																																																												<attr name="minBenchmark" type="//EDouble">
																																																																																													<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																																																																																														<EStringToStringMapEntry key="body" value="NonFunctionalEvent"/>
																																																																																														<EStringToStringMapEntry key="unique" value="false"/>
																																																																																														<EStringToStringMapEntry key="upper" value="*"/>
																																																																																													</EAnnotation>
																																																																																													<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																																																																																														<EStringToStringMapEntry key="body" value="NonFunctionalEvent"/>
																																																																																														<EStringToStringMapEntry key="unique" value="false"/>
																																																																																														<EStringToStringMapEntry key="upper" value="*"/>
																																																																																													</EAnnotation>
																																																																																												</attr>
																																																																																												<attr name="maxBenchmark" type="//EDouble"/>
																																																																																											</class>
																																																																																											<class name="QuantitativeHardwareRequirement">
																																																																																												<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																																																													<EStringToStringMapEntry key="constraints" value="one_alternative_provided_in_quantitative_req quantitative_req_correct_input"/>
																																																																																												</EAnnotation>
																																																																																												<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																																													<EStringToStringMapEntry key="one_alternative_provided_in_quantitative_req" value="Tuple {
																																																																																													message : String = 'QuantitativeHardwareRequirement with name: ' + self.name +
																																																																																													' should be have at least one min or max value for a VM characteristic',
																																																																																													status : Boolean = ((minRAM > 0 or maxRAM > 0)) or
																																																																																														((minStorage > 0 or maxStorage > 0)) or (minCores > 0 or maxCores > 0)
																																																																																														}.status"/>
																																																																																														<EStringToStringMapEntry key="quantitative_req_correct_input" value="Tuple {
																																																																																														message : String = 'Correct (non-negative) values for the characteristics of VM in QuantitativeHardwareRequirement with name: '
																																																																																														+ self.name + ' should be provided',
																																																																																														status : Boolean = minRAM >= 0 and maxRAM >= 0 and minCores >= 0 and maxCores >= 0 and
																																																																																															minStorage >= 0 and maxStorage >= 0
																																																																																															}.status"/>
																																																																																														</EAnnotation>
																																																																																														<attr name="minCPU" type="//EDouble"/>
																																																																																														<attr name="maxCPU" type="//EDouble"/>
																																																																																														<attr name="minCores" type="//EInt"/>
																																																																																														<attr name="maxCores" type="//EInt">
																																																																																															<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																																																																																																<EStringToStringMapEntry key="body" value="EventInstance"/>
																																																																																																<EStringToStringMapEntry key="unique" value="false"/>
																																																																																																<EStringToStringMapEntry key="upper" value="*"/>
																																																																																															</EAnnotation>
																																																																																															<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																																																																																																<EStringToStringMapEntry key="body" value="EventInstance"/>
																																																																																																<EStringToStringMapEntry key="unique" value="false"/>
																																																																																																<EStringToStringMapEntry key="upper" value="*"/>
																																																																																															</EAnnotation>
																																																																																														</attr>
																																																																																														<attr name="minRAM" type="//EInt">
																																																																																															<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																																																																																																<EStringToStringMapEntry key="body" value="EventInstance"/>
																																																																																																<EStringToStringMapEntry key="unique" value="false"/>
																																																																																																<EStringToStringMapEntry key="upper" value="*"/>
																																																																																															</EAnnotation>
																																																																																															<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																																																																																																<EStringToStringMapEntry key="body" value="EventInstance"/>
																																																																																																<EStringToStringMapEntry key="unique" value="false"/>
																																																																																																<EStringToStringMapEntry key="upper" value="*"/>
																																																																																															</EAnnotation>
																																																																																														</attr>
																																																																																														<attr name="maxRAM" type="//EInt"/>
																																																																																														<attr name="minStorage" type="//EInt"/>
																																																																																														<attr name="maxStorage" type="//EInt"/>
																																																																																													</class>
																																																																																													<class name="ProviderRequirement">
																																																																																														<ref name="providers" lowerBound="1" upperBound="-1" type="CloudProvider"/>
																																																																																													</class>
																																																																																													<class name="OSOrImageRequirement" abstract="true"/>
																																																																																													<class name="OSRequirement">
																																																																																														<attr name="os" lowerBound="1" type="//EString"/>
																																																																																														<attr name="is64os" lowerBound="1" defaultValueLiteral="true" type="//EBoolean">
																																																																																															<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																																																																																																<EStringToStringMapEntry key="body" value="HorizontalScalingAction"/>
																																																																																																<EStringToStringMapEntry key="unique" value="false"/>
																																																																																																<EStringToStringMapEntry key="upper" value="*"/>
																																																																																															</EAnnotation>
																																																																																															<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																																																																																																<EStringToStringMapEntry key="body" value="HorizontalScalingAction"/>
																																																																																																<EStringToStringMapEntry key="unique" value="false"/>
																																																																																																<EStringToStringMapEntry key="upper" value="*"/>
																																																																																															</EAnnotation>
																																																																																														</attr>
																																																																																													</class>
																																																																																													<class name="ImageRequirement">
																																																																																														<attr name="imageId" lowerBound="1" type="//EString"/>
																																																																																													</class>
																																																																																													<class name="SecurityRequirement">
																																																																																														<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																																																															<EStringToStringMapEntry key="constraints" value="security_req_component_in_app"/>
																																																																																														</EAnnotation>
																																																																																														<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																																															<EStringToStringMapEntry key="security_req_component_in_app" value="Tuple {
																																																																																															message : String = 'SecurityRequirement' + self.name +
																																																																																															' maps to a component  which is not included in any deploymentModel of the respective application referenced',
																																																																																															status : Boolean = (application
																																																																																															<> null and component <> null) implies application.deploymentModels
																																																																																																->exists(d | (d.internalComponents
																																																																																																	->includes(component)))
																																																																																																	}.status"/>
																																																																																																</EAnnotation>
																																																																																																<ref name="securityControls" lowerBound="1" upperBound="-1" type="SecurityControl"/>
																																																																																																<ref name="application" type="Application"/>
																																																																																																<ref name="component" type="InternalComponent"/>
																																																																																															</class>
																																																																																															<class name="LocationRequirement">
																																																																																																<ref name="locations" lowerBound="1" upperBound="-1" type="Location"/>
																																																																																															</class>
																																																																																															<class name="ScaleRequirement" abstract="true"/>
																																																																																															<class name="HorizontalScaleRequirement">
																																																																																																<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																																																																	<EStringToStringMapEntry key="constraints" value="horiz_scale_requirement_min_max_enforcement"/>
																																																																																																</EAnnotation>
																																																																																																<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																																																	<EStringToStringMapEntry key="horiz_scale_requirement_min_max_enforcement" value="Tuple {
																																																																																																	message : String = 'HorizontalScaleRequirement: ' + self.name +
																																																																																																	' has wrong values for the minInstances and/or maxInstance properties. The minInstances value should be positive, the maxInstances value positive or equal to -1, and when maxInstances value is positive, then minInstances value should not be greater than it',
																																																																																																	status : Boolean = self.minInstances
																																																																																																	> 0 and (self.maxInstances > 0 or self.maxInstances = - 1) and (self.maxInstances <> - 1 implies self.minInstances
																																																																																																		<= self.maxInstances)
																																																																																																		}.status"/>
																																																																																																	</EAnnotation>
																																																																																																	<attr name="minInstances" lowerBound="1" type="//EInt"/>
																																																																																																	<attr name="maxInstances" lowerBound="1" type="//EInt">
																																																																																																		<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																																																																																																			<EStringToStringMapEntry key="body" value="ScalabilityRule"/>
																																																																																																			<EStringToStringMapEntry key="unique" value="false"/>
																																																																																																			<EStringToStringMapEntry key="upper" value="*"/>
																																																																																																		</EAnnotation>
																																																																																																	</attr>
																																																																																																	<ref name="component" lowerBound="1" type="InternalComponent"/>
																																																																																																</class>
																																																																																																<class name="VerticalScaleRequirement">
																																																																																																	<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																																																																		<EStringToStringMapEntry key="constraints" value="vert_scale_requirement_correct_param_vals vert_scale_requirement_activ_one_alt"/>
																																																																																																	</EAnnotation>
																																																																																																	<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																																																		<EStringToStringMapEntry key="vert_scale_requirement_correct_param_vals" value="Tuple {
																																																																																																		message : String = 'In VerticalScaleRequirement: ' + self.name +
																																																																																																		' there are wrong combinations of values mapping to the respective VM characteristics. For each characteristic, the min value should be non-negative, the max value greater or equal to -1 and if the max value is greater than -1, then it should be greater or equal to the min value',
																																																																																																		status : Boolean = minCores
																																																																																																		>= 0 and maxCores >= - 1 and (maxCores <> - 1 implies minCores <= maxCores) and minRAM >= 0 and maxRAM >= - 1 and
																																																																																																				(maxRAM <> - 1 implies minRAM <= maxRAM) and minCPU >= 0 and maxCPU >= - 1 and (maxCPU <> - 1 implies minCPU <=
																																																																																																					maxCPU) and minStorage >= 0 and maxStorage >= - 1 and (maxStorage <> - 1 implies minStorage <= maxStorage)
																																																																																																						}.status"/>
																																																																																																						<EStringToStringMapEntry key="vert_scale_requirement_activ_one_alt" value="Tuple {
																																																																																																						message : String = 'In VerticalScaleRequirement: ' + self.name +
																																																																																																						' the maximum value for no VM characteristic has been specified',
																																																																																																						status : Boolean = maxCores > 0 or maxCores = - 1 or maxCPU > 0 or
																																																																																																							maxCPU = - 1 or maxRAM > 0 or maxRAM = - 1 or maxStorage > 0 or maxStorage = - 1
																																																																																																							}.status"/>
																																																																																																						</EAnnotation>
																																																																																																						<attr name="minCPU" type="//EDouble">
																																																																																																							<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																																																																																																								<EStringToStringMapEntry key="body" value="ScalabilityRule"/>
																																																																																																								<EStringToStringMapEntry key="unique" value="false"/>
																																																																																																								<EStringToStringMapEntry key="upper" value="*"/>
																																																																																																							</EAnnotation>
																																																																																																						</attr>
																																																																																																						<attr name="maxCPU" type="//EDouble"/>
																																																																																																						<attr name="minCores" type="//EInt"/>
																																																																																																						<attr name="maxCores" type="//EInt">
																																																																																																							<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																																																																																																								<EStringToStringMapEntry key="body" value="ScalabilityRule"/>
																																																																																																								<EStringToStringMapEntry key="unique" value="false"/>
																																																																																																								<EStringToStringMapEntry key="upper" value="*"/>
																																																																																																							</EAnnotation>
																																																																																																						</attr>
																																																																																																						<attr name="minRAM" type="//EInt">
																																																																																																							<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																																																																																																								<EStringToStringMapEntry key="body" value="Property"/>
																																																																																																								<EStringToStringMapEntry key="unique" value="false"/>
																																																																																																								<EStringToStringMapEntry key="upper" value="*"/>
																																																																																																							</EAnnotation>
																																																																																																							<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																																																																																																								<EStringToStringMapEntry key="body" value="ScalabilityRule"/>
																																																																																																								<EStringToStringMapEntry key="unique" value="false"/>
																																																																																																								<EStringToStringMapEntry key="upper" value="*"/>
																																																																																																							</EAnnotation>
																																																																																																						</attr>
																																																																																																						<attr name="maxRAM" type="//EInt">
																																																																																																							<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																																																																																																								<EStringToStringMapEntry key="body" value="ScalabilityRule"/>
																																																																																																								<EStringToStringMapEntry key="unique" value="false"/>
																																																																																																								<EStringToStringMapEntry key="upper" value="*"/>
																																																																																																							</EAnnotation>
																																																																																																						</attr>
																																																																																																						<attr name="minStorage" type="//EInt"/>
																																																																																																						<attr name="maxStorage" type="//EInt"/>
																																																																																																						<ref name="vm" lowerBound="1" type="VM"/>
																																																																																																					</class>
																																																																																																					<EEnum name="OptimisationFunctionType">
																																																																																																						<EEnumLiteral name="MINIMISE"/>
																																																																																																						<EEnumLiteral name="MAXIMISE" value="1"/>
																																																																																																					</EEnum>
																																																																																																				</package>
																																																																																																				<package name="scalability" nsURI="http://www.paasage.eu/2015/06/camel/scalability" nsPrefix="scalability">
																																																																																																					<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																																																																						<EStringToStringMapEntry key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
																																																																																																						<EStringToStringMapEntry key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
																																																																																																						<EStringToStringMapEntry key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
																																																																																																					</EAnnotation>
																																																																																																					<class name="ScalabilityModel">
																																																																																																						<ref name="rules" ordered="false" upperBound="-1" containment="true" type="ScalabilityRule"/>
																																																																																																						<ref name="events" ordered="false" upperBound="-1" containment="true" type="Event"/>
																																																																																																						<ref name="eventInstances" ordered="false" upperBound="-1" containment="true" type="EventInstance"/>
																																																																																																						<ref name="actions" ordered="false" upperBound="-1" containment="true" type="ScalingAction"/>
																																																																																																						<ref name="patterns" ordered="false" upperBound="-1" containment="true" type="EventPattern"/>
																																																																																																						<ref name="timers" ordered="false" upperBound="-1" containment="true" type="Timer"/>
																																																																																																						<ref name="scaleRequirements" upperBound="-1" containment="true" type="ScaleRequirement"/>
																																																																																																					</class>
																																																																																																					<EEnum name="BinaryPatternOperatorType">
																																																																																																						<EEnumLiteral name="AND"/>
																																																																																																						<EEnumLiteral name="OR" value="1"/>
																																																																																																						<EEnumLiteral name="XOR" value="3"/>
																																																																																																						<EEnumLiteral name="PRECEDES" value="4"/>
																																																																																																						<EEnumLiteral name="REPEAT_UNTIL" value="5"/>
																																																																																																					</EEnum>
																																																																																																					<class name="Event">
																																																																																																						<attr name="name" lowerBound="1" type="//EString">
																																																																																																							<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																																																																																																								<EStringToStringMapEntry key="body" value="EventPattern"/>
																																																																																																								<EStringToStringMapEntry key="unique" value="false"/>
																																																																																																								<EStringToStringMapEntry key="upper" value="*"/>
																																																																																																							</EAnnotation>
																																																																																																						</attr>
																																																																																																					</class>
																																																																																																					<class name="EventPattern" abstract="true">
																																																																																																						<EOperation name="includesEvent" type="EBoolean">
																																																																																																							<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																																																								<EStringToStringMapEntry key="body" value="if (self.oclIsTypeOf(UnaryEventPattern))
																																																																																																								then self.oclAsType(UnaryEventPattern).event = e
																																																																																																								else (includesLeftEvent(e) or includesRightEvent(e))
																																																																																																								endif"/>
																																																																																																							</EAnnotation>
																																																																																																							<EParameter name="e" lowerBound="1" type="SimpleEvent"/>
																																																																																																						</EOperation>
																																																																																																						<EOperation name="includesLeftEvent" type="EBoolean">
																																																																																																							<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																																																								<EStringToStringMapEntry key="body" value="if (self.oclAsType(BinaryEventPattern).leftEvent.oclIsKindOf(EventPattern))
																																																																																																								then self.oclAsType(BinaryEventPattern).leftEvent.oclAsType(EventPattern).includesEvent(e)
																																																																																																								else (if (self.oclAsType(BinaryEventPattern).leftEvent.oclIsKindOf(SimpleEvent))
																																																																																																								then self.oclAsType(BinaryEventPattern).leftEvent.oclAsType(SimpleEvent) = e
																																																																																																								else false
																																																																																																								endif)
																																																																																																								endif"/>
																																																																																																							</EAnnotation>
																																																																																																							<EParameter name="e" lowerBound="1" type="SimpleEvent"/>
																																																																																																						</EOperation>
																																																																																																						<EOperation name="includesRightEvent" type="EBoolean">
																																																																																																							<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																																																								<EStringToStringMapEntry key="body" value="if (self.oclAsType(BinaryEventPattern).rightEvent.oclIsKindOf(EventPattern))
																																																																																																								then self.oclAsType(BinaryEventPattern).rightEvent.oclAsType(EventPattern).includesEvent(e)
																																																																																																								else (if (self.oclAsType(BinaryEventPattern).rightEvent.oclIsKindOf(SimpleEvent))
																																																																																																								then self.oclAsType(BinaryEventPattern).rightEvent.oclAsType(SimpleEvent) = e
																																																																																																								else false
																																																																																																								endif)
																																																																																																								endif"/>
																																																																																																							</EAnnotation>
																																																																																																							<EParameter name="e" lowerBound="1" type="SimpleEvent"/>
																																																																																																						</EOperation>
																																																																																																						<ref name="timer" type="Timer"/>
																																																																																																					</class>
																																																																																																					<class name="BinaryEventPattern">
																																																																																																						<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																																																																							<EStringToStringMapEntry key="constraints" value="binary_event_pattern_at_least_left_right binary_event_pattern_timer_one_event binary_event_pattern_occur_bounds"/>
																																																																																																						</EAnnotation>
																																																																																																						<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																																																							<EStringToStringMapEntry key="binary_event_pattern_at_least_left_right" value="Tuple {
																																																																																																							message : String = 'In BinaryEventPattern: ' + self.name +
																																																																																																							' no left or right event has been specified',
																																																																																																							status : Boolean = self.leftEvent <> null or self.rightEvent <> null
																																																																																																								}.status"/>
																																																																																																								<EStringToStringMapEntry key="binary_event_pattern_timer_one_event" value="Tuple {
																																																																																																								message : String = 'In BinaryEventPattern: ' + self.name +
																																																																																																								' both a timer as well as left and right events have been specified',
																																																																																																								status : Boolean = self.oclAsType(EventPattern).timer <> null
																																																																																																									implies (self.leftEvent = null or self.rightEvent = null)
																																																																																																									}.status"/>
																																																																																																									<EStringToStringMapEntry key="binary_event_pattern_occur_bounds" value="Tuple {
																																																																																																									message : String = 'In BinaryEventPattern: ' + self.name +
																																																																																																									' incorrect values were given for the lowerOccurrenceBound and upperOccurrenceBound attributes in conjunction with the use of the respective pattern operator: '
																																																																																																									+ operator.toString(),
																																																																																																									status : Boolean = (self.operator <> BinaryPatternOperatorType::REPEAT_UNTIL implies
																																																																																																										(self.lowerOccurrenceBound = 0 and self.upperOccurrenceBound = 0)) and (self.operator =
																																																																																																										BinaryPatternOperatorType::REPEAT_UNTIL and self.lowerOccurrenceBound >= 0 and self.upperOccurrenceBound > 0
																																																																																																										implies self.lowerOccurrenceBound <= upperOccurrenceBound)
																																																																																																										}.status"/>
																																																																																																									</EAnnotation>
																																																																																																									<ref name="leftEvent" type="Event"/>
																																																																																																									<ref name="rightEvent" type="Event"/>
																																																																																																									<attr name="lowerOccurrenceBound" type="//EInt"/>
																																																																																																									<attr name="upperOccurrenceBound" type="//EInt"/>
																																																																																																									<attr name="operator" lowerBound="1" type="//BinaryPatternOperatorType"/>
																																																																																																								</class>
																																																																																																								<class name="UnaryEventPattern">
																																																																																																									<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																																																																										<EStringToStringMapEntry key="constraints" value="unary_event_pattern_correct_values_per_operator"/>
																																																																																																									</EAnnotation>
																																																																																																									<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																																																										<EStringToStringMapEntry key="unary_event_pattern_correct_values_per_operator" value="Tuple {
																																																																																																										message : String = 'In UnaryEventPattern: ' + self.name +
																																																																																																										' either a REPEAT operator there is an incorrect combination of values of the operator and occurrenceNum attributes and of the timer association. When operator is REPEAT, occurrenceNum should be positive; otherwise, equal to zero. When operator is WHERE, then a timer must be specified; otherwise, no timer should be specified',
																																																																																																										status : Boolean = (self.operator
																																																																																																										= UnaryPatternOperatorType::REPEAT implies occurrenceNum > 0) and (self.operator <>
																																																																																																											UnaryPatternOperatorType::REPEAT implies occurrenceNum = 0) and (self.operator = UnaryPatternOperatorType::WHEN
																																																																																																											implies self.oclAsType(EventPattern).timer <> null) and (self.operator <> UnaryPatternOperatorType::WHEN implies
																																																																																																												self.oclAsType(EventPattern).timer = null)
																																																																																																												}.status"/>
																																																																																																											</EAnnotation>
																																																																																																											<ref name="event" lowerBound="1" type="Event"/>
																																																																																																											<attr name="occurrenceNum" type="//EInt"/>
																																																																																																											<attr name="operator" lowerBound="1" type="//UnaryPatternOperatorType"/>
																																																																																																										</class>
																																																																																																										<class name="SimpleEvent"/>
																																																																																																										<class name="FunctionalEvent">
																																																																																																											<attr name="functionalType" lowerBound="1" type="//EString">
																																																																																																												<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																																																																																																													<EStringToStringMapEntry key="body" value="NonFunctionalEvent"/>
																																																																																																													<EStringToStringMapEntry key="unique" value="false"/>
																																																																																																													<EStringToStringMapEntry key="upper" value="*"/>
																																																																																																												</EAnnotation>
																																																																																																											</attr>
																																																																																																										</class>
																																																																																																										<class name="NonFunctionalEvent">
																																																																																																											<ref name="metricCondition" lowerBound="1" type="MetricCondition"/>
																																																																																																											<attr name="isViolation" lowerBound="1" type="//EBoolean"/>
																																																																																																										</class>
																																																																																																										<class name="EventInstance">
																																																																																																											<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																																																																												<EStringToStringMapEntry key="constraints" value="event_instance_same_layer_of_metric_as_in_event event_instance_metric_in_event"/>
																																																																																																											</EAnnotation>
																																																																																																											<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																																																												<EStringToStringMapEntry key="event_instance_same_layer_of_metric_as_in_event" value="Tuple {
																																																																																																												message : String = 'EventInstance: ' + self.name +
																																																																																																												' does not map to the same layer as the one designated by the metric referenced by the instance\'s respective event:'
																																																																																																												+ self.event.name,
																																																																																																												status : Boolean = if (self.event.oclIsTypeOf(NonFunctionalEvent))
																																																																																																												then self.equalLayer(self.layer,
																																																																																																												self.event.oclAsType(NonFunctionalEvent).metricCondition.metricContext.metric.layer)
																																																																																																												else true
																																																																																																												endif
																																																																																																												}.status"/>
																																																																																																												<EStringToStringMapEntry key="event_instance_metric_in_event" value="Tuple {
																																																																																																												message : String = 'EventInstance: ' + self.name +
																																																																																																												' has a metric instance with a metric which is not identical to the one associated to the event instance\'s event: '
																																																																																																												+ self.event.name,
																																																																																																												status : Boolean = if (self.event.oclIsTypeOf(NonFunctionalEvent))
																																																																																																												then metricInstance.metric = event.oclAsType(NonFunctionalEvent).metricCondition.metricContext.metric
																																																																																																												else true
																																																																																																												endif
																																																																																																												}.status"/>
																																																																																																											</EAnnotation>
																																																																																																											<EOperation name="equalLayer" type="EBoolean">
																																																																																																												<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																																																													<EStringToStringMapEntry key="body" value="if (l1 = LayerType::SaaS)
																																																																																																													then (if (l2 = LayerType::SaaS)
																																																																																																													then true
																																																																																																													else false
																																																																																																													endif)
																																																																																																													else (if (l1 = LayerType::PaaS)
																																																																																																													then (if (l2 = LayerType::PaaS)
																																																																																																													then true
																																																																																																													else false
																																																																																																													endif)
																																																																																																													else (if (l2 = LayerType::IaaS)
																																																																																																													then true
																																																																																																													else false
																																																																																																													endif)
																																																																																																													endif)
																																																																																																													endif"/>
																																																																																																												</EAnnotation>
																																																																																																												<EParameter name="l1" lowerBound="1" type="LayerType"/>
																																																																																																												<EParameter name="l2" lowerBound="1" type="LayerType"/>
																																																																																																											</EOperation>
																																																																																																											<attr name="name" lowerBound="1" type="//EString"/>
																																																																																																											<attr name="status" lowerBound="1" type="//StatusType"/>
																																																																																																											<attr name="layer" type="//LayerType"/>
																																																																																																											<ref name="event" lowerBound="1" type="SimpleEvent"/>
																																																																																																											<ref name="metricInstance" type="MetricInstance"/>
																																																																																																										</class>
																																																																																																										<class name="ScalabilityRule">
																																																																																																											<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																																																																												<EStringToStringMapEntry key="constraints" value="scal_rule_horiz_req_count scal_rule_vert_req_correct_vals scal_rule_no_conficting_reqs"/>
																																																																																																											</EAnnotation>
																																																																																																											<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																																																												<EStringToStringMapEntry key="scal_rule_horiz_req_count" value="Tuple {
																																																																																																												message : String = 'In ScalabilityRule: ' + self.name +
																																																																																																												' there is a HorizontalScalingAction which conflicts with a rule\'s respective HorizontalScaleRequirement',
																																																																																																												status : Boolean = self.actions
																																																																																																												->forAll(p | (p.oclIsTypeOf(HorizontalScalingAction) and p.oclAsType(HorizontalScalingAction).count > 0 and
																																																																																																													(p.type = camel::ActionType::SCALE_IN or p.type = camel::ActionType::SCALE_OUT and self.scaleRequirements
																																																																																																													->exists(q | q.oclIsTypeOf(camel::requirement::HorizontalScaleRequirement))) implies self.scaleRequirements
																																																																																																													->forAll(t | if (t.oclIsTypeOf(camel::requirement::HorizontalScaleRequirement))
																																																																																																													then (t.oclAsType(camel::requirement::HorizontalScaleRequirement).maxInstances = - 1 or
																																																																																																													p.oclAsType(HorizontalScalingAction).count <=
																																																																																																													(t.oclAsType(camel::requirement::HorizontalScaleRequirement).maxInstances -
																																																																																																													t.oclAsType(camel::requirement::HorizontalScaleRequirement).minInstances))
																																																																																																													else true
																																																																																																													endif)))
																																																																																																													}.status"/>
																																																																																																													<EStringToStringMapEntry key="scal_rule_vert_req_correct_vals" value="Tuple {
																																																																																																													message : String = 'In ScalabilityRule: ' + self.name +
																																																																																																													' there is a VerticalScalingAction which conflicts with a rule\'s respective VerticalScaleRequirement',
																																																																																																													status : Boolean = self.actions
																																																																																																													->forAll(p | (p.oclIsTypeOf(VerticalScalingAction) and (p.type = camel::ActionType::SCALE_UP or p.type =
																																																																																																														camel::ActionType::SCALE_DOWN and self.scaleRequirements
																																																																																																														->exists(t | t.oclIsTypeOf(camel::requirement::VerticalScaleRequirement))) implies self.scaleRequirements
																																																																																																														->forAll(q | q.oclIsTypeOf(camel::requirement::VerticalScaleRequirement) implies
																																																																																																														((p.oclAsType(VerticalScalingAction).coreUpdate > 0) implies
																																																																																																														(q.oclAsType(camel::requirement::VerticalScaleRequirement).maxCores = - 1 or
																																																																																																														p.oclAsType(VerticalScalingAction).coreUpdate <=
																																																																																																														(q.oclAsType(camel::requirement::VerticalScaleRequirement).maxCores -
																																																																																																														q.oclAsType(camel::requirement::VerticalScaleRequirement).minCores))) and
																																																																																																														((p.oclAsType(VerticalScalingAction).storageUpdate > 0) implies
																																																																																																															(q.oclAsType(camel::requirement::VerticalScaleRequirement).maxStorage = - 1 or
																																																																																																															p.oclAsType(VerticalScalingAction).storageUpdate <=
																																																																																																															(q.oclAsType(camel::requirement::VerticalScaleRequirement).maxStorage -
																																																																																																															q.oclAsType(camel::requirement::VerticalScaleRequirement).minStorage))) and
																																																																																																															((p.oclAsType(VerticalScalingAction).CPUUpdate > 0) implies
																																																																																																																(q.oclAsType(camel::requirement::VerticalScaleRequirement).maxCPU = - 1 or
																																																																																																																p.oclAsType(VerticalScalingAction).CPUUpdate <=
																																																																																																																(q.oclAsType(camel::requirement::VerticalScaleRequirement).maxCPU -
																																																																																																																q.oclAsType(camel::requirement::VerticalScaleRequirement).minCPU))) and
																																																																																																																((p.oclAsType(VerticalScalingAction).memoryUpdate > 0) implies
																																																																																																																	(q.oclAsType(camel::requirement::VerticalScaleRequirement).maxRAM = - 1 or
																																																																																																																	p.oclAsType(VerticalScalingAction).memoryUpdate <=
																																																																																																																	(q.oclAsType(camel::requirement::VerticalScaleRequirement).maxRAM -
																																																																																																																	q.oclAsType(camel::requirement::VerticalScaleRequirement).minRAM))))))
																																																																																																																	}.status"/>
																																																																																																																	<EStringToStringMapEntry key="scal_rule_no_conficting_reqs" value="Tuple {
																																																																																																																	message : String = 'In ScalabilityRule: ' + self.name +
																																																																																																																	' there is a pair of vertical or horizontal scale requirements that are conflicting, where conflicting means that they concern the same vm or component, respectively',
																																																																																																																	status : Boolean = self.scaleRequirements
																																																																																																																	->forAll(p1, p2 | if (p1 <> p2 and p1.oclType() = p2.oclType())
																																																																																																																		then if (p1.oclIsTypeOf(camel::requirement::VerticalScaleRequirement))
																																																																																																																		then p1.oclAsType(camel::requirement::VerticalScaleRequirement).vm <>
																																																																																																																			p2.oclAsType(camel::requirement::VerticalScaleRequirement).vm
																																																																																																																			else p1.oclAsType(camel::requirement::HorizontalScaleRequirement).component <>
																																																																																																																			p2.oclAsType(camel::requirement::HorizontalScaleRequirement).component
																																																																																																																			endif
																																																																																																																			else true
																																																																																																																			endif)
																																																																																																																			}.status"/>
																																																																																																																		</EAnnotation>
																																																																																																																		<attr name="name" lowerBound="1" type="//EString"/>
																																																																																																																		<ref name="event" lowerBound="1" type="Event"/>
																																																																																																																		<ref name="actions" lowerBound="1" upperBound="-1" type="Action"/>
																																																																																																																		<ref name="entity" upperBound="-1" type="Entity"/>
																																																																																																																		<ref name="scaleRequirements" upperBound="-1" type="ScaleRequirement"/>
																																																																																																																	</class>
																																																																																																																	<class name="ScalingAction" abstract="true">
																																																																																																																		<ref name="vm" lowerBound="1" type="VM"/>
																																																																																																																	</class>
																																																																																																																	<class name="HorizontalScalingAction">
																																																																																																																		<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																																																																																			<EStringToStringMapEntry key="constraints" value="horizontal_scale_action_correct_count horizontal_scale_action_correct_type"/>
																																																																																																																		</EAnnotation>
																																																																																																																		<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																																																																			<EStringToStringMapEntry key="horizontal_scale_action_correct_count" value="Tuple {
																																																																																																																			message : String = 'HorizontalScalingAction: ' + self.name +
																																																																																																																			' has a wrong (negative) value for the count attribute',
																																																																																																																			status : Boolean = count >= 0
																																																																																																																				}.status"/>
																																																																																																																				<EStringToStringMapEntry key="horizontal_scale_action_correct_type" value="Tuple {
																																																																																																																				message : String = 'HorizontalScalingAction: ' + self.name + ' has a wrong type (' +
																																																																																																																				self.type.toString() + '). It should be either SCALE_IN or SCALE_OUT',
																																																																																																																				status : Boolean = (self.type = camel::ActionType::SCALE_IN)
																																																																																																																				or (self.type = camel::ActionType::SCALE_OUT)
																																																																																																																				}.status"/>
																																																																																																																			</EAnnotation>
																																																																																																																			<attr name="count" type="//EInt"/>
																																																																																																																			<ref name="internalComponent" lowerBound="1" type="InternalComponent"/>
																																																																																																																		</class>
																																																																																																																		<class name="VerticalScalingAction">
																																																																																																																			<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																																																																																				<EStringToStringMapEntry key="constraints" value="vertical_scale_action_correct_input vertical_scale_action_correct_type"/>
																																																																																																																			</EAnnotation>
																																																																																																																			<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																																																																				<EStringToStringMapEntry key="vertical_scale_action_correct_input" value="Tuple {
																																																																																																																				message : String = 'VerticalScalingAction: ' + self.name +
																																																																																																																				' has the value of all VM characteristic update attributes equal to zero. At least one should be positive.',
																																																																																																																				status : Boolean = memoryUpdate
																																																																																																																				<> 0 or CPUUpdate <> 0.0 or coreUpdate <> 0 or storageUpdate <> 0
																																																																																																																						}.status"/>
																																																																																																																						<EStringToStringMapEntry key="vertical_scale_action_correct_type" value="Tuple {
																																																																																																																						message : String = 'VerticalScalingAction: ' + self.name + ' has a wrong type (' +
																																																																																																																						self.type.toString() + '). It should be either SCALE_UP or SCALE_DOWN',
																																																																																																																						status : Boolean = (self.type = camel::ActionType::SCALE_UP)
																																																																																																																						or (self.type = camel::ActionType::SCALE_DOWN)
																																																																																																																						}.status"/>
																																																																																																																					</EAnnotation>
																																																																																																																					<attr name="memoryUpdate" type="//EInt"/>
																																																																																																																					<attr name="CPUUpdate" type="//EDouble"/>
																																																																																																																					<attr name="coreUpdate" type="//EInt"/>
																																																																																																																					<attr name="storageUpdate" type="//EInt">
																																																																																																																						<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																																																																																																																							<EStringToStringMapEntry key="body" value="Schedule"/>
																																																																																																																							<EStringToStringMapEntry key="unique" value="false"/>
																																																																																																																							<EStringToStringMapEntry key="upper" value="*"/>
																																																																																																																						</EAnnotation>
																																																																																																																					</attr>
																																																																																																																					<attr name="ioUpdate" type="//EInt"/>
																																																																																																																					<attr name="networkUpdate" type="//EInt"/>
																																																																																																																				</class>
																																																																																																																				<class name="Timer">
																																																																																																																					<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																																																																																						<EStringToStringMapEntry key="constraints" value="timer_correct_values"/>
																																																																																																																					</EAnnotation>
																																																																																																																					<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																																																																						<EStringToStringMapEntry key="timer_correct_values" value="Tuple {
																																																																																																																						message : String = 'Timer: ' + self.toString() +
																																																																																																																						' as wrong value combinations for its attributes. This means that either the timeValue is non-positive or the time type is WITHIN_MAX and a non-positive maxOccurrenceNum has been provided or that the time type is not WITHIN_MAX and a positive maxOccurrenceNum has been given',
																																																																																																																						status : Boolean = timeValue
																																																																																																																						> 0 and (self.type = TimerType::WITHIN_MAX implies self.maxOccurrenceNum > 0) and (self.type <>
																																																																																																																							TimerType::WITHIN_MAX implies self.maxOccurrenceNum = 0)
																																																																																																																							}.status"/>
																																																																																																																						</EAnnotation>
																																																																																																																						<attr name="name" type="//EString"/>
																																																																																																																						<attr name="type" lowerBound="1" type="//TimerType"/>
																																																																																																																						<attr name="timeValue" lowerBound="1" type="//EInt"/>
																																																																																																																						<attr name="maxOccurrenceNum" type="//EInt"/>
																																																																																																																						<ref name="unit" lowerBound="1" type="TimeIntervalUnit"/>
																																																																																																																					</class>
																																																																																																																					<EEnum name="TimerType">
																																																																																																																						<EEnumLiteral name="WITHIN"/>
																																																																																																																						<EEnumLiteral name="WITHIN_MAX" value="1"/>
																																																																																																																						<EEnumLiteral name="INTERVAL" value="2"/>
																																																																																																																					</EEnum>
																																																																																																																					<EEnum name="UnaryPatternOperatorType">
																																																																																																																						<EEnumLiteral name="EVERY"/>
																																																																																																																						<EEnumLiteral name="NOT" value="1"/>
																																																																																																																						<EEnumLiteral name="REPEAT" value="2"/>
																																																																																																																						<EEnumLiteral name="WHEN" value="3"/>
																																																																																																																					</EEnum>
																																																																																																																					<EEnum name="StatusType">
																																																																																																																						<EEnumLiteral name="CRITICAL"/>
																																																																																																																						<EEnumLiteral name="WARNING" value="1"/>
																																																																																																																						<EEnumLiteral name="SUCCESS" value="2"/>
																																																																																																																						<EEnumLiteral name="FATAL" value="3"/>
																																																																																																																					</EEnum>
																																																																																																																				</package>
																																																																																																																				<package name="security" nsURI="http://www.paasage.eu/2015/06/camel/security" nsPrefix="security">
																																																																																																																					<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																																																																																						<EStringToStringMapEntry key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
																																																																																																																						<EStringToStringMapEntry key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
																																																																																																																						<EStringToStringMapEntry key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
																																																																																																																					</EAnnotation>
																																																																																																																					<class name="SecurityModel">
																																																																																																																						<ref name="securityControls" ordered="false" upperBound="-1" containment="true" type="SecurityControl"/>
																																																																																																																						<ref name="securityRequirements" ordered="false" upperBound="-1" containment="true" type="SecurityRequirement"/>
																																																																																																																						<ref name="securityProperties" ordered="false" upperBound="-1" containment="true" type="SecurityProperty"/>
																																																																																																																						<ref name="rawSecurityMetrics" ordered="false" upperBound="-1" containment="true" type="RawSecurityMetric"/>
																																																																																																																						<ref name="compositeSecurityMetrics" ordered="false" upperBound="-1" containment="true" type="CompositeSecurityMetric"/>
																																																																																																																						<ref name="rawSecurityMetricInstances" ordered="false" upperBound="-1" containment="true" type="RawSecurityMetricInstance">
																																																																																																																							<EAnnotation source="teneo.jpa">
																																																																																																																								<EStringToStringMapEntry key="value" value="@JoinColumn(name="rawsecuritymetricInstances")"/>
																																																																																																																							</EAnnotation>
																																																																																																																						</ref>
																																																																																																																						<ref name="compositeSecurityMetricInstances" ordered="false" upperBound="-1" containment="true" type="CompositeSecurityMetricInstance">
																																																																																																																							<EAnnotation source="teneo.jpa">
																																																																																																																								<EStringToStringMapEntry key="value" value="@JoinColumn(name="compositesecuritymetricInstances")"/>
																																																																																																																							</EAnnotation>
																																																																																																																						</ref>
																																																																																																																						<ref name="securityDomains" ordered="false" upperBound="-1" containment="true" type="SecurityDomain"/>
																																																																																																																						<ref name="securityCapabilities" ordered="false" upperBound="-1" containment="true" type="SecurityCapability"/>
																																																																																																																						<ref name="securitySLOs" upperBound="-1" containment="true" type="SecuritySLO"/>
																																																																																																																					</class>
																																																																																																																					<class name="SecurityDomain">
																																																																																																																						<attr name="id" lowerBound="1" type="//EString"/>
																																																																																																																						<attr name="name" lowerBound="1" type="//EString">
																																																																																																																							<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																																																																																																																								<EStringToStringMapEntry key="body" value="Limit"/>
																																																																																																																							</EAnnotation>
																																																																																																																							<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																																																																																																																								<EStringToStringMapEntry key="body" value="Limit"/>
																																																																																																																							</EAnnotation>
																																																																																																																						</attr>
																																																																																																																						<ref name="subDomain" ordered="false" upperBound="-1" type="SecurityDomain"/>
																																																																																																																					</class>
																																																																																																																					<class name="SecurityControl">
																																																																																																																						<attr name="name" lowerBound="1" type="//EString"/>
																																																																																																																						<ref name="domain" lowerBound="1" type="SecurityDomain"/>
																																																																																																																						<ref name="subDomain" lowerBound="1" type="SecurityDomain"/>
																																																																																																																						<attr name="specification" lowerBound="1" type="//EString">
																																																																																																																							<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																																																																																																																								<EStringToStringMapEntry key="body" value="AgreementType"/>
																																																																																																																							</EAnnotation>
																																																																																																																							<EAnnotation source="teneo.jpa">
																																																																																																																								<EStringToStringMapEntry key="value" value="@Column(length=4000)"/>
																																																																																																																							</EAnnotation>
																																																																																																																						</attr>
																																																																																																																						<ref name="securityProperties" upperBound="-1" type="SecurityProperty"/>
																																																																																																																						<ref name="rawSecurityMetrics" upperBound="-1" type="RawSecurityMetric"/>
																																																																																																																						<ref name="compositeSecurityMetrics" upperBound="-1" type="CompositeSecurityMetric"/>
																																																																																																																					</class>
																																																																																																																					<class name="RawSecurityMetricInstance"/>
																																																																																																																					<class name="RawSecurityMetric"/>
																																																																																																																					<class name="SecurityProperty">
																																																																																																																						<ref name="domain" lowerBound="1" type="SecurityDomain"/>
																																																																																																																					</class>
																																																																																																																					<class name="Certifiable">
																																																																																																																						<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																																																																																							<EStringToStringMapEntry key="constraints" value="certifiable_realized_by"/>
																																																																																																																						</EAnnotation>
																																																																																																																						<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																																																																							<EStringToStringMapEntry key="certifiable_realized_by" value="Tuple {
																																																																																																																							message : String = 'Certifiable Property: ' + self.name +
																																																																																																																							' has a non-empty list of sub-properties',
																																																																																																																							status : Boolean = self.subProperties
																																																																																																																							->isEmpty()
																																																																																																																								}.status"/>
																																																																																																																							</EAnnotation>
																																																																																																																						</class>
																																																																																																																						<class name="SecuritySLO">
																																																																																																																							<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																																																																																								<EStringToStringMapEntry key="constraints" value="only_sec_constructs_in_condition"/>
																																																																																																																							</EAnnotation>
																																																																																																																							<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																																																																								<EStringToStringMapEntry key="only_sec_constructs_in_condition" value="Tuple {
																																																																																																																								message : String = 'SecuritySLO: ' + self.name +
																																																																																																																								' maps to non-security metrics or properties',
																																																																																																																								status : Boolean = if
																																																																																																																								(customServiceLevel.oclIsTypeOf(camel::metric::MetricCondition))
																																																																																																																								then
																																																																																																																								customServiceLevel.oclAsType(camel::metric::MetricCondition).metricContext.metric.oclIsTypeOf(camel::security::RawSecurityMetric)
																																																																																																																								or
																																																																																																																								customServiceLevel.oclAsType(camel::metric::MetricCondition).metricContext.metric.oclIsTypeOf(camel::security::CompositeSecurityMetric)
																																																																																																																								else if (customServiceLevel.oclIsTypeOf(camel::metric::PropertyCondition))
																																																																																																																								then
																																																																																																																								customServiceLevel.oclAsType(camel::metric::PropertyCondition).propertyContext.property.oclIsTypeOf(camel::security::SecurityProperty)
																																																																																																																								else false
																																																																																																																								endif
																																																																																																																								endif
																																																																																																																								}.status"/>
																																																																																																																							</EAnnotation>
																																																																																																																						</class>
																																																																																																																						<class name="SecurityCapability">
																																																																																																																							<attr name="name" lowerBound="1" type="//EString">
																																																																																																																								<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																																																																																																																									<EStringToStringMapEntry key="body" value="ServiceLevelObjectiveType"/>
																																																																																																																								</EAnnotation>
																																																																																																																							</attr>
																																																																																																																							<ref name="securityControls" ordered="false" lowerBound="1" upperBound="-1" type="SecurityControl"/>
																																																																																																																							<ref name="dataCenter" type="DataCenter"/>
																																																																																																																						</class>
																																																																																																																						<class name="CompositeSecurityMetric"/>
																																																																																																																						<class name="CompositeSecurityMetricInstance"/>
																																																																																																																					</package>
																																																																																																																					<package name="type" nsURI="http://www.paasage.eu/2015/06/camel/type" nsPrefix="type">
																																																																																																																						<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																																																																																							<EStringToStringMapEntry key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
																																																																																																																							<EStringToStringMapEntry key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
																																																																																																																							<EStringToStringMapEntry key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
																																																																																																																						</EAnnotation>
																																																																																																																						<class name="TypeModel">
																																																																																																																							<ref name="dataTypes" upperBound="-1" containment="true" type="ValueType"/>
																																																																																																																							<ref name="values" upperBound="-1" containment="true" type="SingleValue"/>
																																																																																																																						</class>
																																																																																																																						<class name="Limit">
																																																																																																																							<attr name="included" lowerBound="1" type="//EBoolean"/>
																																																																																																																							<ref name="value" lowerBound="1" containment="true" type="NumericValue"/>
																																																																																																																						</class>
																																																																																																																						<EEnum name="TypeEnum">
																																																																																																																							<EEnumLiteral name="IntType"/>
																																																																																																																							<EEnumLiteral name="StringType" value="1"/>
																																																																																																																							<EEnumLiteral name="BooleanType" value="2"/>
																																																																																																																							<EEnumLiteral name="FloatType" value="3"/>
																																																																																																																							<EEnumLiteral name="DoubleType" value="4"/>
																																																																																																																						</EEnum>
																																																																																																																						<class name="SingleValue" abstract="true">
																																																																																																																							<EOperation name="valueEquals" type="EBoolean">
																																																																																																																								<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																																																																									<EStringToStringMapEntry key="body" value="if (self.oclIsTypeOf(IntegerValue) and v.oclIsTypeOf(IntegerValue))
																																																																																																																									then self.oclAsType(IntegerValue).value = v.oclAsType(IntegerValue).value
																																																																																																																									else if (self.oclIsTypeOf(FloatsValue) and v.oclIsTypeOf(FloatsValue))
																																																																																																																									then self.oclAsType(FloatsValue).value = v.oclAsType(FloatsValue).value
																																																																																																																									else if (self.oclIsTypeOf(DoublePrecisionValue) and v.oclIsTypeOf(DoublePrecisionValue))
																																																																																																																									then self.oclAsType(DoublePrecisionValue).value = v.oclAsType(DoublePrecisionValue).value
																																																																																																																									else if (self.oclIsTypeOf(StringsValue) and v.oclIsTypeOf(StringsValue))
																																																																																																																									then self.oclAsType(StringsValue).value = v.oclAsType(StringsValue).value
																																																																																																																									else if (self.oclIsTypeOf(BoolValue) and v.oclIsTypeOf(BoolValue))
																																																																																																																									then self.oclAsType(BoolValue).value = v.oclAsType(BoolValue).value
																																																																																																																									else false
																																																																																																																									endif
																																																																																																																									endif
																																																																																																																									endif
																																																																																																																									endif
																																																																																																																									endif"/>
																																																																																																																								</EAnnotation>
																																																																																																																								<EParameter name="v" lowerBound="1" type="SingleValue"/>
																																																																																																																							</EOperation>
																																																																																																																						</class>
																																																																																																																						<class name="BoolValue">
																																																																																																																							<attr name="value" lowerBound="1" type="//EBoolean"/>
																																																																																																																						</class>
																																																																																																																						<class name="EnumerateValue">
																																																																																																																							<attr name="name" lowerBound="1" type="//EString"/>
																																																																																																																							<attr name="value" lowerBound="1" type="//EInt"/>
																																																																																																																						</class>
																																																																																																																						<class name="NumericValue" abstract="true"/>
																																																																																																																						<class name="IntegerValue">
																																																																																																																							<attr name="value" lowerBound="1" type="//EInt"/>
																																																																																																																						</class>
																																																																																																																						<class name="FloatsValue">
																																																																																																																							<attr name="value" lowerBound="1" type="//EFloat"/>
																																																																																																																						</class>
																																																																																																																						<class name="DoublePrecisionValue">
																																																																																																																							<attr name="value" lowerBound="1" type="//EDouble"/>
																																																																																																																						</class>
																																																																																																																						<class name="NegativeInf"/>
																																																																																																																						<class name="PositiveInf"/>
																																																																																																																						<class name="ValueToIncrease">
																																																																																																																							<ref name="value" lowerBound="1" containment="true" type="NumericValue"/>
																																																																																																																						</class>
																																																																																																																						<class name="StringsValue">
																																																																																																																							<attr name="value" lowerBound="1" type="//EString"/>
																																																																																																																						</class>
																																																																																																																						<class name="ValueType" abstract="true">
																																																																																																																							<attr name="name" type="//EString"/>
																																																																																																																						</class>
																																																																																																																						<class name="BooleanValueType">
																																																																																																																							<attr name="primitiveType" lowerBound="1" type="//TypeEnum"/>
																																																																																																																						</class>
																																																																																																																						<class name="Enumeration">
																																																																																																																							<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																																																																																								<EStringToStringMapEntry key="constraints" value="enumeration_all_values_diff"/>
																																																																																																																							</EAnnotation>
																																																																																																																							<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																																																																								<EStringToStringMapEntry key="enumeration_all_values_diff" value="Tuple {
																																																																																																																								message : String = 'Enumeration: ' + self.toString() +
																																																																																																																								' has two or more members which have either the same name or the same value',
																																																																																																																								status : Boolean = values
																																																																																																																								->forAll(p1, p2 | p1 <> p2 implies (p1.name <> p2.name and p1.value <> p2.value))
																																																																																																																										}.status"/>
																																																																																																																									</EAnnotation>
																																																																																																																									<EOperation name="includesName" type="EBoolean">
																																																																																																																										<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																																																																											<EStringToStringMapEntry key="body" value="self.values
																																																																																																																											->exists(p | p.name = name)"/>
																																																																																																																											</EAnnotation>
																																																																																																																											<EParameter name="name" lowerBound="1" type="EString"/>
																																																																																																																										</EOperation>
																																																																																																																										<EOperation name="includesValue" type="EBoolean">
																																																																																																																											<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																																																																												<EStringToStringMapEntry key="body" value="self.values
																																																																																																																												->exists(p | p.value = value)"/>
																																																																																																																												</EAnnotation>
																																																																																																																												<EParameter name="value" lowerBound="1" type="EInt"/>
																																																																																																																											</EOperation>
																																																																																																																											<ref name="values" lowerBound="1" upperBound="-1" containment="true" type="EnumerateValue"/>
																																																																																																																										</class>
																																																																																																																										<class name="List">
																																																																																																																											<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																																																																																												<EStringToStringMapEntry key="constraints" value="list_must_have_type all_list_values_correct_type"/>
																																																																																																																											</EAnnotation>
																																																																																																																											<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																																																																												<EStringToStringMapEntry key="list_must_have_type" value="Tuple {
																																																																																																																												message : String = 'List:' + self.toString() +
																																																																																																																												' should either have a primitive or a normal type of values',
																																																																																																																												status : Boolean = (primitiveType <> null and type = null) or (type <>
																																																																																																																													null and primitiveType = null)
																																																																																																																													}.status"/>
																																																																																																																													<EStringToStringMapEntry key="all_list_values_correct_type" value="Tuple {
																																																																																																																													message : String = 'List: ' + self.toString() +
																																																																																																																													' has one or more values that do not conform to its value type',
																																																																																																																													status : Boolean = values
																																																																																																																													->forAll(p | self.checkValueType(p))
																																																																																																																														}.status"/>
																																																																																																																													</EAnnotation>
																																																																																																																													<EOperation name="includesValue" type="EBoolean">
																																																																																																																														<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																																																																															<EStringToStringMapEntry key="body" value="if (type <> null)
																																																																																																																																then if (type.oclIsTypeOf(Range))
																																																																																																																																then if (type.oclAsType(Range).primitiveType = TypeEnum::IntType)
																																																																																																																																then values
																																																																																																																																->exists(p | p.oclAsType(IntegerValue).value = v.oclAsType(IntegerValue).value)
																																																																																																																																else if (type.oclAsType(Range).primitiveType = TypeEnum::FloatType)
																																																																																																																																then values
																																																																																																																																->exists(p | p.oclAsType(FloatsValue).value = v.oclAsType(FloatsValue).value)
																																																																																																																																else values
																																																																																																																																->exists(p | p.oclAsType(DoublePrecisionValue).value = v.oclAsType(DoublePrecisionValue).value)
																																																																																																																																endif
																																																																																																																																endif
																																																																																																																																else if (type.oclIsTypeOf(RangeUnion))
																																																																																																																																then if (type.oclAsType(RangeUnion).primitiveType = TypeEnum::IntType)
																																																																																																																																then values
																																																																																																																																->exists(p | p.oclAsType(IntegerValue).value = v.oclAsType(IntegerValue).value)
																																																																																																																																else if (type.oclAsType(RangeUnion).primitiveType = TypeEnum::FloatType)
																																																																																																																																then values
																																																																																																																																->exists(p | p.oclAsType(FloatsValue).value = v.oclAsType(FloatsValue).value)
																																																																																																																																else values
																																																																																																																																->exists(p | p.oclAsType(DoublePrecisionValue).value = v.oclAsType(DoublePrecisionValue).value)
																																																																																																																																endif
																																																																																																																																endif
																																																																																																																																else if (type.oclIsTypeOf(StringValueType))
																																																																																																																																then values
																																																																																																																																->exists(p | p.oclAsType(StringsValue).value = v.oclAsType(StringsValue).value)
																																																																																																																																else if (type.oclIsTypeOf(BooleanValueType))
																																																																																																																																then values
																																																																																																																																->exists(p | p.oclAsType(BoolValue).value = v.oclAsType(BoolValue).value)
																																																																																																																																else false
																																																																																																																																endif
																																																																																																																																endif
																																																																																																																																endif
																																																																																																																																endif
																																																																																																																																else if (primitiveType = TypeEnum::IntType)
																																																																																																																																then values
																																																																																																																																->exists(p | p.oclAsType(IntegerValue).value = v.oclAsType(IntegerValue).value)
																																																																																																																																else if (primitiveType = TypeEnum::FloatType)
																																																																																																																																then values
																																																																																																																																->exists(p | p.oclAsType(FloatsValue).value = v.oclAsType(FloatsValue).value)
																																																																																																																																else if (primitiveType = TypeEnum::DoubleType)
																																																																																																																																then values
																																																																																																																																->exists(p | p.oclAsType(DoublePrecisionValue).value = v.oclAsType(DoublePrecisionValue).value)
																																																																																																																																else if (primitiveType = TypeEnum::StringType)
																																																																																																																																then values
																																																																																																																																->exists(p | p.oclAsType(StringsValue).value = v.oclAsType(StringsValue).value)
																																																																																																																																else if (primitiveType = TypeEnum::BooleanType)
																																																																																																																																then values
																																																																																																																																->exists(p | p.oclAsType(BoolValue).value = v.oclAsType(BoolValue).value)
																																																																																																																																else false
																																																																																																																																endif
																																																																																																																																endif
																																																																																																																																endif
																																																																																																																																endif
																																																																																																																																endif
																																																																																																																																endif"/>
																																																																																																																															</EAnnotation>
																																																																																																																															<EParameter name="v" lowerBound="1" type="SingleValue"/>
																																																																																																																														</EOperation>
																																																																																																																														<EOperation name="checkValueType" type="EBoolean">
																																																																																																																															<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																																																																																<EStringToStringMapEntry key="body" value="if (type <> null)
																																																																																																																																	then if (type.oclIsTypeOf(Range))
																																																																																																																																	then if (type.oclAsType(Range).primitiveType = TypeEnum::IntType)
																																																																																																																																	then p.oclIsTypeOf(IntegerValue) and
																																																																																																																																	type.oclAsType(Range).includesValue(p.oclAsType(IntegerValue).value.oclAsType(ecore::EDouble))
																																																																																																																																	else if (type.oclAsType(Range).primitiveType = TypeEnum::FloatType)
																																																																																																																																	then p.oclIsTypeOf(FloatsValue) and
																																																																																																																																	type.oclAsType(Range).includesValue(p.oclAsType(FloatsValue).value.oclAsType(ecore::EDouble))
																																																																																																																																	else p.oclIsTypeOf(DoublePrecisionValue) and
																																																																																																																																	type.oclAsType(Range).includesValue(p.oclAsType(DoublePrecisionValue).value.oclAsType(ecore::EDouble))
																																																																																																																																	endif
																																																																																																																																	endif
																																																																																																																																	else if (type.oclIsTypeOf(RangeUnion))
																																																																																																																																	then if (type.oclAsType(RangeUnion).primitiveType = TypeEnum::IntType)
																																																																																																																																	then p.oclIsTypeOf(IntegerValue) and
																																																																																																																																	type.oclAsType(RangeUnion).includesValue(p.oclAsType(IntegerValue).value.oclAsType(ecore::EDouble))
																																																																																																																																	else if (type.oclAsType(RangeUnion).primitiveType = TypeEnum::FloatType)
																																																																																																																																	then p.oclIsTypeOf(FloatsValue) and
																																																																																																																																	type.oclAsType(RangeUnion).includesValue(p.oclAsType(FloatsValue).value.oclAsType(ecore::EDouble))
																																																																																																																																	else p.oclIsTypeOf(DoublePrecisionValue) and
																																																																																																																																	type.oclAsType(RangeUnion).includesValue(p.oclAsType(DoublePrecisionValue).value.oclAsType(ecore::EDouble))
																																																																																																																																	endif
																																																																																																																																	endif
																																																																																																																																	else if (type.oclIsTypeOf(StringValueType))
																																																																																																																																	then p.oclIsTypeOf(StringsValue)
																																																																																																																																	else if (type.oclIsTypeOf(BooleanValueType))
																																																																																																																																	then p.oclIsTypeOf(BoolValue)
																																																																																																																																	else false
																																																																																																																																	endif
																																																																																																																																	endif
																																																																																																																																	endif
																																																																																																																																	endif
																																																																																																																																	else if (primitiveType = TypeEnum::IntType)
																																																																																																																																	then p.oclIsTypeOf(IntegerValue)
																																																																																																																																	else if (primitiveType = TypeEnum::StringType)
																																																																																																																																	then p.oclIsTypeOf(StringsValue)
																																																																																																																																	else if (primitiveType = TypeEnum::BooleanType)
																																																																																																																																	then p.oclIsTypeOf(BoolValue)
																																																																																																																																	else if (primitiveType = TypeEnum::FloatType)
																																																																																																																																	then p.oclIsTypeOf(FloatsValue)
																																																																																																																																	else if (primitiveType = TypeEnum::DoubleType)
																																																																																																																																	then p.oclIsTypeOf(DoublePrecisionValue)
																																																																																																																																	else true
																																																																																																																																	endif
																																																																																																																																	endif
																																																																																																																																	endif
																																																																																																																																	endif
																																																																																																																																	endif
																																																																																																																																	endif"/>
																																																																																																																																</EAnnotation>
																																																																																																																																<EParameter name="p" lowerBound="1" type="SingleValue"/>
																																																																																																																															</EOperation>
																																																																																																																															<ref name="values" lowerBound="1" upperBound="-1" containment="true" type="SingleValue"/>
																																																																																																																															<attr name="primitiveType" type="//TypeEnum"/>
																																																																																																																															<ref name="type" type="ValueType"/>
																																																																																																																														</class>
																																																																																																																														<class name="Range">
																																																																																																																															<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																																																																																																<EStringToStringMapEntry key="constraints" value="correct_range_type enforce_correct_range_type range_low_less_than_upper range_infs_at_appropriate_pos"/>
																																																																																																																															</EAnnotation>
																																																																																																																															<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																																																																																<EStringToStringMapEntry key="correct_range_type" value="Tuple {
																																																																																																																																message : String = 'Range: ' + self.toString() + ' has a non-numeric primitiveType: ' +
																																																																																																																																primitiveType.toString(),
																																																																																																																																status : Boolean = (primitiveType = TypeEnum::IntType) or (primitiveType = TypeEnum::FloatType) or
																																																																																																																																(primitiveType = TypeEnum::DoubleType)
																																																																																																																																}.status"/>
																																																																																																																																<EStringToStringMapEntry key="enforce_correct_range_type" value="Tuple {
																																																																																																																																message : String = 'Range: ' + self.toString() +
																																																																																																																																' has either its low or upper limit not conforming to its primitive type',
																																																																																																																																status : Boolean = self.checkType(self.lowerLimit,
																																																																																																																																primitiveType, true) and self.checkType(self.upperLimit, primitiveType, false)
																																																																																																																																}.status"/>
																																																																																																																																<EStringToStringMapEntry key="range_low_less_than_upper" value="Tuple {
																																																																																																																																message : String = 'Range: ' + self.toString() +
																																																																																																																																' has its lower limit greater than the upper',
																																																																																																																																status : Boolean = if (not (lowerLimit.value.oclIsTypeOf(NegativeInf)) and not
																																																																																																																																(upperLimit.value.oclIsTypeOf(PositiveInf)))
																																																																																																																																then if (primitiveType = TypeEnum::IntType)
																																																																																																																																then if (not (upperLimit.included) and not (lowerLimit.included))
																																																																																																																																then (upperLimit.value.oclAsType(IntegerValue).value -
																																																																																																																																lowerLimit.value.oclAsType(IntegerValue).value.oclAsType(ecore::EInt)) >= 2
																																																																																																																																	else if (upperLimit.included)
																																																																																																																																	then lowerLimit.value.oclAsType(IntegerValue).value.oclAsType(ecore::EInt) <=
																																																																																																																																	upperLimit.value.oclAsType(IntegerValue).value
																																																																																																																																	else lowerLimit.value.oclAsType(IntegerValue).value.oclAsType(ecore::EInt) <
																																																																																																																																	upperLimit.value.oclAsType(IntegerValue).value
																																																																																																																																	endif
																																																																																																																																	endif
																																																																																																																																	else (if (primitiveType = TypeEnum::FloatType)
																																																																																																																																	then if (upperLimit.included)
																																																																																																																																	then lowerLimit.value.oclAsType(FloatsValue).value.oclAsType(ecore::EFloat) <=
																																																																																																																																	upperLimit.value.oclAsType(FloatsValue).value
																																																																																																																																	else lowerLimit.value.oclAsType(FloatsValue).value.oclAsType(ecore::EFloat) <
																																																																																																																																	upperLimit.value.oclAsType(FloatsValue).value
																																																																																																																																	endif
																																																																																																																																	else if (upperLimit.included)
																																																																																																																																	then lowerLimit.value.oclAsType(DoublePrecisionValue).value.oclAsType(ecore::EDouble) <=
																																																																																																																																	upperLimit.value.oclAsType(DoublePrecisionValue).value
																																																																																																																																	else lowerLimit.value.oclAsType(DoublePrecisionValue).value.oclAsType(ecore::EDouble) <
																																																																																																																																	upperLimit.value.oclAsType(DoublePrecisionValue).value
																																																																																																																																	endif
																																																																																																																																	endif)
																																																																																																																																	endif
																																																																																																																																	else true
																																																																																																																																	endif
																																																																																																																																	}.status"/>
																																																																																																																																	<EStringToStringMapEntry key="range_infs_at_appropriate_pos" value="Tuple {
																																																																																																																																	message : String = 'Range: ' + self.toString() +
																																																																																																																																	' has a PositiveInf value for its lower limit or a NegativeInf value for its upper limit',
																																																																																																																																	status : Boolean = not
																																																																																																																																	(lowerLimit.value.oclIsTypeOf(PositiveInf) or upperLimit.value.oclIsTypeOf(NegativeInf))
																																																																																																																																	}.status"/>
																																																																																																																																</EAnnotation>
																																																																																																																																<EOperation name="checkType" type="EBoolean">
																																																																																																																																	<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																																																																																		<EStringToStringMapEntry key="body" value="if (type = TypeEnum::IntType)
																																																																																																																																		then if (lower and not (lowerLimit.value.oclIsTypeOf(NegativeInf)))
																																																																																																																																		then lowerLimit.value.oclIsTypeOf(IntegerValue)
																																																																																																																																		else if (not (lower) and not (upperLimit.value.oclIsTypeOf(PositiveInf)))
																																																																																																																																		then upperLimit.value.oclIsTypeOf(IntegerValue)
																																																																																																																																		else true
																																																																																																																																		endif
																																																																																																																																		endif
																																																																																																																																		else if (type = TypeEnum::FloatType)
																																																																																																																																		then if (lower and not (lowerLimit.value.oclIsTypeOf(NegativeInf)))
																																																																																																																																		then lowerLimit.value.oclIsTypeOf(FloatsValue)
																																																																																																																																		else if (not (lower) and not (upperLimit.value.oclIsTypeOf(PositiveInf)))
																																																																																																																																		then upperLimit.value.oclIsTypeOf(FloatsValue)
																																																																																																																																		else true
																																																																																																																																		endif
																																																																																																																																		endif
																																																																																																																																		else if (lower and not (lowerLimit.value.oclIsTypeOf(NegativeInf)))
																																																																																																																																		then lowerLimit.value.oclIsTypeOf(DoublePrecisionValue)
																																																																																																																																		else if (not (lower) and not (upperLimit.value.oclIsTypeOf(PositiveInf)))
																																																																																																																																		then upperLimit.value.oclIsTypeOf(DoublePrecisionValue)
																																																																																																																																		else true
																																																																																																																																		endif
																																																																																																																																		endif
																																																																																																																																		endif
																																																																																																																																		endif"/>
																																																																																																																																	</EAnnotation>
																																																																																																																																	<EParameter name="l" lowerBound="1" type="Limit"/>
																																																																																																																																	<EParameter name="type" lowerBound="1" type="TypeEnum"/>
																																																																																																																																	<EParameter name="lower" lowerBound="1" type="EBoolean"/>
																																																																																																																																</EOperation>
																																																																																																																																<EOperation name="includesValue" type="EBoolean">
																																																																																																																																	<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																																																																																		<EStringToStringMapEntry key="body" value="if (primitiveType = TypeEnum::IntType)
																																																																																																																																		then if (not (lowerLimit.value.oclIsTypeOf(NegativeInf)))
																																																																																																																																		then ((lowerLimit.included and lowerLimit.value.oclAsType(IntegerValue).value <= n) or (not
																																																																																																																																		(lowerLimit.included) and lowerLimit.value.oclAsType(IntegerValue).value < n)) and if (not
																																																																																																																																		(upperLimit.value.oclIsTypeOf(PositiveInf)))
																																																																																																																																		then (upperLimit.included and upperLimit.value.oclAsType(IntegerValue).value >= n) or (not
																																																																																																																																			(upperLimit.included) and upperLimit.value.oclAsType(IntegerValue).value > n)
																																																																																																																																			else true
																																																																																																																																			endif
																																																																																																																																			else if (not (upperLimit.value.oclIsTypeOf(PositiveInf)))
																																																																																																																																			then (upperLimit.included and upperLimit.value.oclAsType(IntegerValue).value >= n) or (not
																																																																																																																																			(upperLimit.included) and upperLimit.value.oclAsType(IntegerValue).value > n)
																																																																																																																																			else true
																																																																																																																																			endif
																																																																																																																																			endif
																																																																																																																																			else if (primitiveType = TypeEnum::FloatType)
																																																																																																																																			then if (not (lowerLimit.value.oclIsTypeOf(NegativeInf)))
																																																																																																																																			then ((lowerLimit.included and lowerLimit.value.oclAsType(FloatsValue).value <= n) or (not
																																																																																																																																			(lowerLimit.included) and lowerLimit.value.oclAsType(FloatsValue).value < n)) and if (not
																																																																																																																																			(upperLimit.value.oclIsTypeOf(PositiveInf)))
																																																																																																																																			then (upperLimit.included and upperLimit.value.oclAsType(FloatsValue).value >= n) or (not
																																																																																																																																				(upperLimit.included) and upperLimit.value.oclAsType(FloatsValue).value > n)
																																																																																																																																				else true
																																																																																																																																				endif
																																																																																																																																				else if (not (upperLimit.value.oclIsTypeOf(PositiveInf)))
																																																																																																																																				then (upperLimit.included and upperLimit.value.oclAsType(FloatsValue).value >= n) or (not
																																																																																																																																				(upperLimit.included) and upperLimit.value.oclAsType(FloatsValue).value > n)
																																																																																																																																				else true
																																																																																																																																				endif
																																																																																																																																				endif
																																																																																																																																				else if (not (lowerLimit.value.oclIsTypeOf(NegativeInf)))
																																																																																																																																				then ((lowerLimit.included and lowerLimit.value.oclAsType(DoublePrecisionValue).value <= n) or (not
																																																																																																																																				(lowerLimit.included) and lowerLimit.value.oclAsType(DoublePrecisionValue).value < n)) and if (not
																																																																																																																																				(upperLimit.value.oclIsTypeOf(PositiveInf)))
																																																																																																																																				then (upperLimit.included and upperLimit.value.oclAsType(DoublePrecisionValue).value >= n) or (not
																																																																																																																																					(upperLimit.included) and upperLimit.value.oclAsType(DoublePrecisionValue).value > n)
																																																																																																																																					else true
																																																																																																																																					endif
																																																																																																																																					else if (not (upperLimit.value.oclIsTypeOf(PositiveInf)))
																																																																																																																																					then (upperLimit.included and upperLimit.value.oclAsType(DoublePrecisionValue).value >= n) or (not
																																																																																																																																					(upperLimit.included) and upperLimit.value.oclAsType(DoublePrecisionValue).value > n)
																																																																																																																																					else true
																																																																																																																																					endif
																																																																																																																																					endif
																																																																																																																																					endif
																																																																																																																																					endif"/>
																																																																																																																																				</EAnnotation>
																																																																																																																																				<EParameter name="n" lowerBound="1" type="EDouble"/>
																																																																																																																																			</EOperation>
																																																																																																																																			<ref name="lowerLimit" lowerBound="1" containment="true" type="Limit"/>
																																																																																																																																			<ref name="upperLimit" lowerBound="1" containment="true" type="Limit"/>
																																																																																																																																			<attr name="primitiveType" lowerBound="1" type="//TypeEnum"/>
																																																																																																																																		</class>
																																																																																																																																		<class name="RangeUnion">
																																																																																																																																			<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																																																																																																				<EStringToStringMapEntry key="constraints" value="same_primitive_types_in_union_ranges correct_range_union_sequence"/>
																																																																																																																																			</EAnnotation>
																																																																																																																																			<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																																																																																				<EStringToStringMapEntry key="same_primitive_types_in_union_ranges" value="Tuple {
																																																																																																																																				message : String = 'RangeUnion: ' + self.name +
																																																																																																																																				' has one or more ranges with a different primitive type',
																																																																																																																																				status : Boolean = self.ranges
																																																																																																																																				->forAll(p | p.primitiveType = self.primitiveType)
																																																																																																																																					}.status"/>
																																																																																																																																					<EStringToStringMapEntry key="correct_range_union_sequence" value="Tuple {
																																																																																																																																					message : String = 'RangeUnion: ' + self.name +
																																																																																																																																					' has a wrong sequence of ranges. This means that two or more ranges are conflicting',
																																																																																																																																					status : Boolean = not
																																																																																																																																					(invalidRangeSequence(self))
																																																																																																																																					}.status"/>
																																																																																																																																				</EAnnotation>
																																																																																																																																				<EOperation name="includesValue" type="EBoolean">
																																																																																																																																					<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																																																																																						<EStringToStringMapEntry key="body" value="ranges
																																																																																																																																						->exists(p | p.includesValue(n))"/>
																																																																																																																																						</EAnnotation>
																																																																																																																																						<EParameter name="n" lowerBound="1" type="EDouble"/>
																																																																																																																																					</EOperation>
																																																																																																																																					<EOperation name="invalidRangeSequence" type="EBoolean">
																																																																																																																																						<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																																																																																																																							<EStringToStringMapEntry key="body" value="EList<Range> ranges = ru.getRanges();
																																																																																																																																								Range prev = ranges.get(0);
																																																																																																																																								for (int i = 1; i < ranges.size(); i++){
																																																																																																																																								Range next = ranges.get(i);
																																																																																																																																								eu.paasage.camel.type.Limit lowerLimit = prev.getUpperLimit();
																																																																																																																																								eu.paasage.camel.type.Limit upperLimit = next.getLowerLimit();
																																																																																																																																								boolean lowerInclusive = lowerLimit.isIncluded();
																																																																																																																																								boolean upperInclusive = upperLimit.isIncluded();
																																																																																																																																								if (!(lowerLimit instanceof eu.paasage.camel.type.NegativeInf) && !(upperLimit instanceof eu.paasage.camel.type.PositiveInf)){
																																																																																																																																								double low = 0.0, upper = 0.0;
																																																																																																																																								//Checking if already at end (positive infinity or next range starts with negative infinity
																																																																																																																																								eu.paasage.camel.type.NumericValue prevVal = lowerLimit.getValue();
																																																																																																																																								if (prevVal instanceof eu.paasage.camel.type.PositiveInf) return Boolean.TRUE;
																																																																																																																																								eu.paasage.camel.type.NumericValue nextVal = upperLimit.getValue();
																																																																																																																																								if (nextVal instanceof eu.paasage.camel.type.NegativeInf) return Boolean.TRUE;
																																																																																																																																								//Checking now that low is less or equal to upper
																																																																																																																																								if (prevVal instanceof eu.paasage.camel.type.IntegerValue){
																																																																																																																																								low = ((eu.paasage.camel.type.IntegerValue)prevVal).getValue();
																																																																																																																																								if (!lowerInclusive){
																																																																																																																																								low = low -1;
																																																																																																																																								lowerInclusive = true;
																																																																																																																																								}
																																																																																																																																								}
																																																																																																																																								else if (prevVal instanceof eu.paasage.camel.type.FloatsValue) low = ((eu.paasage.camel.type.FloatsValue)prevVal).getValue();
																																																																																																																																								else low = ((eu.paasage.camel.type.DoublePrecisionValue)prevVal).getValue();
																																																																																																																																								if (nextVal instanceof eu.paasage.camel.type.IntegerValue){
																																																																																																																																								upper = ((eu.paasage.camel.type.IntegerValue)nextVal).getValue();
																																																																																																																																								if (!upperInclusive){
																																																																																																																																								upper = upper + 1;
																																																																																																																																								upperInclusive = true;
																																																																																																																																								}
																																																																																																																																								}
																																																																																																																																								else if (nextVal instanceof eu.paasage.camel.type.FloatsValue) upper = ((eu.paasage.camel.type.FloatsValue)nextVal).getValue();
																																																																																																																																								else upper = ((eu.paasage.camel.type.DoublePrecisionValue)nextVal).getValue();
																																																																																																																																								System.out.println("Low is: " + low + " upper is: " + upper);
																																																																																																																																								if (low > upper || (low == upper && lowerInclusive == true )) return Boolean.TRUE;
																																																																																																																																									}
																																																																																																																																									prev = next;
																																																																																																																																									}
																																																																																																																																									return Boolean.FALSE;"/>
																																																																																																																																								</EAnnotation>
																																																																																																																																								<EParameter name="ru" lowerBound="1" type="RangeUnion"/>
																																																																																																																																							</EOperation>
																																																																																																																																							<ref name="ranges" lowerBound="1" upperBound="-1" containment="true" type="Range"/>
																																																																																																																																							<attr name="primitiveType" lowerBound="1" type="//TypeEnum"/>
																																																																																																																																						</class>
																																																																																																																																						<class name="StringValueType">
																																																																																																																																							<attr name="primitiveType" lowerBound="1" type="//TypeEnum"/>
																																																																																																																																						</class>
																																																																																																																																					</package>
																																																																																																																																					<package name="unit" nsURI="http://www.paasage.eu/2015/06/camel/unit" nsPrefix="unit">
																																																																																																																																						<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																																																																																																							<EStringToStringMapEntry key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
																																																																																																																																							<EStringToStringMapEntry key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
																																																																																																																																							<EStringToStringMapEntry key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
																																																																																																																																						</EAnnotation>
																																																																																																																																						<class name="Unit" abstract="true">
																																																																																																																																							<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore">
																																																																																																																																								<EStringToStringMapEntry key="constraints" value="correct_unit"/>
																																																																																																																																							</EAnnotation>
																																																																																																																																							<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																																																																																								<EStringToStringMapEntry key="correct_unit" value="Tuple {
																																																																																																																																								message : String = 'Unit: ' + name + ' is incorrect as its type( ' + self.unit.toString() +
																																																																																																																																								' that does not correspond to its dimension',
																																																																																																																																								status : Boolean = checkUnit()
																																																																																																																																								}.status"/>
																																																																																																																																							</EAnnotation>
																																																																																																																																							<EOperation name="checkUnit" type="EBoolean">
																																																																																																																																								<EAnnotation source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
																																																																																																																																									<EStringToStringMapEntry key="body" value="if (self.oclIsTypeOf(TimeIntervalUnit))
																																																																																																																																									then if (unit = UnitType::MILLISECONDS or unit = UnitType::SECONDS or unit = UnitType::MINUTES or unit =
																																																																																																																																									UnitType::HOURS or unit = UnitType::DAYS or unit = UnitType::WEEKS or unit = UnitType::MONTHS)
																																																																																																																																									then true
																																																																																																																																									else false
																																																																																																																																									endif
																																																																																																																																									else if (self.oclIsTypeOf(StorageUnit))
																																																																																																																																									then if (unit = UnitType::BYTES or unit = UnitType::KILOBYTES or unit = UnitType::MEGABYTES or unit =
																																																																																																																																									UnitType::GIGABYTES)
																																																																																																																																									then true
																																																																																																																																									else false
																																																																																																																																									endif
																																																																																																																																									else if (self.oclIsTypeOf(MonetaryUnit))
																																																																																																																																									then if (unit = UnitType::EUROS or unit = UnitType::DOLLARS or unit = UnitType::POUNDS)
																																																																																																																																									then true
																																																																																																																																									else false
																																																																																																																																									endif
																																																																																																																																									else if (self.oclIsTypeOf(ThroughputUnit))
																																																																																																																																									then if (unit = UnitType::BYTES_PER_SECOND or unit = UnitType::TRANSACTIONS_PER_SECOND or unit =
																																																																																																																																									UnitType::REQUESTS_PER_SECOND)
																																																																																																																																									then true
																																																																																																																																									else false
																																																																																																																																									endif
																																																																																																																																									else if (self.oclIsTypeOf(RequestUnit))
																																																																																																																																									then if (unit = UnitType::REQUESTS)
																																																																																																																																									then true
																																																																																																																																									else false
																																																																																																																																									endif
																																																																																																																																									else if (self.oclIsTypeOf(TransactionUnit))
																																																																																																																																									then if (unit = UnitType::TRANSACTIONS)
																																																																																																																																									then true
																																																																																																																																									else false
																																																																																																																																									endif
																																																																																																																																									else if (self.oclIsTypeOf(Dimensionless))
																																																																																																																																									then if (unit = UnitType::PERCENTAGE)
																																																																																																																																									then true
																																																																																																																																									else false
																																																																																																																																									endif
																																																																																																																																									else if (self.oclIsTypeOf(CoreUnit))
																																																																																																																																									then if (unit = UnitType::CORES)
																																																																																																																																									then true
																																																																																																																																									else false
																																																																																																																																									endif
																																																																																																																																									else false
																																																																																																																																									endif
																																																																																																																																									endif
																																																																																																																																									endif
																																																																																																																																									endif
																																																																																																																																									endif
																																																																																																																																									endif
																																																																																																																																									endif
																																																																																																																																									endif"/>
																																																																																																																																								</EAnnotation>
																																																																																																																																							</EOperation>
																																																																																																																																							<attr name="name" lowerBound="1" type="//EString"/>
																																																																																																																																							<attr name="unit" lowerBound="1" type="//UnitType">
																																																																																																																																								<EAnnotation source="http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName">
																																																																																																																																									<EStringToStringMapEntry key="body" value="Feature"/>
																																																																																																																																								</EAnnotation>
																																																																																																																																							</attr>
																																																																																																																																						</class>
																																																																																																																																						<class name="CoreUnit"/>
																																																																																																																																						<class name="Dimensionless"/>
																																																																																																																																						<class name="MonetaryUnit"/>
																																																																																																																																						<class name="RequestUnit"/>
																																																																																																																																						<class name="StorageUnit"/>
																																																																																																																																						<class name="ThroughputUnit"/>
																																																																																																																																						<class name="TimeIntervalUnit"/>
																																																																																																																																						<class name="TransactionUnit"/>
																																																																																																																																						<EEnum name="UnitType">
																																																																																																																																							<EEnumLiteral name="BYTES"/>
																																																																																																																																							<EEnumLiteral name="BYTES_PER_SECOND" value="1"/>
																																																																																																																																							<EEnumLiteral name="KILOBYTES" value="2"/>
																																																																																																																																							<EEnumLiteral name="MEGABYTES" value="3"/>
																																																																																																																																							<EEnumLiteral name="GIGABYTES" value="4"/>
																																																																																																																																							<EEnumLiteral name="MILLISECONDS" value="5"/>
																																																																																																																																							<EEnumLiteral name="SECONDS" value="6"/>
																																																																																																																																							<EEnumLiteral name="MINUTES" value="7"/>
																																																																																																																																							<EEnumLiteral name="HOURS" value="8"/>
																																																																																																																																							<EEnumLiteral name="DAYS" value="9"/>
																																																																																																																																							<EEnumLiteral name="WEEKS" value="10"/>
																																																																																																																																							<EEnumLiteral name="MONTHS" value="11"/>
																																																																																																																																							<EEnumLiteral name="REQUESTS" value="12"/>
																																																																																																																																							<EEnumLiteral name="REQUESTS_PER_SECOND" value="13"/>
																																																																																																																																							<EEnumLiteral name="TRANSACTIONS" value="14"/>
																																																																																																																																							<EEnumLiteral name="TRANSACTIONS_PER_SECOND" value="15"/>
																																																																																																																																							<EEnumLiteral name="CORES" value="16"/>
																																																																																																																																							<EEnumLiteral name="PERCENTAGE" value="17"/>
																																																																																																																																							<EEnumLiteral name="EUROS" value="18"/>
																																																																																																																																							<EEnumLiteral name="POUNDS" value="19"/>
																																																																																																																																							<EEnumLiteral name="DOLLARS" value="20"/>
																																																																																																																																						</EEnum>
																																																																																																																																						<EEnum name="UnitDimensionType">
																																																																																																																																							<EEnumLiteral name="TIME_INTERVAL"/>
																																																																																																																																							<EEnumLiteral name="STORAGE" value="1"/>
																																																																																																																																							<EEnumLiteral name="COST" value="2"/>
																																																																																																																																							<EEnumLiteral name="THROUGHPUT" value="3"/>
																																																																																																																																							<EEnumLiteral name="REQUEST_NUM" value="4"/>
																																																																																																																																							<EEnumLiteral name="TRANSACTION_NUM" value="5"/>
																																																																																																																																							<EEnumLiteral name="DIMENSIONLESS" value="6"/>
																																																																																																																																							<EEnumLiteral name="CORE_NUM" value="7"/>
																																																																																																																																						</EEnum>
																																																																																																																																						<class name="UnitModel">
																																																																																																																																							<ref name="units" upperBound="-1" containment="true" type="Unit"/>
																																																																																																																																						</class>
																																																																																																																																					</package>
																																																																																																																																				</package>
