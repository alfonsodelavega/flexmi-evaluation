@ExtendedMetaData(qualified="false")
@namespace(uri="platform:/resource/com.nokia.carbide.cpp.codescanner/schema/CSConfig.xsd", prefix="CSConfig")
package CSConfig;

import "http://www.eclipse.org/emf/2003/XMLType";

@ExtendedMetaData(name="accessArrayElementWithoutCheck2_._type", kind="empty")
class AccessArrayElementWithoutCheck2Type {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="accessArrayElementWithoutCheck_._type", kind="empty")
class AccessArrayElementWithoutCheckType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="activestart_._type", kind="empty")
class ActivestartType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="activestop_._type", kind="empty")
class ActivestopType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="arguments_._type", kind="elementOnly")
class ArgumentsType {

	@ExtendedMetaData(kind="element", name="input", namespace="##targetNamespace")
	!unique attr type.String[*] input;

	@ExtendedMetaData(kind="element", name="lxr", namespace="##targetNamespace")
	attr type.String lxr;

	@ExtendedMetaData(kind="element", name="lxrversion", namespace="##targetNamespace")
	attr type.String lxrversion;

	@ExtendedMetaData(kind="element", name="outputformat", namespace="##targetNamespace")
	attr type.String outputformat;

	@ExtendedMetaData(kind="element", name="timestampedoutput", namespace="##targetNamespace")
	attr type.String timestampedoutput;
}

@ExtendedMetaData(name="arraypassing_._type", kind="empty")
class ArraypassingType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="arrayptrcleanup_._type", kind="empty")
class ArrayptrcleanupType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="assertdebuginvariant_._type", kind="empty")
class AssertdebuginvariantType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="baddefines_._type", kind="empty")
class BaddefinesType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="baseconstruct_._type", kind="empty")
class BaseconstructType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="callActiveObjectWithoutCheckingOrStopping_._type", kind="empty")
class CallActiveObjectWithoutCheckingOrStoppingType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="canpanic_._type", kind="empty")
class CanpanicType {

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;
}

@ExtendedMetaData(name="categories_._type", kind="elementOnly")
class CategoriesType {

	@ExtendedMetaData(kind="element", name="canpanic", namespace="##targetNamespace")
	!resolve val CanpanicType canpanic;

	@ExtendedMetaData(kind="element", name="codereview", namespace="##targetNamespace")
	!resolve val CodereviewType codereview;

	@ExtendedMetaData(kind="element", name="codingstandards", namespace="##targetNamespace")
	!resolve val CodingstandardsType codingstandards;

	@ExtendedMetaData(kind="element", name="documentation", namespace="##targetNamespace")
	!resolve val DocumentationType documentation;

	@ExtendedMetaData(kind="element", name="functionality", namespace="##targetNamespace")
	!resolve val FunctionalityType functionality;

	@ExtendedMetaData(kind="element", name="legal", namespace="##targetNamespace")
	!resolve val LegalType legal;

	@ExtendedMetaData(kind="element", name="localisation", namespace="##targetNamespace")
	!resolve val LocalisationType localisation;

	@ExtendedMetaData(kind="element", name="other", namespace="##targetNamespace")
	!resolve val OtherType other;

	@ExtendedMetaData(kind="element", name="panic", namespace="##targetNamespace")
	!resolve val PanicType panic;

	@ExtendedMetaData(kind="element", name="performance", namespace="##targetNamespace")
	!resolve val PerformanceType performance;
}

@ExtendedMetaData(name="category_._type")
enum CategoryType {
	canpanic = 0;
	codereview = 1;
	codingstandards = 2;
	documentation = 3;
	functionality = 4;
	legal = 5;
	localisation = 6;
	other = 7;
	panic = 8;
	performance = 9;
}

@ExtendedMetaData(name="category_._type:Object", baseType="category_._type")
datatype CategoryTypeObject : org.eclipse.emf.common.util.Enumerator;

@ExtendedMetaData(name="changenotification_._type", kind="empty")
class ChangenotificationType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="cleanup_._type", kind="empty")
class CleanupType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="codereview_._type", kind="empty")
class CodereviewType {

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;
}

@ExtendedMetaData(name="codescannerConfig_._type", kind="elementOnly")
class CodescannerConfigType {

	@ExtendedMetaData(kind="element", name="arguments", namespace="##targetNamespace")
	!resolve val ArgumentsType arguments;

	@ExtendedMetaData(kind="element", name="customrules", namespace="##targetNamespace")
	!resolve val CustomrulesType customrules;

	@ExtendedMetaData(kind="element", name="sources", namespace="##targetNamespace")
	!resolve val SourcesType sources;

	@ExtendedMetaData(kind="element", name="scripts", namespace="##targetNamespace")
	!resolve val ScriptsType scripts;

	@ExtendedMetaData(kind="element", name="severities", namespace="##targetNamespace")
	!resolve val SeveritiesType severities;

	@ExtendedMetaData(kind="element", name="categories", namespace="##targetNamespace")
	!resolve val CategoriesType categories;
}

@ExtendedMetaData(name="codingstandards_._type", kind="empty")
class CodingstandardsType {

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;
}

@ExtendedMetaData(name="commentcode_._type", kind="empty")
class CommentcodeType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="ConnectAndDontCloseMemberVariable_._type", kind="empty")
class ConnectAndDontCloseMemberVariableType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="connect_._type", kind="empty")
class ConnectType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="constnames_._type", kind="empty")
class ConstnamesType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="consttdescptr_._type", kind="empty")
class ConsttdescptrType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="controlornull_._type", kind="empty")
class ControlornullType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="crepository_._type", kind="empty")
class CrepositoryType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="ctltargettype_._type", kind="empty")
class CtltargettypeType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="customizableicons_._type", kind="elementOnly")
class CustomizableiconsType {

	@ExtendedMetaData(kind="element", name="iconsRE", namespace="##targetNamespace")
	attr type.String[1] iconsRE;

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="customrules_._type", kind="elementOnly")
class CustomrulesType {

	@ExtendedMetaData(kind="element", name="customrule", namespace="##targetNamespace")
	!resolve val CustomruleType[*] customrule;
}

@ExtendedMetaData(name="customrule_._type", kind="elementOnly")
class CustomruleType {

	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	attr type.String[1] name;

	@ExtendedMetaData(kind="element", name="keyword", namespace="##targetNamespace")
	!resolve val KeywordType[+] keyword;

	@ExtendedMetaData(kind="element", name="filetype", namespace="##targetNamespace")
	!unique attr type.String[+] filetype;

	@ExtendedMetaData(kind="element", name="severity", namespace="##targetNamespace")
	attr type.String[1] severity;

	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	attr type.String[1] title;

	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	attr type.String[1] description;

	@ExtendedMetaData(kind="element", name="link", namespace="##targetNamespace")
	attr type.String link;
}

@ExtendedMetaData(name="debugrom_._type", kind="empty")
class DebugromType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="declarename_._type", kind="empty")
class DeclarenameType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="deleteMemberVariable_._type", kind="empty")
class DeleteMemberVariableType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="destructor_._type", kind="empty")
class DestructorType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="documentation_._type", kind="empty")
class DocumentationType {

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;
}

@ExtendedMetaData(name="", kind="mixed")
class DocumentRoot {

	@ExtendedMetaData(kind="elementWildcard", name=":mixed")
	!unique attr ecore.EFeatureMapEntry[*] mixed;

	@ExtendedMetaData(kind="attribute", name="xmlns:prefix")
	transient !resolve val ecore.EStringToStringMapEntry[*] xMLNSPrefixMap;

	@ExtendedMetaData(kind="attribute", name="xsi:schemaLocation")
	transient !resolve val ecore.EStringToStringMapEntry[*] xSISchemaLocation;

	@ExtendedMetaData(kind="element", name="accessArrayElementWithoutCheck", namespace="##targetNamespace")
	volatile transient derived !resolve val AccessArrayElementWithoutCheckType[0..?] accessArrayElementWithoutCheck;

	@ExtendedMetaData(kind="element", name="accessArrayElementWithoutCheck2", namespace="##targetNamespace")
	volatile transient derived !resolve val AccessArrayElementWithoutCheck2Type[0..?] accessArrayElementWithoutCheck2;

	@ExtendedMetaData(kind="element", name="activestart", namespace="##targetNamespace")
	volatile transient derived !resolve val ActivestartType[0..?] activestart;

	@ExtendedMetaData(kind="element", name="activestop", namespace="##targetNamespace")
	volatile transient derived !resolve val ActivestopType[0..?] activestop;

	@ExtendedMetaData(kind="element", name="arguments", namespace="##targetNamespace")
	volatile transient derived !resolve val ArgumentsType[0..?] arguments;

	@ExtendedMetaData(kind="element", name="arraypassing", namespace="##targetNamespace")
	volatile transient derived !resolve val ArraypassingType[0..?] arraypassing;

	@ExtendedMetaData(kind="element", name="arrayptrcleanup", namespace="##targetNamespace")
	volatile transient derived !resolve val ArrayptrcleanupType[0..?] arrayptrcleanup;

	@ExtendedMetaData(kind="element", name="assertdebuginvariant", namespace="##targetNamespace")
	volatile transient derived !resolve val AssertdebuginvariantType[0..?] assertdebuginvariant;

	@ExtendedMetaData(kind="element", name="baddefines", namespace="##targetNamespace")
	volatile transient derived !resolve val BaddefinesType[0..?] baddefines;

	@ExtendedMetaData(kind="element", name="baseconstruct", namespace="##targetNamespace")
	volatile transient derived !resolve val BaseconstructType[0..?] baseconstruct;

	@ExtendedMetaData(kind="element", name="callActiveObjectWithoutCheckingOrStopping", namespace="##targetNamespace")
	volatile transient derived !resolve val CallActiveObjectWithoutCheckingOrStoppingType[0..?] callActiveObjectWithoutCheckingOrStopping;

	@ExtendedMetaData(kind="element", name="canpanic", namespace="##targetNamespace")
	volatile transient derived !resolve val CanpanicType[0..?] canpanic;

	@ExtendedMetaData(kind="element", name="categories", namespace="##targetNamespace")
	volatile transient derived !resolve val CategoriesType[0..?] categories;

	@ExtendedMetaData(kind="element", name="cclassIgnoreRE", namespace="##targetNamespace")
	!unique volatile transient derived attr type.String[0..?] cclassIgnoreRE;

	@ExtendedMetaData(kind="element", name="changenotification", namespace="##targetNamespace")
	volatile transient derived !resolve val ChangenotificationType[0..?] changenotification;

	@ExtendedMetaData(kind="element", name="cleanup", namespace="##targetNamespace")
	volatile transient derived !resolve val CleanupType[0..?] cleanup;

	@ExtendedMetaData(kind="element", name="codereview", namespace="##targetNamespace")
	volatile transient derived !resolve val CodereviewType[0..?] codereview;

	@ExtendedMetaData(kind="element", name="codescannerConfig", namespace="##targetNamespace")
	volatile transient derived !resolve val CodescannerConfigType[0..?] codescannerConfig;

	@ExtendedMetaData(kind="element", name="codingstandards", namespace="##targetNamespace")
	volatile transient derived !resolve val CodingstandardsType[0..?] codingstandards;

	@ExtendedMetaData(kind="element", name="commentcode", namespace="##targetNamespace")
	volatile transient derived !resolve val CommentcodeType[0..?] commentcode;

	@ExtendedMetaData(kind="element", name="connect", namespace="##targetNamespace")
	volatile transient derived !resolve val ConnectType[0..?] connect;

	@ExtendedMetaData(kind="element", name="ConnectAndDontCloseMemberVariable", namespace="##targetNamespace")
	volatile transient derived !resolve val ConnectAndDontCloseMemberVariableType[0..?] connectAndDontCloseMemberVariable;

	@ExtendedMetaData(kind="element", name="constnames", namespace="##targetNamespace")
	volatile transient derived !resolve val ConstnamesType[0..?] constnames;

	@ExtendedMetaData(kind="element", name="consttdescptr", namespace="##targetNamespace")
	volatile transient derived !resolve val ConsttdescptrType[0..?] consttdescptr;

	@ExtendedMetaData(kind="element", name="controlornull", namespace="##targetNamespace")
	volatile transient derived !resolve val ControlornullType[0..?] controlornull;

	@ExtendedMetaData(kind="element", name="crepository", namespace="##targetNamespace")
	volatile transient derived !resolve val CrepositoryType[0..?] crepository;

	@ExtendedMetaData(kind="element", name="ctltargettype", namespace="##targetNamespace")
	volatile transient derived !resolve val CtltargettypeType[0..?] ctltargettype;

	@ExtendedMetaData(kind="element", name="customizableicons", namespace="##targetNamespace")
	volatile transient derived !resolve val CustomizableiconsType[0..?] customizableicons;

	@ExtendedMetaData(kind="element", name="customrule", namespace="##targetNamespace")
	volatile transient derived !resolve val CustomruleType[0..?] customrule;

	@ExtendedMetaData(kind="element", name="customrules", namespace="##targetNamespace")
	volatile transient derived !resolve val CustomrulesType[0..?] customrules;

	@ExtendedMetaData(kind="element", name="debugrom", namespace="##targetNamespace")
	volatile transient derived !resolve val DebugromType[0..?] debugrom;

	@ExtendedMetaData(kind="element", name="declarename", namespace="##targetNamespace")
	volatile transient derived !resolve val DeclarenameType[0..?] declarename;

	@ExtendedMetaData(kind="element", name="deleteMemberVariable", namespace="##targetNamespace")
	volatile transient derived !resolve val DeleteMemberVariableType[0..?] deleteMemberVariable;

	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!unique volatile transient derived attr type.String[0..?] description;

	@ExtendedMetaData(kind="element", name="destructor", namespace="##targetNamespace")
	volatile transient derived !resolve val DestructorType[0..?] destructor;

	@ExtendedMetaData(kind="element", name="documentation", namespace="##targetNamespace")
	volatile transient derived !resolve val DocumentationType[0..?] documentation;

	@ExtendedMetaData(kind="element", name="doubleSemiColon", namespace="##targetNamespace")
	volatile transient derived !resolve val DoubleSemiColonType[0..?] doubleSemiColon;

	@ExtendedMetaData(kind="element", name="driveletters", namespace="##targetNamespace")
	volatile transient derived !resolve val DrivelettersType[0..?] driveletters;

	@ExtendedMetaData(kind="element", name="eikbuttons", namespace="##targetNamespace")
	volatile transient derived !resolve val EikbuttonsType[0..?] eikbuttons;

	@ExtendedMetaData(kind="element", name="eikonenvstatic", namespace="##targetNamespace")
	volatile transient derived !resolve val EikonenvstaticType[0..?] eikonenvstatic;

	@ExtendedMetaData(kind="element", name="enummembers", namespace="##targetNamespace")
	volatile transient derived !resolve val EnummembersType[0..?] enummembers;

	@ExtendedMetaData(kind="element", name="enumnames", namespace="##targetNamespace")
	volatile transient derived !resolve val EnumnamesType[0..?] enumnames;

	@ExtendedMetaData(kind="element", name="exclude", namespace="##targetNamespace")
	!unique volatile transient derived attr type.String[0..?] exclude;

	@ExtendedMetaData(kind="element", name="exportinline", namespace="##targetNamespace")
	volatile transient derived !resolve val ExportinlineType[0..?] exportinline;

	@ExtendedMetaData(kind="element", name="exportpurevirtual", namespace="##targetNamespace")
	volatile transient derived !resolve val ExportpurevirtualType[0..?] exportpurevirtual;

	@ExtendedMetaData(kind="element", name="externaldriveletters", namespace="##targetNamespace")
	volatile transient derived !resolve val ExternaldrivelettersType[0..?] externaldriveletters;

	@ExtendedMetaData(kind="element", name="filetype", namespace="##targetNamespace")
	!unique volatile transient derived attr type.String[0..?] filetype;

	@ExtendedMetaData(kind="element", name="flags", namespace="##targetNamespace")
	volatile transient derived !resolve val FlagsType[0..?] flags;

	@ExtendedMetaData(kind="element", name="foff", namespace="##targetNamespace")
	volatile transient derived !resolve val FoffType[0..?] foff;

	@ExtendedMetaData(kind="element", name="forbiddenwords", namespace="##targetNamespace")
	volatile transient derived !resolve val ForbiddenwordsType[0..?] forbiddenwords;

	@ExtendedMetaData(kind="element", name="forgottoputptroncleanupstack", namespace="##targetNamespace")
	volatile transient derived !resolve val ForgottoputptroncleanupstackType[0..?] forgottoputptroncleanupstack;

	@ExtendedMetaData(kind="element", name="friend", namespace="##targetNamespace")
	volatile transient derived !resolve val FriendType[0..?] friend;

	@ExtendedMetaData(kind="element", name="functionality", namespace="##targetNamespace")
	volatile transient derived !resolve val FunctionalityType[0..?] functionality;

	@ExtendedMetaData(kind="element", name="goto", namespace="##targetNamespace")
	volatile transient derived !resolve val GotoType[0..?] goto;

	@ExtendedMetaData(kind="element", name="high", namespace="##targetNamespace")
	volatile transient derived !resolve val HighType[0..?] high;

	@ExtendedMetaData(kind="element", name="iconsRE", namespace="##targetNamespace")
	!unique volatile transient derived attr type.String[0..?] iconsRE;

	@ExtendedMetaData(kind="element", name="ifassignments", namespace="##targetNamespace")
	volatile transient derived !resolve val IfassignmentsType[0..?] ifassignments;

	@ExtendedMetaData(kind="element", name="ifpreprocessor", namespace="##targetNamespace")
	volatile transient derived !resolve val IfpreprocessorType[0..?] ifpreprocessor;

	@ExtendedMetaData(kind="element", name="inheritanceorder", namespace="##targetNamespace")
	volatile transient derived !resolve val InheritanceorderType[0..?] inheritanceorder;

	@ExtendedMetaData(kind="element", name="input", namespace="##targetNamespace")
	!unique volatile transient derived attr type.String[0..?] input;

	@ExtendedMetaData(kind="element", name="intleaves", namespace="##targetNamespace")
	volatile transient derived !resolve val IntleavesType[0..?] intleaves;

	@ExtendedMetaData(kind="element", name="jmp", namespace="##targetNamespace")
	volatile transient derived !resolve val JmpType[0..?] jmp;

	@ExtendedMetaData(kind="element", name="keyword", namespace="##targetNamespace")
	volatile transient derived !resolve val KeywordType[0..?] keyword;

	@ExtendedMetaData(kind="element", name="leave", namespace="##targetNamespace")
	volatile transient derived !resolve val LeaveType[0..?] leave;

	@ExtendedMetaData(kind="element", name="LeaveNoError", namespace="##targetNamespace")
	volatile transient derived !resolve val LeaveNoErrorType[0..?] leaveNoError;

	@ExtendedMetaData(kind="element", name="leavingoperators", namespace="##targetNamespace")
	volatile transient derived !resolve val LeavingoperatorsType[0..?] leavingoperators;

	@ExtendedMetaData(kind="element", name="legal", namespace="##targetNamespace")
	volatile transient derived !resolve val LegalType[0..?] legal;

	@ExtendedMetaData(kind="element", name="LFunctionCantLeave", namespace="##targetNamespace")
	volatile transient derived !resolve val LFunctionCantLeaveType[0..?] lFunctionCantLeave;

	@ExtendedMetaData(kind="element", name="LFunctionIgnoreRE", namespace="##targetNamespace")
	!unique volatile transient derived attr type.String[0..?] lFunctionIgnoreRE;

	@ExtendedMetaData(kind="element", name="link", namespace="##targetNamespace")
	!unique volatile transient derived attr type.String[0..?] link;

	@ExtendedMetaData(kind="element", name="localisation", namespace="##targetNamespace")
	volatile transient derived !resolve val LocalisationType[0..?] localisation;

	@ExtendedMetaData(kind="element", name="longlines", namespace="##targetNamespace")
	volatile transient derived !resolve val LonglinesType[0..?] longlines;

	@ExtendedMetaData(kind="element", name="low", namespace="##targetNamespace")
	volatile transient derived !resolve val LowType[0..?] low;

	@ExtendedMetaData(kind="element", name="lxr", namespace="##targetNamespace")
	!unique volatile transient derived attr type.String[0..?] lxr;

	@ExtendedMetaData(kind="element", name="lxrversion", namespace="##targetNamespace")
	!unique volatile transient derived attr type.String[0..?] lxrversion;

	@ExtendedMetaData(kind="element", name="magicnumbers", namespace="##targetNamespace")
	volatile transient derived !resolve val MagicnumbersType[0..?] magicnumbers;

	@ExtendedMetaData(kind="element", name="mclassdestructor", namespace="##targetNamespace")
	volatile transient derived !resolve val MclassdestructorType[0..?] mclassdestructor;

	@ExtendedMetaData(kind="element", name="medium", namespace="##targetNamespace")
	volatile transient derived !resolve val MediumType[0..?] medium;

	@ExtendedMetaData(kind="element", name="memberlc", namespace="##targetNamespace")
	volatile transient derived !resolve val MemberlcType[0..?] memberlc;

	@ExtendedMetaData(kind="element", name="membervariablecallld", namespace="##targetNamespace")
	volatile transient derived !resolve val MembervariablecallldType[0..?] membervariablecallld;

	@ExtendedMetaData(kind="element", name="missingcancel", namespace="##targetNamespace")
	volatile transient derived !resolve val MissingcancelType[0..?] missingcancel;

	@ExtendedMetaData(kind="element", name="missingcclass", namespace="##targetNamespace")
	volatile transient derived !resolve val MissingcclassType[0..?] missingcclass;

	@ExtendedMetaData(kind="element", name="mmpsourcepath", namespace="##targetNamespace")
	volatile transient derived !resolve val MmpsourcepathType[0..?] mmpsourcepath;

	@ExtendedMetaData(kind="element", name="multilangrsc", namespace="##targetNamespace")
	volatile transient derived !resolve val MultilangrscType[0..?] multilangrsc;

	@ExtendedMetaData(kind="element", name="multipledeclarations", namespace="##targetNamespace")
	volatile transient derived !resolve val MultipledeclarationsType[0..?] multipledeclarations;

	@ExtendedMetaData(kind="element", name="multipleinheritance", namespace="##targetNamespace")
	volatile transient derived !resolve val MultipleinheritanceType[0..?] multipleinheritance;

	@ExtendedMetaData(kind="element", name="mydocs", namespace="##targetNamespace")
	volatile transient derived !resolve val MydocsType[0..?] mydocs;

	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!unique volatile transient derived attr type.String[0..?] name;

	@ExtendedMetaData(kind="element", name="namespace", namespace="##targetNamespace")
	volatile transient derived !resolve val NamespaceType[0..?] namespace;

	@ExtendedMetaData(kind="element", name="newlreferences", namespace="##targetNamespace")
	volatile transient derived !resolve val NewlreferencesType[0..?] newlreferences;

	@ExtendedMetaData(kind="element", name="noleavetrap", namespace="##targetNamespace")
	volatile transient derived !resolve val NoleavetrapType[0..?] noleavetrap;

	@ExtendedMetaData(kind="element", name="nonconsthbufc", namespace="##targetNamespace")
	volatile transient derived !resolve val NonconsthbufcType[0..?] nonconsthbufc;

	@ExtendedMetaData(kind="element", name="nonconsttdesc", namespace="##targetNamespace")
	volatile transient derived !resolve val NonconsttdescType[0..?] nonconsttdesc;

	@ExtendedMetaData(kind="element", name="nonleavenew", namespace="##targetNamespace")
	volatile transient derived !resolve val NonleavenewType[0..?] nonleavenew;

	@ExtendedMetaData(kind="element", name="nonunicodeskins", namespace="##targetNamespace")
	volatile transient derived !resolve val NonunicodeskinsType[0..?] nonunicodeskins;

	@ExtendedMetaData(kind="element", name="null", namespace="##targetNamespace")
	volatile transient derived !resolve val NullType[0..?] null;

	@ExtendedMetaData(kind="element", name="open", namespace="##targetNamespace")
	volatile transient derived !resolve val OpenType[0..?] open;

	@ExtendedMetaData(kind="element", name="openIgnoreRE", namespace="##targetNamespace")
	!unique volatile transient derived attr type.String[0..?] openIgnoreRE;

	@ExtendedMetaData(kind="element", name="other", namespace="##targetNamespace")
	volatile transient derived !resolve val OtherType[0..?] other;

	@ExtendedMetaData(kind="element", name="outputformat", namespace="##targetNamespace")
	!unique volatile transient derived attr type.String[0..?] outputformat;

	@ExtendedMetaData(kind="element", name="panic", namespace="##targetNamespace")
	volatile transient derived !resolve val PanicType[0..?] panic;

	@ExtendedMetaData(kind="element", name="performance", namespace="##targetNamespace")
	volatile transient derived !resolve val PerformanceType[0..?] performance;

	@ExtendedMetaData(kind="element", name="pointertoarrays", namespace="##targetNamespace")
	volatile transient derived !resolve val PointertoarraysType[0..?] pointertoarrays;

	@ExtendedMetaData(kind="element", name="pragmadisable", namespace="##targetNamespace")
	volatile transient derived !resolve val PragmadisableType[0..?] pragmadisable;

	@ExtendedMetaData(kind="element", name="pragmamessage", namespace="##targetNamespace")
	volatile transient derived !resolve val PragmamessageType[0..?] pragmamessage;

	@ExtendedMetaData(kind="element", name="pragmaother", namespace="##targetNamespace")
	volatile transient derived !resolve val PragmaotherType[0..?] pragmaother;

	@ExtendedMetaData(kind="element", name="privateinheritance", namespace="##targetNamespace")
	volatile transient derived !resolve val PrivateinheritanceType[0..?] privateinheritance;

	@ExtendedMetaData(kind="element", name="pushaddrvar", namespace="##targetNamespace")
	volatile transient derived !resolve val PushaddrvarType[0..?] pushaddrvar;

	@ExtendedMetaData(kind="element", name="pushmember", namespace="##targetNamespace")
	volatile transient derived !resolve val PushmemberType[0..?] pushmember;

	@ExtendedMetaData(kind="element", name="readresource", namespace="##targetNamespace")
	volatile transient derived !resolve val ReadresourceType[0..?] readresource;

	@ExtendedMetaData(kind="element", name="resourcenotoncleanupstack", namespace="##targetNamespace")
	volatile transient derived !resolve val ResourcenotoncleanupstackType[0..?] resourcenotoncleanupstack;

	@ExtendedMetaData(kind="element", name="resourcesonheap", namespace="##targetNamespace")
	volatile transient derived !resolve val ResourcesonheapType[0..?] resourcesonheap;

	@ExtendedMetaData(kind="element", name="returndescriptoroutofscope", namespace="##targetNamespace")
	volatile transient derived !resolve val ReturndescriptoroutofscopeType[0..?] returndescriptoroutofscope;

	@ExtendedMetaData(kind="element", name="rfs", namespace="##targetNamespace")
	volatile transient derived !resolve val RfsType[0..?] rfs;

	@ExtendedMetaData(kind="element", name="rssnames", namespace="##targetNamespace")
	volatile transient derived !resolve val RssnamesType[0..?] rssnames;

	@ExtendedMetaData(kind="element", name="scripts", namespace="##targetNamespace")
	volatile transient derived !resolve val ScriptsType[0..?] scripts;

	@ExtendedMetaData(kind="element", name="severities", namespace="##targetNamespace")
	volatile transient derived !resolve val SeveritiesType[0..?] severities;

	@ExtendedMetaData(kind="element", name="severity", namespace="##targetNamespace")
	!unique volatile transient derived attr type.String[0..?] severity;

	@ExtendedMetaData(kind="element", name="sources", namespace="##targetNamespace")
	volatile transient derived !resolve val SourcesType[0..?] sources;

	@ExtendedMetaData(kind="element", name="stringliterals", namespace="##targetNamespace")
	volatile transient derived !resolve val StringliteralsType[0..?] stringliterals;

	@ExtendedMetaData(kind="element", name="stringsinresourcefiles", namespace="##targetNamespace")
	volatile transient derived !resolve val StringsinresourcefilesType[0..?] stringsinresourcefiles;

	@ExtendedMetaData(kind="element", name="struct", namespace="##targetNamespace")
	volatile transient derived !resolve val StructType[0..?] struct;

	@ExtendedMetaData(kind="element", name="tcclasses", namespace="##targetNamespace")
	volatile transient derived !resolve val TcclassesType[0..?] tcclasses;

	@ExtendedMetaData(kind="element", name="tclassdestructor", namespace="##targetNamespace")
	volatile transient derived !resolve val TclassdestructorType[0..?] tclassdestructor;

	@ExtendedMetaData(kind="element", name="timestampedoutput", namespace="##targetNamespace")
	!unique volatile transient derived attr type.String[0..?] timestampedoutput;

	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!unique volatile transient derived attr type.String[0..?] title;

	@ExtendedMetaData(kind="element", name="todocomments", namespace="##targetNamespace")
	volatile transient derived !resolve val TodocommentsType[0..?] todocomments;

	@ExtendedMetaData(kind="element", name="trapcleanup", namespace="##targetNamespace")
	volatile transient derived !resolve val TrapcleanupType[0..?] trapcleanup;

	@ExtendedMetaData(kind="element", name="trapeleave", namespace="##targetNamespace")
	volatile transient derived !resolve val TrapeleaveType[0..?] trapeleave;

	@ExtendedMetaData(kind="element", name="traprunl", namespace="##targetNamespace")
	volatile transient derived !resolve val TraprunlType[0..?] traprunl;

	@ExtendedMetaData(kind="element", name="trspassing", namespace="##targetNamespace")
	volatile transient derived !resolve val TrspassingType[0..?] trspassing;

	@ExtendedMetaData(kind="element", name="uids", namespace="##targetNamespace")
	volatile transient derived !resolve val UidsType[0..?] uids;

	@ExtendedMetaData(kind="element", name="uncompressedaif", namespace="##targetNamespace")
	volatile transient derived !resolve val UncompressedaifType[0..?] uncompressedaif;

	@ExtendedMetaData(kind="element", name="uncompressedbmp", namespace="##targetNamespace")
	volatile transient derived !resolve val UncompressedbmpType[0..?] uncompressedbmp;

	@ExtendedMetaData(kind="element", name="unicodesource", namespace="##targetNamespace")
	volatile transient derived !resolve val UnicodesourceType[0..?] unicodesource;

	@ExtendedMetaData(kind="element", name="userafter", namespace="##targetNamespace")
	volatile transient derived !resolve val UserafterType[0..?] userafter;

	@ExtendedMetaData(kind="element", name="userfree", namespace="##targetNamespace")
	volatile transient derived !resolve val UserfreeType[0..?] userfree;

	@ExtendedMetaData(kind="element", name="userWaitForRequest", namespace="##targetNamespace")
	volatile transient derived !resolve val UserWaitForRequestType[0..?] userWaitForRequest;

	@ExtendedMetaData(kind="element", name="variablenames", namespace="##targetNamespace")
	volatile transient derived !resolve val VariablenamesType[0..?] variablenames;

	@ExtendedMetaData(kind="element", name="voidparameter", namespace="##targetNamespace")
	volatile transient derived !resolve val VoidparameterType[0..?] voidparameter;

	@ExtendedMetaData(kind="element", name="wordsRE", namespace="##targetNamespace")
	!unique volatile transient derived attr type.String[0..?] wordsRE;

	@ExtendedMetaData(kind="element", name="worryingcomments", namespace="##targetNamespace")
	volatile transient derived !resolve val WorryingcommentsType[0..?] worryingcomments;

	@ExtendedMetaData(kind="element", name="worryRE", namespace="##targetNamespace")
	!unique volatile transient derived attr type.String[0..?] worryRE;

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity1;
}

@ExtendedMetaData(name="doubleSemiColon_._type", kind="empty")
class DoubleSemiColonType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="driveletters_._type", kind="empty")
class DrivelettersType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="eikbuttons_._type", kind="empty")
class EikbuttonsType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="eikonenvstatic_._type", kind="empty")
class EikonenvstaticType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="enummembers_._type", kind="empty")
class EnummembersType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="enumnames_._type", kind="empty")
class EnumnamesType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="exportinline_._type", kind="empty")
class ExportinlineType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="exportpurevirtual_._type", kind="empty")
class ExportpurevirtualType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="externaldriveletters_._type", kind="empty")
class ExternaldrivelettersType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="flags_._type", kind="empty")
class FlagsType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="foff_._type", kind="empty")
class FoffType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="forbiddenwords_._type", kind="elementOnly")
class ForbiddenwordsType {

	@ExtendedMetaData(kind="element", name="wordsRE", namespace="##targetNamespace")
	attr type.String[1] wordsRE;

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="forgottoputptroncleanupstack_._type", kind="empty")
class ForgottoputptroncleanupstackType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="friend_._type", kind="empty")
class FriendType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="functionality_._type", kind="empty")
class FunctionalityType {

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;
}

@ExtendedMetaData(name="goto_._type", kind="empty")
class GotoType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="high_._type", kind="empty")
class HighType {

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;
}

@ExtendedMetaData(name="ifassignments_._type", kind="empty")
class IfassignmentsType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="ifpreprocessor_._type", kind="empty")
class IfpreprocessorType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="inheritanceorder_._type", kind="empty")
class InheritanceorderType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="intleaves_._type", kind="empty")
class IntleavesType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="jmp_._type", kind="empty")
class JmpType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="keyword_._type", kind="simple")
class KeywordType {

	@ExtendedMetaData(name=":0", kind="simple")
	attr type.String value;

	@ExtendedMetaData(kind="attribute", name="type", namespace="##targetNamespace")
	attr type.String[1] type;
}

@ExtendedMetaData(name="LeaveNoError_._type", kind="empty")
class LeaveNoErrorType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="leave_._type", kind="empty")
class LeaveType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="leavingoperators_._type", kind="empty")
class LeavingoperatorsType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="legal_._type", kind="empty")
class LegalType {

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;
}

@ExtendedMetaData(name="LFunctionCantLeave_._type", kind="elementOnly")
class LFunctionCantLeaveType {

	@ExtendedMetaData(kind="element", name="LFunctionIgnoreRE", namespace="##targetNamespace")
	attr type.String[1] lFunctionIgnoreRE;

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="localisation_._type", kind="empty")
class LocalisationType {

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;
}

@ExtendedMetaData(name="longlines_._type", kind="empty")
class LonglinesType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="length", namespace="##targetNamespace")
	unsettable attr type.Int[1] length;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="low_._type", kind="empty")
class LowType {

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;
}

@ExtendedMetaData(name="magicnumbers_._type", kind="empty")
class MagicnumbersType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="mclassdestructor_._type", kind="empty")
class MclassdestructorType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="medium_._type", kind="empty")
class MediumType {

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;
}

@ExtendedMetaData(name="memberlc_._type", kind="empty")
class MemberlcType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="membervariablecallld_._type", kind="empty")
class MembervariablecallldType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="missingcancel_._type", kind="empty")
class MissingcancelType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="missingcclass_._type", kind="elementOnly")
class MissingcclassType {

	@ExtendedMetaData(kind="element", name="cclassIgnoreRE", namespace="##targetNamespace")
	attr type.String[1] cclassIgnoreRE;

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="mmpsourcepath_._type", kind="empty")
class MmpsourcepathType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="multilangrsc_._type", kind="empty")
class MultilangrscType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="multipledeclarations_._type", kind="empty")
class MultipledeclarationsType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="multipleinheritance_._type", kind="empty")
class MultipleinheritanceType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="mydocs_._type", kind="empty")
class MydocsType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="namespace_._type", kind="empty")
class NamespaceType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="newlreferences_._type", kind="empty")
class NewlreferencesType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="noleavetrap_._type", kind="empty")
class NoleavetrapType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="nonconsthbufc_._type", kind="empty")
class NonconsthbufcType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="nonconsttdesc_._type", kind="empty")
class NonconsttdescType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="nonleavenew_._type", kind="empty")
class NonleavenewType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="nonunicodeskins_._type", kind="empty")
class NonunicodeskinsType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="null_._type", kind="empty")
class NullType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="open_._type", kind="elementOnly")
class OpenType {

	@ExtendedMetaData(kind="element", name="openIgnoreRE", namespace="##targetNamespace")
	attr type.String[1] openIgnoreRE;

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="other_._type", kind="empty")
class OtherType {

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;
}

@ExtendedMetaData(name="panic_._type", kind="empty")
class PanicType {

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;
}

@ExtendedMetaData(name="performance_._type", kind="empty")
class PerformanceType {

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;
}

@ExtendedMetaData(name="pointertoarrays_._type", kind="empty")
class PointertoarraysType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="pragmadisable_._type", kind="empty")
class PragmadisableType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="pragmamessage_._type", kind="empty")
class PragmamessageType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="pragmaother_._type", kind="empty")
class PragmaotherType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="privateinheritance_._type", kind="empty")
class PrivateinheritanceType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="pushaddrvar_._type", kind="empty")
class PushaddrvarType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="pushmember_._type", kind="empty")
class PushmemberType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="readresource_._type", kind="empty")
class ReadresourceType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="resourcenotoncleanupstack_._type", kind="empty")
class ResourcenotoncleanupstackType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="resourcesonheap_._type", kind="empty")
class ResourcesonheapType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="returndescriptoroutofscope_._type", kind="empty")
class ReturndescriptoroutofscopeType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="rfs_._type", kind="empty")
class RfsType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="rssnames_._type", kind="empty")
class RssnamesType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="scripts_._type", kind="mixed")
class ScriptsType {

	@ExtendedMetaData(kind="elementWildcard", name=":mixed")
	!unique attr ecore.EFeatureMapEntry[*] mixed;

	@ExtendedMetaData(kind="element", name="accessArrayElementWithoutCheck", namespace="##targetNamespace")
	volatile transient derived !resolve val AccessArrayElementWithoutCheckType accessArrayElementWithoutCheck;

	@ExtendedMetaData(kind="element", name="accessArrayElementWithoutCheck2", namespace="##targetNamespace")
	volatile transient derived !resolve val AccessArrayElementWithoutCheck2Type accessArrayElementWithoutCheck2;

	@ExtendedMetaData(kind="element", name="activestart", namespace="##targetNamespace")
	volatile transient derived !resolve val ActivestartType activestart;

	@ExtendedMetaData(kind="element", name="activestop", namespace="##targetNamespace")
	volatile transient derived !resolve val ActivestopType activestop;

	@ExtendedMetaData(kind="element", name="arraypassing", namespace="##targetNamespace")
	volatile transient derived !resolve val ArraypassingType arraypassing;

	@ExtendedMetaData(kind="element", name="arrayptrcleanup", namespace="##targetNamespace")
	volatile transient derived !resolve val ArrayptrcleanupType arrayptrcleanup;

	@ExtendedMetaData(kind="element", name="assertdebuginvariant", namespace="##targetNamespace")
	volatile transient derived !resolve val AssertdebuginvariantType assertdebuginvariant;

	@ExtendedMetaData(kind="element", name="baddefines", namespace="##targetNamespace")
	volatile transient derived !resolve val BaddefinesType baddefines;

	@ExtendedMetaData(kind="element", name="baseconstruct", namespace="##targetNamespace")
	volatile transient derived !resolve val BaseconstructType baseconstruct;

	@ExtendedMetaData(kind="element", name="callActiveObjectWithoutCheckingOrStopping", namespace="##targetNamespace")
	volatile transient derived !resolve val CallActiveObjectWithoutCheckingOrStoppingType callActiveObjectWithoutCheckingOrStopping;

	@ExtendedMetaData(kind="element", name="changenotification", namespace="##targetNamespace")
	volatile transient derived !resolve val ChangenotificationType changenotification;

	@ExtendedMetaData(kind="element", name="cleanup", namespace="##targetNamespace")
	volatile transient derived !resolve val CleanupType cleanup;

	@ExtendedMetaData(kind="element", name="commentcode", namespace="##targetNamespace")
	volatile transient derived !resolve val CommentcodeType commentcode;

	@ExtendedMetaData(kind="element", name="connect", namespace="##targetNamespace")
	volatile transient derived !resolve val ConnectType connect;

	@ExtendedMetaData(kind="element", name="ConnectAndDontCloseMemberVariable", namespace="##targetNamespace")
	volatile transient derived !resolve val ConnectAndDontCloseMemberVariableType connectAndDontCloseMemberVariable;

	@ExtendedMetaData(kind="element", name="constnames", namespace="##targetNamespace")
	volatile transient derived !resolve val ConstnamesType constnames;

	@ExtendedMetaData(kind="element", name="consttdescptr", namespace="##targetNamespace")
	volatile transient derived !resolve val ConsttdescptrType consttdescptr;

	@ExtendedMetaData(kind="element", name="controlornull", namespace="##targetNamespace")
	volatile transient derived !resolve val ControlornullType controlornull;

	@ExtendedMetaData(kind="element", name="crepository", namespace="##targetNamespace")
	volatile transient derived !resolve val CrepositoryType crepository;

	@ExtendedMetaData(kind="element", name="ctltargettype", namespace="##targetNamespace")
	volatile transient derived !resolve val CtltargettypeType ctltargettype;

	@ExtendedMetaData(kind="element", name="customizableicons", namespace="##targetNamespace")
	volatile transient derived !resolve val CustomizableiconsType customizableicons;

	@ExtendedMetaData(kind="element", name="debugrom", namespace="##targetNamespace")
	volatile transient derived !resolve val DebugromType debugrom;

	@ExtendedMetaData(kind="element", name="declarename", namespace="##targetNamespace")
	volatile transient derived !resolve val DeclarenameType declarename;

	@ExtendedMetaData(kind="element", name="deleteMemberVariable", namespace="##targetNamespace")
	volatile transient derived !resolve val DeleteMemberVariableType deleteMemberVariable;

	@ExtendedMetaData(kind="element", name="destructor", namespace="##targetNamespace")
	volatile transient derived !resolve val DestructorType destructor;

	@ExtendedMetaData(kind="element", name="doubleSemiColon", namespace="##targetNamespace")
	volatile transient derived !resolve val DoubleSemiColonType doubleSemiColon;

	@ExtendedMetaData(kind="element", name="driveletters", namespace="##targetNamespace")
	volatile transient derived !resolve val DrivelettersType driveletters;

	@ExtendedMetaData(kind="element", name="eikbuttons", namespace="##targetNamespace")
	volatile transient derived !resolve val EikbuttonsType eikbuttons;

	@ExtendedMetaData(kind="element", name="eikonenvstatic", namespace="##targetNamespace")
	volatile transient derived !resolve val EikonenvstaticType eikonenvstatic;

	@ExtendedMetaData(kind="element", name="enummembers", namespace="##targetNamespace")
	volatile transient derived !resolve val EnummembersType enummembers;

	@ExtendedMetaData(kind="element", name="enumnames", namespace="##targetNamespace")
	volatile transient derived !resolve val EnumnamesType enumnames;

	@ExtendedMetaData(kind="element", name="exportinline", namespace="##targetNamespace")
	volatile transient derived !resolve val ExportinlineType exportinline;

	@ExtendedMetaData(kind="element", name="exportpurevirtual", namespace="##targetNamespace")
	volatile transient derived !resolve val ExportpurevirtualType exportpurevirtual;

	@ExtendedMetaData(kind="element", name="externaldriveletters", namespace="##targetNamespace")
	volatile transient derived !resolve val ExternaldrivelettersType externaldriveletters;

	@ExtendedMetaData(kind="element", name="flags", namespace="##targetNamespace")
	volatile transient derived !resolve val FlagsType flags;

	@ExtendedMetaData(kind="element", name="foff", namespace="##targetNamespace")
	volatile transient derived !resolve val FoffType foff;

	@ExtendedMetaData(kind="element", name="forbiddenwords", namespace="##targetNamespace")
	volatile transient derived !resolve val ForbiddenwordsType forbiddenwords;

	@ExtendedMetaData(kind="element", name="forgottoputptroncleanupstack", namespace="##targetNamespace")
	volatile transient derived !resolve val ForgottoputptroncleanupstackType forgottoputptroncleanupstack;

	@ExtendedMetaData(kind="element", name="friend", namespace="##targetNamespace")
	volatile transient derived !resolve val FriendType friend;

	@ExtendedMetaData(kind="element", name="goto", namespace="##targetNamespace")
	volatile transient derived !resolve val GotoType goto;

	@ExtendedMetaData(kind="element", name="ifassignments", namespace="##targetNamespace")
	volatile transient derived !resolve val IfassignmentsType ifassignments;

	@ExtendedMetaData(kind="element", name="ifpreprocessor", namespace="##targetNamespace")
	volatile transient derived !resolve val IfpreprocessorType ifpreprocessor;

	@ExtendedMetaData(kind="element", name="inheritanceorder", namespace="##targetNamespace")
	volatile transient derived !resolve val InheritanceorderType inheritanceorder;

	@ExtendedMetaData(kind="element", name="intleaves", namespace="##targetNamespace")
	volatile transient derived !resolve val IntleavesType intleaves;

	@ExtendedMetaData(kind="element", name="jmp", namespace="##targetNamespace")
	volatile transient derived !resolve val JmpType jmp;

	@ExtendedMetaData(kind="element", name="leave", namespace="##targetNamespace")
	volatile transient derived !resolve val LeaveType leave;

	@ExtendedMetaData(kind="element", name="LeaveNoError", namespace="##targetNamespace")
	volatile transient derived !resolve val LeaveNoErrorType leaveNoError;

	@ExtendedMetaData(kind="element", name="leavingoperators", namespace="##targetNamespace")
	volatile transient derived !resolve val LeavingoperatorsType leavingoperators;

	@ExtendedMetaData(kind="element", name="LFunctionCantLeave", namespace="##targetNamespace")
	volatile transient derived !resolve val LFunctionCantLeaveType lFunctionCantLeave;

	@ExtendedMetaData(kind="element", name="longlines", namespace="##targetNamespace")
	volatile transient derived !resolve val LonglinesType longlines;

	@ExtendedMetaData(kind="element", name="magicnumbers", namespace="##targetNamespace")
	volatile transient derived !resolve val MagicnumbersType magicnumbers;

	@ExtendedMetaData(kind="element", name="mclassdestructor", namespace="##targetNamespace")
	volatile transient derived !resolve val MclassdestructorType mclassdestructor;

	@ExtendedMetaData(kind="element", name="memberlc", namespace="##targetNamespace")
	volatile transient derived !resolve val MemberlcType memberlc;

	@ExtendedMetaData(kind="element", name="membervariablecallld", namespace="##targetNamespace")
	volatile transient derived !resolve val MembervariablecallldType membervariablecallld;

	@ExtendedMetaData(kind="element", name="missingcancel", namespace="##targetNamespace")
	volatile transient derived !resolve val MissingcancelType missingcancel;

	@ExtendedMetaData(kind="element", name="missingcclass", namespace="##targetNamespace")
	volatile transient derived !resolve val MissingcclassType missingcclass;

	@ExtendedMetaData(kind="element", name="mmpsourcepath", namespace="##targetNamespace")
	volatile transient derived !resolve val MmpsourcepathType mmpsourcepath;

	@ExtendedMetaData(kind="element", name="multilangrsc", namespace="##targetNamespace")
	volatile transient derived !resolve val MultilangrscType multilangrsc;

	@ExtendedMetaData(kind="element", name="multipledeclarations", namespace="##targetNamespace")
	volatile transient derived !resolve val MultipledeclarationsType multipledeclarations;

	@ExtendedMetaData(kind="element", name="multipleinheritance", namespace="##targetNamespace")
	volatile transient derived !resolve val MultipleinheritanceType multipleinheritance;

	@ExtendedMetaData(kind="element", name="mydocs", namespace="##targetNamespace")
	volatile transient derived !resolve val MydocsType mydocs;

	@ExtendedMetaData(kind="element", name="namespace", namespace="##targetNamespace")
	volatile transient derived !resolve val NamespaceType namespace;

	@ExtendedMetaData(kind="element", name="newlreferences", namespace="##targetNamespace")
	volatile transient derived !resolve val NewlreferencesType newlreferences;

	@ExtendedMetaData(kind="element", name="noleavetrap", namespace="##targetNamespace")
	volatile transient derived !resolve val NoleavetrapType noleavetrap;

	@ExtendedMetaData(kind="element", name="nonconsthbufc", namespace="##targetNamespace")
	volatile transient derived !resolve val NonconsthbufcType nonconsthbufc;

	@ExtendedMetaData(kind="element", name="nonconsttdesc", namespace="##targetNamespace")
	volatile transient derived !resolve val NonconsttdescType nonconsttdesc;

	@ExtendedMetaData(kind="element", name="nonleavenew", namespace="##targetNamespace")
	volatile transient derived !resolve val NonleavenewType nonleavenew;

	@ExtendedMetaData(kind="element", name="nonunicodeskins", namespace="##targetNamespace")
	volatile transient derived !resolve val NonunicodeskinsType nonunicodeskins;

	@ExtendedMetaData(kind="element", name="null", namespace="##targetNamespace")
	volatile transient derived !resolve val NullType null;

	@ExtendedMetaData(kind="element", name="open", namespace="##targetNamespace")
	volatile transient derived !resolve val OpenType open;

	@ExtendedMetaData(kind="element", name="pointertoarrays", namespace="##targetNamespace")
	volatile transient derived !resolve val PointertoarraysType pointertoarrays;

	@ExtendedMetaData(kind="element", name="pragmadisable", namespace="##targetNamespace")
	volatile transient derived !resolve val PragmadisableType pragmadisable;

	@ExtendedMetaData(kind="element", name="pragmamessage", namespace="##targetNamespace")
	volatile transient derived !resolve val PragmamessageType pragmamessage;

	@ExtendedMetaData(kind="element", name="pragmaother", namespace="##targetNamespace")
	volatile transient derived !resolve val PragmaotherType pragmaother;

	@ExtendedMetaData(kind="element", name="privateinheritance", namespace="##targetNamespace")
	volatile transient derived !resolve val PrivateinheritanceType privateinheritance;

	@ExtendedMetaData(kind="element", name="pushaddrvar", namespace="##targetNamespace")
	volatile transient derived !resolve val PushaddrvarType pushaddrvar;

	@ExtendedMetaData(kind="element", name="pushmember", namespace="##targetNamespace")
	volatile transient derived !resolve val PushmemberType pushmember;

	@ExtendedMetaData(kind="element", name="readresource", namespace="##targetNamespace")
	volatile transient derived !resolve val ReadresourceType readresource;

	@ExtendedMetaData(kind="element", name="resourcenotoncleanupstack", namespace="##targetNamespace")
	volatile transient derived !resolve val ResourcenotoncleanupstackType resourcenotoncleanupstack;

	@ExtendedMetaData(kind="element", name="resourcesonheap", namespace="##targetNamespace")
	volatile transient derived !resolve val ResourcesonheapType resourcesonheap;

	@ExtendedMetaData(kind="element", name="returndescriptoroutofscope", namespace="##targetNamespace")
	volatile transient derived !resolve val ReturndescriptoroutofscopeType returndescriptoroutofscope;

	@ExtendedMetaData(kind="element", name="rfs", namespace="##targetNamespace")
	volatile transient derived !resolve val RfsType rfs;

	@ExtendedMetaData(kind="element", name="rssnames", namespace="##targetNamespace")
	volatile transient derived !resolve val RssnamesType rssnames;

	@ExtendedMetaData(kind="element", name="stringliterals", namespace="##targetNamespace")
	volatile transient derived !resolve val StringliteralsType stringliterals;

	@ExtendedMetaData(kind="element", name="stringsinresourcefiles", namespace="##targetNamespace")
	volatile transient derived !resolve val StringsinresourcefilesType stringsinresourcefiles;

	@ExtendedMetaData(kind="element", name="struct", namespace="##targetNamespace")
	volatile transient derived !resolve val StructType struct;

	@ExtendedMetaData(kind="element", name="tcclasses", namespace="##targetNamespace")
	volatile transient derived !resolve val TcclassesType tcclasses;

	@ExtendedMetaData(kind="element", name="tclassdestructor", namespace="##targetNamespace")
	volatile transient derived !resolve val TclassdestructorType tclassdestructor;

	@ExtendedMetaData(kind="element", name="todocomments", namespace="##targetNamespace")
	volatile transient derived !resolve val TodocommentsType todocomments;

	@ExtendedMetaData(kind="element", name="trapcleanup", namespace="##targetNamespace")
	volatile transient derived !resolve val TrapcleanupType trapcleanup;

	@ExtendedMetaData(kind="element", name="trapeleave", namespace="##targetNamespace")
	volatile transient derived !resolve val TrapeleaveType trapeleave;

	@ExtendedMetaData(kind="element", name="traprunl", namespace="##targetNamespace")
	volatile transient derived !resolve val TraprunlType traprunl;

	@ExtendedMetaData(kind="element", name="trspassing", namespace="##targetNamespace")
	volatile transient derived !resolve val TrspassingType trspassing;

	@ExtendedMetaData(kind="element", name="uids", namespace="##targetNamespace")
	volatile transient derived !resolve val UidsType uids;

	@ExtendedMetaData(kind="element", name="uncompressedaif", namespace="##targetNamespace")
	volatile transient derived !resolve val UncompressedaifType uncompressedaif;

	@ExtendedMetaData(kind="element", name="uncompressedbmp", namespace="##targetNamespace")
	volatile transient derived !resolve val UncompressedbmpType uncompressedbmp;

	@ExtendedMetaData(kind="element", name="unicodesource", namespace="##targetNamespace")
	volatile transient derived !resolve val UnicodesourceType unicodesource;

	@ExtendedMetaData(kind="element", name="userafter", namespace="##targetNamespace")
	volatile transient derived !resolve val UserafterType userafter;

	@ExtendedMetaData(kind="element", name="userfree", namespace="##targetNamespace")
	volatile transient derived !resolve val UserfreeType userfree;

	@ExtendedMetaData(kind="element", name="userWaitForRequest", namespace="##targetNamespace")
	volatile transient derived !resolve val UserWaitForRequestType userWaitForRequest;

	@ExtendedMetaData(kind="element", name="variablenames", namespace="##targetNamespace")
	volatile transient derived !resolve val VariablenamesType variablenames;

	@ExtendedMetaData(kind="element", name="voidparameter", namespace="##targetNamespace")
	volatile transient derived !resolve val VoidparameterType voidparameter;

	@ExtendedMetaData(kind="element", name="worryingcomments", namespace="##targetNamespace")
	volatile transient derived !resolve val WorryingcommentsType worryingcomments;
}

@ExtendedMetaData(name="severities_._type", kind="elementOnly")
class SeveritiesType {

	@ExtendedMetaData(kind="element", name="high", namespace="##targetNamespace")
	!resolve val HighType high;

	@ExtendedMetaData(kind="element", name="medium", namespace="##targetNamespace")
	!resolve val MediumType medium;

	@ExtendedMetaData(kind="element", name="low", namespace="##targetNamespace")
	!resolve val LowType low;
}

@ExtendedMetaData(name="severity_._type")
enum SeverityType {
	high = 0;
	low = 1;
	medium = 2;
}

@ExtendedMetaData(name="severity_._type:Object", baseType="severity_._type")
datatype SeverityTypeObject : org.eclipse.emf.common.util.Enumerator;

@ExtendedMetaData(name="sources_._type", kind="elementOnly")
class SourcesType {

	@ExtendedMetaData(kind="element", name="exclude", namespace="##targetNamespace")
	!unique attr type.String[*] exclude;
}

@ExtendedMetaData(name="stringliterals_._type", kind="empty")
class StringliteralsType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="stringsinresourcefiles_._type", kind="empty")
class StringsinresourcefilesType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="struct_._type", kind="empty")
class StructType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="tcclasses_._type", kind="empty")
class TcclassesType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="tclassdestructor_._type", kind="empty")
class TclassdestructorType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="todocomments_._type", kind="empty")
class TodocommentsType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="trapcleanup_._type", kind="empty")
class TrapcleanupType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="trapeleave_._type", kind="empty")
class TrapeleaveType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="traprunl_._type", kind="empty")
class TraprunlType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="trspassing_._type", kind="empty")
class TrspassingType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="uids_._type", kind="empty")
class UidsType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="uncompressedaif_._type", kind="empty")
class UncompressedaifType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="uncompressedbmp_._type", kind="empty")
class UncompressedbmpType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="unicodesource_._type", kind="empty")
class UnicodesourceType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="userafter_._type", kind="empty")
class UserafterType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="userfree_._type", kind="empty")
class UserfreeType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="userWaitForRequest_._type", kind="empty")
class UserWaitForRequestType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="variablenames_._type", kind="empty")
class VariablenamesType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="voidparameter_._type", kind="empty")
class VoidparameterType {

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

@ExtendedMetaData(name="worryingcomments_._type", kind="elementOnly")
class WorryingcommentsType {

	@ExtendedMetaData(kind="element", name="worryRE", namespace="##targetNamespace")
	attr type.String[1] worryRE;

	@ExtendedMetaData(kind="attribute", name="category", namespace="##targetNamespace")
	unsettable attr CategoryType category;

	@ExtendedMetaData(kind="attribute", name="enable", namespace="##targetNamespace")
	unsettable attr type.Boolean[1] enable;

	@ExtendedMetaData(kind="attribute", name="severity", namespace="##targetNamespace")
	unsettable attr SeverityType severity;
}

