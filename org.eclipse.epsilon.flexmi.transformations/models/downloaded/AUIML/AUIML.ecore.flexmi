<?nsuri http://www.eclipse.org/emf/2002/Ecore?>
<?import http://www.eclipse.org/emf/2002/Ecore?>
<package name="AUIML" nsURI="AUIML" nsPrefix="AUIML">
	<class name="Model">
		<ref name="agent" containment="true" type="Agent"/>
		<ref name="messageDefinition" upperBound="-1" containment="true" type="MessageDefinition"/>
	</class>
	<package name="Agent" nsURI="AUIML.Agent" nsPrefix="Agent">
		<class name="Agent">
			<attr name="name" type="//EString"/>
			<ref name="machine" containment="true" type="StateMachine"/>
			<ref name="handlerList" upperBound="-1" containment="true" type="MessageHandler"/>
			<ref name="dataList" upperBound="-1" containment="true" type="AbsData"/>
			<ref name="agents" upperBound="-1" containment="true" type="Agent"/>
		</class>
		<package name="StateMachine" nsURI="AUIML.Agent.StateMachine" nsPrefix="StateMachine">
			<class name="StateMachine">
				<ref name="initial" containment="true" type="Initial"/>
				<ref name="states" upperBound="-1" containment="true" type="Named"/>
			</class>
			<package name="State" nsURI="AUIML.Agent.StateMachine.State" nsPrefix="State">
				<class name="State" abstract="true">
					<ref name="transitionList" upperBound="-1" containment="true" type="Transition"/>
				</class>
				<class name="Named">
					<attr name="name" type="//EString"/>
				</class>
				<class name="Initial"/>
				<class name="Final"/>
				<package name="Transition" nsURI="AUIML.Agent.StateMachine.State.Transition" nsPrefix="Transition">
					<class name="Transition">
						<attr name="name" type="//EString"/>
						<ref name="trigger" lowerBound="1" containment="true" type="TriggerExpression"/>
						<ref name="precondition" lowerBound="1" containment="true" type="PreConditionExpression"/>
						<ref name="rule" lowerBound="1" containment="true" type="Rule"/>
						<ref name="poscondition" lowerBound="1" containment="true" type="PosConditionExpression"/>
						<ref name="action" lowerBound="1" containment="true" type="ActionExpression"/>
						<ref name="stateReference" lowerBound="1" type="State"/>
					</class>
					<package name="Trigger" nsURI="AUIML.Agent.StateMachine.State.Transition.Trigger" nsPrefix="Trigger">
						<class name="TriggerExpressionElement" abstract="true"/>
						<class name="Notification">
							<ref name="message" type="MessageDefinition"/>
						</class>
						<class name="DomainEvent">
							<attr name="name" type="//EString"/>
						</class>
						<class name="TriggerExpression">
							<ref name="expression" lowerBound="1" containment="true" type="TriggerExpressionElement"/>
						</class>
					</package>
					<package name="Precondition" nsURI="AUIML.Agent.StateMachine.State.Transition.Precondition" nsPrefix="Precondition">
						<class name="PreConditionExpressionElement" abstract="true"/>
						<class name="VariableReference">
							<ref name="name" lowerBound="1" type="RegularAtribute"/>
						</class>
						<class name="BinaryOperator">
							<attr name="operator" type="//EString"/>
							<ref name="left" lowerBound="1" containment="true" type="PreConditionExpressionElement"/>
							<ref name="right" lowerBound="1" containment="true" type="PreConditionExpressionElement"/>
						</class>
						<class name="UnaryOperator">
							<attr name="operator" type="//EString"/>
							<ref name="expression" lowerBound="1" containment="true" type="PreConditionExpressionElement"/>
						</class>
						<class name="Literal">
							<attr name="value" type="//EString"/>
						</class>
						<class name="GetData">
							<attr name="field" defaultValueLiteral="name" type="//EString"/>
							<ref name="data" lowerBound="1" type="AbsData"/>
						</class>
						<class name="PreConditionExpression">
							<ref name="expression" lowerBound="1" containment="true" type="PreConditionExpressionElement"/>
						</class>
					</package>
					<package name="Ruling" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling" nsPrefix="Ruling">
						<class name="Rule">
							<ref name="leftSide" lowerBound="1" containment="true" type="LeftHandSide"/>
							<ref name="rightSide" lowerBound="1" containment="true" type="RightHandSide"/>
						</class>
						<package name="RuleLeftHandSide" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleLeftHandSide" nsPrefix="RuleLeftHandSide">
							<class name="LeftHandSide">
								<ref name="system" lowerBound="1" containment="true" type="MatchSystemLayer"/>
								<ref name="user" lowerBound="1" containment="true" type="MatchUserLayer"/>
								<ref name="message" lowerBound="1" containment="true" type="MatchMessageLayer"/>
							</class>
							<class name="MatchMessageLayer">
								<ref name="messagesDefinitions" upperBound="-1" containment="true" type="MatchMessageDefinition"/>
							</class>
							<class name="MatchSystemLayer">
								<ref name="systemComponents" upperBound="-1" containment="true" type="SystemComponent"/>
							</class>
							<class name="MatchVisualLayer">
								<ref name="visualComponents" upperBound="-1" containment="true" type="VisualComponent"/>
							</class>
							<class name="MatchTaskLayer">
								<ref name="taskComponents" upperBound="-1" containment="true" type="TaskComponent"/>
							</class>
							<class name="MatchUserLayer">
								<ref name="visual" lowerBound="1" containment="true" type="MatchVisualLayer"/>
								<ref name="task" lowerBound="1" containment="true" type="MatchTaskLayer"/>
								<ref name="userProfile" lowerBound="1" containment="true" type="UserProfile"/>
							</class>
							<package name="MatchModel" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.MatchModel" nsPrefix="MatchModel">
								<class name="MatchComponent" abstract="true">
									<ref name="name" lowerBound="1" containment="true" type="MatchName"/>
									<ref name="machine" containment="true" type="MatchStateMachine"/>
									<ref name="dataList" upperBound="-1" containment="true" type="AbsMatchData"/>
									<ref name="handlerList" upperBound="-1" containment="true" type="MatchMessageHandler"/>
								</class>
								<class name="SystemComponent">
									<ref name="componentSet" upperBound="-1" containment="true" type="SystemComponent"/>
								</class>
								<class name="UserProfile">
									<ref name="numberOfCompletedTasks" lowerBound="1" containment="true" type="MatchNumberOfCompletedTasks"/>
									<ref name="componentSet" upperBound="-1" containment="true" type="UserProfile"/>
								</class>
								<class name="MatchName"/>
								<class name="MatchNumberOfCompletedTasks"/>
								<package name="MatchExpressions" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.MatchModel.MatchExpressions" nsPrefix="MatchExpressions">
									<package name="MatchRegularExpressions" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.MatchModel.MatchExpressions.MatchRegularExpressions" nsPrefix="MatchRegularExpressions">
										<class name="RegularAtribute">
											<ref name="query" lowerBound="1" containment="true" type="MatchRegularExpression"/>
										</class>
										<class name="Literal">
											<attr name="text" type="//EString"/>
										</class>
										<class name="EndsWith">
											<ref name="condition" containment="true" type="MatchRegularExpression"/>
										</class>
										<class name="StartsWith">
											<ref name="condition" containment="true" type="MatchRegularExpression"/>
										</class>
										<class name="MatchRegularExpression" abstract="true"/>
										<class name="VariableReference">
											<ref name="name" lowerBound="1" type="RegularAtribute"/>
										</class>
										<class name="BinaryOperator">
											<attr name="operator" type="//EString"/>
											<ref name="left" lowerBound="1" containment="true" type="MatchRegularExpression"/>
											<ref name="right" lowerBound="1" containment="true" type="MatchRegularExpression"/>
										</class>
										<class name="UnaryOperator">
											<ref name="expression" lowerBound="1" containment="true" type="MatchRegularExpression"/>
											<attr name="operator" defaultValueLiteral="" type="//EString"/>
										</class>
										<class name="Any"/>
										<class name="And"/>
									</package>
									<package name="MatchNumericExpressions" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.MatchModel.MatchExpressions.MatchNumericExpressions" nsPrefix="MatchNumericExpressions">
										<class name="NumericAttribute">
											<ref name="query" lowerBound="1" containment="true" type="MatchNumericExpression"/>
										</class>
										<class name="Number">
											<attr name="value" type="//EInt"/>
										</class>
										<class name="MatchNumericExpression" abstract="true"/>
										<class name="BinaryOp">
											<attr name="operator" type="//EString"/>
											<ref name="left" lowerBound="1" containment="true" type="MatchNumericExpression"/>
											<ref name="right" lowerBound="1" containment="true" type="MatchNumericExpression"/>
										</class>
										<class name="UnaryOp">
											<ref name="expression" lowerBound="1" containment="true" type="MatchNumericExpression"/>
											<attr name="operator" defaultValueLiteral="" type="//EString"/>
										</class>
										<class name="Reference">
											<ref name="value" lowerBound="1" type="NumericAttribute"/>
										</class>
										<class name="Any"/>
									</package>
								</package>
								<package name="MatchStateMachine" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.MatchModel.MatchStateMachine" nsPrefix="MatchStateMachine">
									<class name="MatchStateMachine">
										<ref name="initial" lowerBound="1" containment="true" type="Initial"/>
										<ref name="states" upperBound="-1" containment="true" type="MatchNamed"/>
									</class>
									<package name="State" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.MatchModel.MatchStateMachine.State" nsPrefix="State">
										<class name="MatchState" abstract="true">
											<ref name="transitionList" upperBound="-1" containment="true" type="MatchTransition"/>
										</class>
										<class name="MatchNamed">
											<ref name="name" lowerBound="1" containment="true" type="MatchName"/>
										</class>
										<class name="Initial"/>
										<class name="Final"/>
										<package name="Transition" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.MatchModel.MatchStateMachine.State.Transition" nsPrefix="Transition">
											<class name="MatchTransition">
												<ref name="name" lowerBound="1" containment="true" type="MatchName"/>
												<ref name="stateReference" lowerBound="1" type="MatchState"/>
												<ref name="trigger" lowerBound="1" containment="true" type="MatchTriggerExpression"/>
												<ref name="precondition" lowerBound="1" containment="true" type="MatchPreConditionExpression"/>
												<ref name="poscondition" lowerBound="1" containment="true" type="MatchPosConditionExpression"/>
												<ref name="action" lowerBound="1" containment="true" type="MatchActionExpression"/>
											</class>
											<package name="Trigger" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.MatchModel.MatchStateMachine.State.Transition.Trigger" nsPrefix="Trigger">
												<class name="MatchTriggerExpressionElement" abstract="true"/>
												<class name="Notification">
													<ref name="message" type="MatchMessageDefinition"/>
												</class>
												<class name="DomainEvent">
													<ref name="name" type="MatchName"/>
												</class>
												<class name="MatchTriggerExpression">
													<ref name="expression" lowerBound="1" containment="true" type="MatchTriggerExpressionElement"/>
												</class>
											</package>
											<package name="Precondition" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.MatchModel.MatchStateMachine.State.Transition.Precondition" nsPrefix="Precondition">
												<class name="MatchPreConditionExpressionElement" abstract="true"/>
												<class name="BinaryOperator">
													<ref name="operator" type="RegularAtribute"/>
													<ref name="left" lowerBound="1" containment="true" type="MatchPreConditionExpressionElement"/>
													<ref name="right" lowerBound="1" containment="true" type="MatchPreConditionExpressionElement"/>
												</class>
												<class name="UnaryOperator">
													<ref name="operator" type="RegularAtribute"/>
													<ref name="expression" lowerBound="1" containment="true" type="MatchPreConditionExpressionElement"/>
												</class>
												<class name="Literal">
													<ref name="value" type="RegularAtribute"/>
												</class>
												<class name="GetData">
													<ref name="field" type="RegularAtribute"/>
													<ref name="data" lowerBound="1" type="AbsMatchData"/>
												</class>
												<class name="GetState">
													<ref name="state" lowerBound="1" type="MatchStateMachine"/>
												</class>
												<class name="DomainPropertyGet">
													<ref name="name" type="RegularAtribute"/>
												</class>
												<class name="Reference">
													<ref name="of" type="Let"/>
												</class>
												<class name="Let">
													<ref name="type" type="RegularAtribute"/>
													<ref name="in" type="MatchPreConditionExpressionElement"/>
													<ref name="initialization" type="MatchPreConditionExpressionElement"/>
												</class>
												<class name="MatchPreConditionExpression">
													<ref name="expression" lowerBound="1" containment="true" type="MatchPreConditionExpressionElement"/>
												</class>
											</package>
											<package name="Poscondition" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.MatchModel.MatchStateMachine.State.Transition.Poscondition" nsPrefix="Poscondition">
												<class name="MatchPosConditionExpressionElement" abstract="true"/>
												<class name="BinaryOperator">
													<ref name="operator" type="RegularAtribute"/>
													<ref name="left" lowerBound="1" containment="true" type="MatchPosConditionExpressionElement"/>
													<ref name="right" lowerBound="1" containment="true" type="MatchPosConditionExpressionElement"/>
												</class>
												<class name="UnaryOperator">
													<ref name="operator" type="RegularAtribute"/>
													<ref name="expression" lowerBound="1" containment="true" type="MatchPosConditionExpressionElement"/>
												</class>
												<class name="Literal">
													<ref name="value" type="RegularAtribute"/>
												</class>
												<class name="GetData">
													<ref name="field" type="RegularAtribute"/>
													<ref name="data" lowerBound="1" type="AbsMatchData"/>
												</class>
												<class name="SetData">
													<ref name="field" type="RegularAtribute"/>
													<ref name="data" lowerBound="1" type="AbsMatchData"/>
													<ref name="value" lowerBound="1" type="MatchPosConditionExpressionElement"/>
												</class>
												<class name="GetState">
													<ref name="state" lowerBound="1" type="MatchStateMachine"/>
												</class>
												<class name="DomainPropertyGet">
													<ref name="name" type="RegularAtribute"/>
												</class>
												<class name="Reference">
													<ref name="of" type="Let"/>
												</class>
												<class name="Let">
													<ref name="type" type="RegularAtribute"/>
													<ref name="in" type="MatchPosConditionExpressionElement"/>
													<ref name="initialization" type="MatchPosConditionExpressionElement"/>
												</class>
												<class name="MatchPosConditionExpression">
													<ref name="expression" lowerBound="1" containment="true" type="MatchPosConditionExpressionElement"/>
												</class>
											</package>
											<package name="Action" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.MatchModel.MatchStateMachine.State.Transition.Action" nsPrefix="Action">
												<class name="MatchActionExpressionElement" abstract="true"/>
												<class name="BinaryOperator">
													<ref name="operator" type="RegularAtribute"/>
													<ref name="left" lowerBound="1" containment="true" type="MatchActionExpressionElement"/>
													<ref name="right" lowerBound="1" containment="true" type="MatchActionExpressionElement"/>
												</class>
												<class name="UnaryOperator">
													<ref name="operator" type="RegularAtribute"/>
													<ref name="expression" lowerBound="1" containment="true" type="MatchActionExpressionElement"/>
												</class>
												<class name="Literal">
													<ref name="value" type="RegularAtribute"/>
												</class>
												<class name="GetData">
													<ref name="field" type="RegularAtribute"/>
													<ref name="data" type="AbsMatchData"/>
												</class>
												<class name="EnableRouting">
													<ref name="value" type="NumericAttribute"/>
													<ref name="type" type="MatchMessageDefinition"/>
												</class>
												<class name="Invocation">
													<ref name="type" type="MatchMessageDefinition"/>
													<ref name="actualList" upperBound="-1" type="MatchActionExpressionElement"/>
													<ref name="isTopDown" type="NumericAttribute"/>
												</class>
												<class name="GetState">
													<ref name="state" lowerBound="1" type="MatchStateMachine"/>
												</class>
												<class name="DomainPropertyGet">
													<ref name="name" type="RegularAtribute"/>
												</class>
												<class name="DomainPropertySet">
													<ref name="name" type="RegularAtribute"/>
													<ref name="value" lowerBound="1" type="MatchActionExpressionElement"/>
												</class>
												<class name="Reference">
													<ref name="of" type="Let"/>
												</class>
												<class name="Let">
													<ref name="type" type="RegularAtribute"/>
													<ref name="in" type="MatchActionExpressionElement"/>
													<ref name="initialization" type="MatchActionExpressionElement"/>
												</class>
												<class name="MatchActionExpression">
													<ref name="expression" lowerBound="1" containment="true" type="MatchActionExpressionElement"/>
												</class>
											</package>
										</package>
									</package>
								</package>
								<package name="MatchMessageDefinition" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.MatchModel.MatchMessageDefinition" nsPrefix="MatchMessageDefinition">
									<class name="MatchMessageDefinition">
										<ref name="name" containment="true" type="MatchMessageName"/>
										<ref name="dataList" upperBound="-1" containment="true" type="Data"/>
										<ref name="parameterList" upperBound="-1" containment="true" type="Parameter"/>
									</class>
									<class name="MatchMessageName"/>
								</package>
								<package name="MatchData" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.MatchModel.MatchData" nsPrefix="MatchData">
									<class name="AbsMatchData" abstract="true">
										<ref name="name" containment="true" type="MatchDataName"/>
										<ref name="type" containment="true" type="MatchDataType"/>
										<ref name="initvalue" containment="true" type="MatchDataInitialValue"/>
									</class>
									<class name="Parameter"/>
									<class name="MatchDataName"/>
									<class name="MatchDataType"/>
									<class name="MatchDataInitialValue"/>
									<class name="Data"/>
								</package>
								<package name="MatchHandlerMachine" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.MatchModel.MatchHandlerMachine" nsPrefix="MatchHandlerMachine">
									<class name="MatchMessageHandler">
										<ref name="message" type="MatchMessageDefinition"/>
										<ref name="initial" containment="true" type="Initial"/>
										<ref name="states" upperBound="-1" containment="true" type="MatchNamedHandler"/>
									</class>
									<package name="MatchHandlerState" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.MatchModel.MatchHandlerMachine.MatchHandlerState" nsPrefix="MatchHandlerState">
										<class name="MatchHandlerState" abstract="true">
											<ref name="transitionList" upperBound="-1" containment="true" type="MatchHandlerTransition"/>
										</class>
										<class name="MatchNamedHandler">
											<ref name="name" type="MatchName"/>
										</class>
										<class name="Initial"/>
										<class name="Final"/>
										<package name="MatchHandlerTransition" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.MatchModel.MatchHandlerMachine.MatchHandlerState.MatchHandlerTransition" nsPrefix="MatchHandlerTransition">
											<class name="MatchHandlerTransition">
												<ref name="name" lowerBound="1" containment="true" type="MatchName"/>
												<ref name="precondition" lowerBound="1" containment="true" type="MatchHandlerPreConditionExpression"/>
												<ref name="poscondition" lowerBound="1" containment="true" type="MatchHandlerPosConditionExpression"/>
												<ref name="action" lowerBound="1" containment="true" type="MatchHandlerActionExpression"/>
												<ref name="stateReference" lowerBound="1" type="MatchHandlerState"/>
											</class>
											<package name="Precondition" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.MatchModel.MatchHandlerMachine.MatchHandlerState.MatchHandlerTransition.Precondition" nsPrefix="Precondition">
												<class name="MatchHandlerPreConditionExpressionElement" abstract="true"/>
												<class name="BinaryOperator">
													<ref name="operator" type="RegularAtribute"/>
													<ref name="left" lowerBound="1" containment="true" type="MatchHandlerPreConditionExpressionElement"/>
													<ref name="right" lowerBound="1" containment="true" type="MatchHandlerPreConditionExpressionElement"/>
												</class>
												<class name="UnaryOperator">
													<ref name="expression" lowerBound="1" containment="true" type="MatchHandlerPreConditionExpressionElement"/>
													<ref name="operator" type="RegularAtribute"/>
												</class>
												<class name="Literal">
													<ref name="value" type="RegularAtribute"/>
												</class>
												<class name="GetData">
													<ref name="data" lowerBound="1" type="AbsData"/>
													<ref name="field" type="RegularAtribute"/>
												</class>
												<class name="GetState">
													<ref name="state" lowerBound="1" type="MatchStateMachine"/>
												</class>
												<class name="GetMessageData">
													<ref name="field" type="RegularAtribute"/>
												</class>
												<class name="GetMessageParameter">
													<ref name="field" type="RegularAtribute"/>
												</class>
												<class name="DomainPropertyGet">
													<ref name="name" type="RegularAtribute"/>
												</class>
												<class name="Reference">
													<ref name="of" type="Let"/>
												</class>
												<class name="Let">
													<ref name="type" type="RegularAtribute"/>
													<ref name="in" type="MatchHandlerPreConditionExpressionElement"/>
													<ref name="initialization" type="MatchHandlerPreConditionExpressionElement"/>
												</class>
												<class name="MatchHandlerPreConditionExpression">
													<ref name="expression" lowerBound="1" containment="true" type="MatchHandlerPreConditionExpressionElement"/>
												</class>
											</package>
											<package name="Poscondition" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.MatchModel.MatchHandlerMachine.MatchHandlerState.MatchHandlerTransition.Poscondition" nsPrefix="Poscondition">
												<class name="MatchHandlerPosConditionExpressionElement" abstract="true"/>
												<class name="BinaryOperator">
													<ref name="left" lowerBound="1" containment="true" type="MatchHandlerPosConditionExpressionElement"/>
													<ref name="right" lowerBound="1" containment="true" type="MatchHandlerPosConditionExpressionElement"/>
													<ref name="operator" type="RegularAtribute"/>
												</class>
												<class name="UnaryOperator">
													<ref name="expression" lowerBound="1" containment="true" type="MatchHandlerPosConditionExpressionElement"/>
													<ref name="operator" type="RegularAtribute"/>
												</class>
												<class name="Literal">
													<ref name="value" type="RegularAtribute"/>
												</class>
												<class name="GetData">
													<ref name="field" type="RegularAtribute"/>
													<ref name="data" type="AbsMatchData"/>
												</class>
												<class name="SetData">
													<ref name="value" lowerBound="1" type="MatchHandlerPosConditionExpressionElement"/>
													<ref name="field" type="RegularAtribute"/>
													<ref name="data" type="AbsMatchData"/>
												</class>
												<class name="GetState">
													<ref name="state" lowerBound="1" type="MatchStateMachine"/>
												</class>
												<class name="GetMessageData">
													<ref name="field" type="RegularAtribute"/>
												</class>
												<class name="GetMessageParameter">
													<ref name="field" type="RegularAtribute"/>
												</class>
												<class name="SetTopDown">
													<ref name="value" lowerBound="1" type="MatchHandlerPosConditionExpressionElement"/>
												</class>
												<class name="SetMessageData">
													<ref name="value" lowerBound="1" type="MatchHandlerPosConditionExpressionElement"/>
													<ref name="field" type="RegularAtribute"/>
												</class>
												<class name="SetMessageParameter">
													<ref name="value" lowerBound="1" type="MatchHandlerPosConditionExpressionElement"/>
													<ref name="field" type="RegularAtribute"/>
												</class>
												<class name="DomainPropertyGet">
													<ref name="name" type="RegularAtribute"/>
												</class>
												<class name="Reference">
													<ref name="of" type="Let"/>
												</class>
												<class name="Let">
													<ref name="type" type="RegularAtribute"/>
													<ref name="in" type="MatchHandlerPosConditionExpressionElement"/>
													<ref name="initialization" type="MatchHandlerPosConditionExpressionElement"/>
												</class>
												<class name="MatchHandlerPosConditionExpression">
													<ref name="expression" lowerBound="1" containment="true" type="MatchHandlerPosConditionExpressionElement"/>
												</class>
											</package>
											<package name="Action" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.MatchModel.MatchHandlerMachine.MatchHandlerState.MatchHandlerTransition.Action" nsPrefix="Action">
												<class name="MatchHandlerActionExpressionElement" abstract="true"/>
												<class name="BinaryOperator">
													<ref name="operator" type="RegularAtribute"/>
													<ref name="left" lowerBound="1" containment="true" type="MatchHandlerActionExpressionElement"/>
													<ref name="right" lowerBound="1" containment="true" type="MatchHandlerActionExpressionElement"/>
												</class>
												<class name="UnaryOperator">
													<ref name="operator" type="RegularAtribute"/>
													<ref name="expression" lowerBound="1" containment="true" type="MatchHandlerActionExpressionElement"/>
												</class>
												<class name="Literal">
													<ref name="value" type="RegularAtribute"/>
												</class>
												<class name="GetData">
													<ref name="field" type="RegularAtribute"/>
													<ref name="data" type="AbsMatchData"/>
												</class>
												<class name="EnableRouting">
													<ref name="type" type="MatchMessageDefinition"/>
													<ref name="value" type="NumericAttribute"/>
												</class>
												<class name="Invocation">
													<ref name="actuaList" upperBound="-1" type="MatchHandlerActionExpressionElement"/>
													<ref name="type" type="MatchMessageDefinition"/>
													<ref name="isTopDown" type="NumericAttribute"/>
												</class>
												<class name="GetState">
													<ref name="state" lowerBound="1" type="MatchStateMachine"/>
												</class>
												<class name="GetMessageData">
													<ref name="field" type="RegularAtribute"/>
												</class>
												<class name="GetMessageParameter">
													<ref name="field" type="RegularAtribute"/>
												</class>
												<class name="DomainPropertyGet">
													<ref name="name" type="RegularAtribute"/>
												</class>
												<class name="DomainPropertySet">
													<ref name="name" type="RegularAtribute"/>
													<ref name="value" lowerBound="1" type="MatchHandlerActionExpressionElement"/>
												</class>
												<class name="Reference">
													<ref name="of" type="Let"/>
												</class>
												<class name="Let">
													<ref name="type" type="RegularAtribute"/>
													<ref name="in" type="MatchHandlerActionExpressionElement"/>
													<ref name="initialization" type="MatchHandlerActionExpressionElement"/>
												</class>
												<class name="MatchHandlerActionExpression">
													<ref name="expression" lowerBound="1" containment="true" type="MatchHandlerActionExpressionElement"/>
												</class>
											</package>
										</package>
									</package>
								</package>
								<package name="MatchVisualComponent" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.MatchModel.MatchVisualComponent" nsPrefix="MatchVisualComponent">
									<class name="MatchGeometryData" abstract="true"/>
									<class name="MatchFace">
										<ref name="labelText" lowerBound="1" containment="true" type="MatchLabel"/>
										<ref name="point3D" lowerBound="3" upperBound="-1" containment="true" type="Point3D"/>
									</class>
									<class name="GeometryData3D">
										<ref name="face" upperBound="-1" containment="true" type="MatchFace"/>
									</class>
									<class name="GeometryData2D">
										<ref name="labelText" lowerBound="1" containment="true" type="MatchLabel"/>
										<ref name="point2D" lowerBound="3" upperBound="-1" containment="true" type="Point2D"/>
									</class>
									<class name="Point2D"/>
									<class name="MatchPoint">
										<ref name="yCoordinate" lowerBound="1" containment="true" type="MatchYValue"/>
										<ref name="xCoordinate" lowerBound="1" containment="true" type="MatchXValue"/>
									</class>
									<class name="Point3D">
										<ref name="zCoordinate" lowerBound="1" containment="true" type="MatchZValue"/>
									</class>
									<class name="VisualComponent">
										<ref name="geometryData" containment="true" type="MatchGeometryData"/>
										<ref name="colorData" containment="true" type="MatchColorData"/>
										<ref name="componentSet" upperBound="-1" containment="true" type="VisualComponent"/>
									</class>
									<class name="MatchColorData">
										<ref name="disabledColors" containment="true" type="MatchColorState"/>
										<ref name="normalColors" containment="true" type="MatchColorState"/>
										<ref name="selectedColors" containment="true" type="MatchColorState"/>
									</class>
									<class name="MatchColorState">
										<ref name="alphaTransparency" containment="true" type="MatchAlphaTransparency"/>
										<ref name="backgroundColor" containment="true" type="MatchColor"/>
										<ref name="foregroundColor" containment="true" type="MatchColor"/>
									</class>
									<class name="MatchColor">
										<ref name="ambienceColor" containment="true" type="MatchRGBColor"/>
										<ref name="specularColor" containment="true" type="MatchRGBColor"/>
										<ref name="difuseColor" containment="true" type="MatchRGBColor"/>
									</class>
									<class name="MatchAlphaTransparency">
										<ref name="value" containment="true" type="MatchTransparencyValue"/>
									</class>
									<class name="MatchRGBColor">
										<ref name="redValue" containment="true" type="MatchRedValue"/>
										<ref name="greenValue" containment="true" type="MatchGreenValue"/>
										<ref name="blueValue" containment="true" type="MatchBlueValue"/>
									</class>
									<class name="MatchRedValue"/>
									<class name="MatchGreenValue"/>
									<class name="MatchBlueValue"/>
									<class name="MatchTransparencyValue"/>
									<class name="MatchZValue"/>
									<class name="MatchYValue"/>
									<class name="MatchXValue"/>
									<class name="MatchLabel"/>
								</package>
								<package name="MatchTaskComponent" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.MatchModel.MatchTaskComponent" nsPrefix="MatchTaskComponent">
									<class name="MatchGoal">
										<ref name="condition" lowerBound="1" containment="true" type="MatchGoalCondition"/>
									</class>
									<class name="TaskComponent">
										<ref name="numberOfGoalsCompleted" lowerBound="1" containment="true" type="MatchNumberOfGoalsCompleted"/>
										<ref name="completionTime" lowerBound="1" containment="true" type="MatchCompletionTime"/>
										<ref name="goal" upperBound="-1" containment="true" type="MatchGoal"/>
										<ref name="componentSet" upperBound="-1" containment="true" type="TaskComponent"/>
									</class>
									<class name="MatchGoalCondition"/>
									<class name="MatchCompletionTime"/>
									<class name="MatchNumberOfGoalsCompleted"/>
								</package>
							</package>
						</package>
						<package name="RuleRightHandSide" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide" nsPrefix="RuleRightHandSide">
							<class name="RightHandSide">
								<ref name="message" lowerBound="1" containment="true" type="ApplyMessageLayer"/>
								<ref name="user" lowerBound="1" containment="true" type="ApplyUserLayer"/>
							</class>
							<class name="ApplyMessageLayer">
								<ref name="messagesDefinitions" upperBound="-1" containment="true" type="ApplyMessageDefinition"/>
							</class>
							<class name="ApplyVisualLayer">
								<ref name="visualComponents" upperBound="-1" containment="true" type="VisualComponent"/>
							</class>
							<class name="ApplyTaskLayer">
								<ref name="taskComponents" upperBound="-1" containment="true" type="TaskComponent"/>
							</class>
							<class name="ApplyUserLayer">
								<ref name="visual" lowerBound="1" containment="true" type="ApplyVisualLayer"/>
								<ref name="task" lowerBound="1" containment="true" type="ApplyTaskLayer"/>
								<ref name="userProfile" lowerBound="1" containment="true" type="UserProfile"/>
							</class>
							<package name="ApplyModel" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.ApplyModel" nsPrefix="ApplyModel">
								<class name="ApplyComponent" abstract="true">
									<ref name="name" lowerBound="1" containment="true" type="ApplyName"/>
									<ref name="machine" containment="true" type="ApplyStateMachine"/>
									<ref name="dataList" upperBound="-1" containment="true" type="AbsApplyData"/>
									<ref name="handlerList" upperBound="-1" containment="true" type="ApplyMessageHandler"/>
								</class>
								<class name="UserProfile">
									<ref name="numberOfCompletedTasks" lowerBound="1" containment="true" type="ApplyNumericExpression"/>
									<ref name="componentSet" upperBound="-1" containment="true" type="UserProfile"/>
								</class>
								<class name="ApplyName"/>
								<package name="ApplyExpressions" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.ApplyModel.ApplyExpressions" nsPrefix="ApplyExpressions">
									<package name="ApplyRegularExpressions" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.ApplyModel.ApplyExpressions.ApplyRegularExpressions" nsPrefix="ApplyRegularExpressions">
										<class name="ApplyRegularExpression" abstract="true"/>
										<class name="VariableReference">
											<ref name="name" lowerBound="1" type="RegularAtribute"/>
										</class>
										<class name="Literal">
											<attr name="text" type="//EString"/>
										</class>
										<class name="ConcatOp">
											<ref name="leftexpression" lowerBound="1" containment="true" type="ApplyRegularExpression"/>
											<ref name="rightexpression" lowerBound="1" containment="true" type="ApplyRegularExpression"/>
											<attr name="name" type="//EString"/>
										</class>
										<class name="BinaryOp">
											<ref name="left" lowerBound="1" containment="true" type="ApplyRegularExpression"/>
											<ref name="right" lowerBound="1" containment="true" type="ApplyRegularExpression"/>
											<attr name="operator" type="//EString"/>
										</class>
										<class name="UnaryOp">
											<ref name="expression" containment="true" type="ApplyRegularExpression"/>
											<attr name="operator" type="//EString"/>
										</class>
										<class name="ApplyRegularAttribute">
											<ref name="query" lowerBound="1" containment="true" type="ApplyRegularExpression"/>
										</class>
									</package>
									<package name="ApplyNumericExpressions" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.ApplyModel.ApplyExpressions.ApplyNumericExpressions" nsPrefix="ApplyNumericExpressions">
										<class name="ApplyNumericExpression" abstract="true"/>
										<class name="Number">
											<attr name="value" type="//EInt"/>
										</class>
										<class name="BinaryOp">
											<attr name="operator" type="//EString"/>
											<ref name="left" lowerBound="1" containment="true" type="ApplyNumericExpression"/>
											<ref name="right" lowerBound="1" containment="true" type="ApplyNumericExpression"/>
										</class>
										<class name="UnaryOp">
											<ref name="expression" lowerBound="1" containment="true" type="ApplyNumericExpression"/>
											<attr name="operator" defaultValueLiteral="" type="//EString"/>
										</class>
										<class name="Any"/>
										<class name="Reference">
											<ref name="name" lowerBound="1" type="NumericAttribute"/>
										</class>
										<class name="ApplyNumericAttribute">
											<ref name="query" lowerBound="1" containment="true" type="ApplyNumericExpression"/>
										</class>
									</package>
								</package>
								<package name="ApplyStateMachine" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.ApplyModel.ApplyStateMachine" nsPrefix="ApplyStateMachine">
									<class name="ApplyStateMachine">
										<ref name="initial" lowerBound="1" containment="true" type="Initial"/>
										<ref name="states" upperBound="-1" containment="true" type="ApplyNamed"/>
									</class>
									<package name="State" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.ApplyModel.ApplyStateMachine.State" nsPrefix="State">
										<class name="ApplyState" abstract="true">
											<ref name="transitionList" upperBound="-1" containment="true" type="ApplyTransition"/>
										</class>
										<class name="ApplyNamed">
											<ref name="name" lowerBound="1" containment="true" type="ApplyName"/>
										</class>
										<class name="Initial"/>
										<class name="Final"/>
										<package name="Transition" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.ApplyModel.ApplyStateMachine.State.Transition" nsPrefix="Transition">
											<class name="ApplyTransition">
												<ref name="name" lowerBound="1" containment="true" type="ApplyName"/>
												<ref name="stateRef" lowerBound="1" type="ApplyState"/>
												<ref name="trigger" lowerBound="1" containment="true" type="ApplyTriggerExpression"/>
												<ref name="precondition" lowerBound="1" containment="true" type="ApplyPreConditionExpression"/>
												<ref name="poscondition" lowerBound="1" containment="true" type="ApplyPosConditionExpression"/>
												<ref name="action" lowerBound="1" containment="true" type="ApplyActionExpression"/>
											</class>
											<package name="Trigger" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.ApplyModel.ApplyStateMachine.State.Transition.Trigger" nsPrefix="Trigger">
												<class name="ApplyTriggerExpressionElement" abstract="true"/>
												<class name="Notification">
													<ref name="message" type="ApplyMessageDefinition"/>
												</class>
												<class name="DomainEvent">
													<ref name="name" type="ApplyName"/>
												</class>
												<class name="ApplyTriggerExpression">
													<ref name="expression" lowerBound="1" containment="true" type="ApplyTriggerExpressionElement"/>
												</class>
											</package>
											<package name="Precondition" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.ApplyModel.ApplyStateMachine.State.Transition.Precondition" nsPrefix="Precondition">
												<class name="ApplyPreConditionExpressionElement" abstract="true"/>
												<class name="BinaryOperator">
													<ref name="operator" type="ApplyRegularExpression"/>
													<ref name="left" lowerBound="1" containment="true" type="ApplyPreConditionExpressionElement"/>
													<ref name="right" lowerBound="1" containment="true" type="ApplyPreConditionExpressionElement"/>
												</class>
												<class name="UnaryOperator">
													<ref name="operator" type="ApplyRegularExpression"/>
													<ref name="expression" lowerBound="1" containment="true" type="ApplyPreConditionExpressionElement"/>
												</class>
												<class name="Literal">
													<ref name="value" type="ApplyRegularExpression"/>
												</class>
												<class name="GetData">
													<ref name="field" type="ApplyRegularExpression"/>
													<ref name="data" lowerBound="1" type="AbsApplyData"/>
												</class>
												<class name="GetState">
													<ref name="state" lowerBound="1" type="ApplyStateMachine"/>
												</class>
												<class name="DomainPropertyGet">
													<ref name="name" type="ApplyRegularExpression"/>
												</class>
												<class name="Reference">
													<ref name="of" lowerBound="1" type="Let"/>
												</class>
												<class name="Let">
													<ref name="type" lowerBound="1" type="ApplyRegularExpression"/>
													<ref name="in" lowerBound="1" type="ApplyPreConditionExpressionElement"/>
													<ref name="initialization" lowerBound="1" type="ApplyPreConditionExpressionElement"/>
												</class>
												<class name="ApplyPreConditionExpression">
													<ref name="expression" lowerBound="1" containment="true" type="ApplyPreConditionExpressionElement"/>
												</class>
											</package>
											<package name="Poscondition" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.ApplyModel.ApplyStateMachine.State.Transition.Poscondition" nsPrefix="Poscondition">
												<class name="ApplyPosConditionExpressionElement" abstract="true"/>
												<class name="BinaryOperator">
													<ref name="operator" type="ApplyRegularExpression"/>
													<ref name="left" lowerBound="1" containment="true" type="ApplyPosConditionExpressionElement"/>
													<ref name="right" lowerBound="1" containment="true" type="ApplyPosConditionExpressionElement"/>
												</class>
												<class name="UnaryOperator">
													<ref name="operator" type="ApplyRegularExpression"/>
													<ref name="expression" lowerBound="1" containment="true" type="ApplyPosConditionExpressionElement"/>
												</class>
												<class name="Literal">
													<ref name="value" type="ApplyRegularExpression"/>
												</class>
												<class name="GetData">
													<ref name="field" type="ApplyRegularExpression"/>
													<ref name="data" lowerBound="1" type="AbsApplyData"/>
												</class>
												<class name="SetData">
													<ref name="field" type="ApplyRegularExpression"/>
													<ref name="data" lowerBound="1" type="AbsApplyData"/>
													<ref name="value" lowerBound="1" type="ApplyPosConditionExpressionElement"/>
												</class>
												<class name="GetState">
													<ref name="state" lowerBound="1" type="ApplyStateMachine"/>
												</class>
												<class name="DomainPropertyGet">
													<ref name="name" type="ApplyRegularExpression"/>
												</class>
												<class name="Reference">
													<ref name="of" lowerBound="1" type="Let"/>
												</class>
												<class name="Let">
													<ref name="type" lowerBound="1" type="ApplyRegularExpression"/>
													<ref name="in" lowerBound="1" type="ApplyPosConditionExpressionElement"/>
													<ref name="initialization" lowerBound="1" type="ApplyPosConditionExpressionElement"/>
												</class>
												<class name="ApplyPosConditionExpression">
													<ref name="expression" lowerBound="1" containment="true" type="ApplyPosConditionExpressionElement"/>
												</class>
											</package>
											<package name="Action" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.ApplyModel.ApplyStateMachine.State.Transition.Action" nsPrefix="Action">
												<class name="ApplyActionExpressionElement" abstract="true"/>
												<class name="BinaryOperator">
													<ref name="operator" type="ApplyRegularExpression"/>
													<ref name="left" lowerBound="1" containment="true" type="ApplyActionExpressionElement"/>
													<ref name="right" lowerBound="1" containment="true" type="ApplyActionExpressionElement"/>
												</class>
												<class name="UnaryOperator">
													<ref name="operator" type="ApplyRegularExpression"/>
													<ref name="expression" lowerBound="1" containment="true" type="ApplyActionExpressionElement"/>
												</class>
												<class name="Literal">
													<ref name="value" type="ApplyRegularExpression"/>
												</class>
												<class name="GetData">
													<ref name="field" type="ApplyRegularExpression"/>
													<ref name="data" type="AbsApplyData"/>
												</class>
												<class name="EnableRouting">
													<ref name="value" type="ApplyNumericExpression"/>
													<ref name="type" type="ApplyMessageDefinition"/>
												</class>
												<class name="Invocation">
													<ref name="type" type="ApplyMessageDefinition"/>
													<ref name="actualList" upperBound="-1" type="ApplyActionExpressionElement"/>
													<ref name="isTopDown" type="ApplyNumericExpression"/>
												</class>
												<class name="GetState">
													<ref name="state" lowerBound="1" type="ApplyStateMachine"/>
												</class>
												<class name="DomainPropertyGet">
													<ref name="name" type="ApplyRegularExpression"/>
												</class>
												<class name="DomainPropertySet">
													<ref name="name" type="ApplyRegularExpression"/>
													<ref name="value" lowerBound="1" type="ApplyActionExpressionElement"/>
												</class>
												<class name="Reference">
													<ref name="of" lowerBound="1" type="Let"/>
												</class>
												<class name="Let">
													<ref name="type" lowerBound="1" type="ApplyRegularExpression"/>
													<ref name="in" lowerBound="1" type="ApplyActionExpressionElement"/>
													<ref name="initialization" lowerBound="1" type="ApplyActionExpressionElement"/>
												</class>
												<class name="ApplyActionExpression">
													<ref name="expression" lowerBound="1" containment="true" type="ApplyActionExpressionElement"/>
												</class>
											</package>
										</package>
									</package>
								</package>
								<package name="ApplyMessageDefinition" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.ApplyModel.ApplyMessageDefinition" nsPrefix="ApplyMessageDefinition">
									<class name="ApplyMessageDefinition">
										<ref name="name" lowerBound="1" containment="true" type="ApplyName"/>
										<ref name="dataList" upperBound="-1" containment="true" type="Data"/>
										<ref name="parameterList" upperBound="-1" containment="true" type="Parameter"/>
									</class>
								</package>
								<package name="ApplyData" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.ApplyModel.ApplyMessageDefinition.ApplyData" nsPrefix="ApplyData">
									<class name="AbsApplyData" abstract="true">
										<ref name="name" lowerBound="1" containment="true" type="ApplyName"/>
										<ref name="type" lowerBound="1" containment="true" type="ApplyType"/>
										<ref name="initialValue" lowerBound="1" containment="true" type="ApplyInitialValue"/>
									</class>
									<class name="Parameter"/>
									<class name="ApplyType"/>
									<class name="ApplyInitialValue"/>
									<class name="Data"/>
								</package>
								<package name="ApplyHandlerMachine" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.ApplyModel.ApplyHandlerMachine" nsPrefix="ApplyHandlerMachine">
									<class name="ApplyMessageHandler">
										<ref name="message" type="ApplyMessageDefinition"/>
										<ref name="initial" containment="true" type="Initial"/>
										<ref name="states" upperBound="-1" containment="true" type="ApplyNamedHandler"/>
									</class>
									<package name="ApplyHandlerState" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.ApplyModel.ApplyHandlerMachine.ApplyHandlerState" nsPrefix="ApplyHandlerState">
										<class name="ApplyHandlerState" abstract="true">
											<ref name="transitionList" upperBound="-1" containment="true" type="ApplyHandlerTransition"/>
										</class>
										<class name="ApplyNamedHandler">
											<ref name="name" lowerBound="1" type="ApplyName"/>
										</class>
										<class name="Initial"/>
										<class name="Final"/>
										<package name="ApplyHandlerTransition" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.ApplyModel.ApplyHandlerMachine.ApplyHandlerState.ApplyHandlerTransition" nsPrefix="ApplyHandlerTransition">
											<class name="ApplyHandlerTransition">
												<ref name="precondition" lowerBound="1" containment="true" type="ApplyHandlerPreConditionExpression"/>
												<ref name="poscondition" lowerBound="1" containment="true" type="ApplyHandlerPosConditionExpression"/>
												<ref name="action" lowerBound="1" containment="true" type="ApplyHandlerActionExpression"/>
												<ref name="stateReference" lowerBound="1" type="ApplyHandlerState"/>
												<ref name="name" lowerBound="1" type="ApplyName"/>
											</class>
											<package name="Precondition" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.ApplyModel.ApplyHandlerMachine.ApplyHandlerState.ApplyHandlerTransition.Precondition" nsPrefix="Precondition">
												<class name="ApplyHandlerPreConditionExpressionElement" abstract="true"/>
												<class name="BinaryOperator">
													<ref name="operator" type="ApplyRegularExpression"/>
													<ref name="left" lowerBound="1" containment="true" type="ApplyHandlerPreConditionExpressionElement"/>
													<ref name="right" lowerBound="1" containment="true" type="ApplyHandlerPreConditionExpressionElement"/>
												</class>
												<class name="UnaryOperator">
													<ref name="expression" lowerBound="1" containment="true" type="ApplyHandlerPreConditionExpressionElement"/>
													<ref name="operator" type="ApplyRegularExpression"/>
												</class>
												<class name="Literal">
													<ref name="value" type="ApplyRegularExpression"/>
												</class>
												<class name="GetData">
													<ref name="data" lowerBound="1" type="AbsApplyData"/>
													<ref name="field" type="ApplyRegularExpression"/>
												</class>
												<class name="GetState">
													<ref name="state" lowerBound="1" type="ApplyStateMachine"/>
												</class>
												<class name="GetMessageData">
													<ref name="field" type="ApplyRegularExpression"/>
												</class>
												<class name="GetMessageParameter">
													<ref name="field" type="ApplyRegularExpression"/>
												</class>
												<class name="DomainPropertyGet">
													<ref name="name" type="ApplyRegularExpression"/>
												</class>
												<class name="Reference">
													<ref name="of" lowerBound="1" type="Let"/>
												</class>
												<class name="Let">
													<ref name="type" lowerBound="1" type="ApplyRegularExpression"/>
													<ref name="in" lowerBound="1" type="ApplyHandlerPreConditionExpressionElement"/>
													<ref name="initialization" lowerBound="1" type="ApplyHandlerPreConditionExpressionElement"/>
												</class>
												<class name="ApplyHandlerPreConditionExpression">
													<ref name="expression" lowerBound="1" containment="true" type="ActionExpression"/>
												</class>
											</package>
											<package name="Poscondition" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.ApplyModel.ApplyHandlerMachine.ApplyHandlerState.ApplyHandlerTransition.Poscondition" nsPrefix="Poscondition">
												<class name="ApplyHandlerPosConditionExpressionElement" abstract="true"/>
												<class name="BinaryOperator">
													<ref name="left" lowerBound="1" containment="true" type="ApplyHandlerPosConditionExpressionElement"/>
													<ref name="right" lowerBound="1" containment="true" type="ApplyHandlerPosConditionExpressionElement"/>
													<ref name="operator" type="ApplyRegularExpression"/>
												</class>
												<class name="UnaryOperator">
													<ref name="expression" lowerBound="1" containment="true" type="ApplyHandlerPosConditionExpressionElement"/>
													<ref name="operator" type="ApplyRegularExpression"/>
												</class>
												<class name="Literal">
													<ref name="value" type="ApplyRegularExpression"/>
												</class>
												<class name="GetData">
													<ref name="field" type="ApplyRegularExpression"/>
													<ref name="data" type="AbsApplyData"/>
												</class>
												<class name="SetData">
													<ref name="value" lowerBound="1" type="ApplyHandlerPosConditionExpressionElement"/>
													<ref name="field" type="ApplyRegularExpression"/>
													<ref name="data" type="AbsApplyData"/>
												</class>
												<class name="GetState">
													<ref name="state" lowerBound="1" type="ApplyStateMachine"/>
												</class>
												<class name="GetMessageData">
													<ref name="field" type="ApplyRegularExpression"/>
												</class>
												<class name="GetMessageParameter">
													<ref name="field" type="ApplyRegularExpression"/>
												</class>
												<class name="SetTopDown">
													<ref name="value" lowerBound="1" type="ApplyHandlerPosConditionExpressionElement"/>
												</class>
												<class name="SetMessageData">
													<ref name="value" lowerBound="1" type="ApplyHandlerPosConditionExpressionElement"/>
													<ref name="field" type="ApplyRegularExpression"/>
												</class>
												<class name="SetMessageParameter">
													<ref name="value" lowerBound="1" type="ApplyHandlerPosConditionExpressionElement"/>
													<ref name="field" type="ApplyRegularExpression"/>
												</class>
												<class name="DomainPropertyGet">
													<ref name="name" type="ApplyRegularExpression"/>
												</class>
												<class name="Reference">
													<ref name="of" lowerBound="1" type="Let"/>
												</class>
												<class name="Let">
													<ref name="type" lowerBound="1" type="ApplyRegularExpression"/>
													<ref name="in" lowerBound="1" type="ApplyHandlerPosConditionExpressionElement"/>
													<ref name="initialization" lowerBound="1" type="ApplyHandlerPosConditionExpressionElement"/>
												</class>
												<class name="ApplyHandlerPosConditionExpression">
													<ref name="expression" lowerBound="1" containment="true" type="ApplyHandlerPosConditionExpressionElement"/>
												</class>
											</package>
											<package name="Action" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.ApplyModel.ApplyHandlerMachine.ApplyHandlerState.ApplyHandlerTransition.Action" nsPrefix="Action">
												<class name="ApplyHandlerActionExpressionElement" abstract="true"/>
												<class name="BinaryOperator">
													<ref name="operator" type="ApplyRegularExpression"/>
													<ref name="left" lowerBound="1" containment="true" type="ApplyHandlerActionExpressionElement"/>
													<ref name="right" lowerBound="1" containment="true" type="ApplyHandlerActionExpressionElement"/>
												</class>
												<class name="UnaryOperator">
													<ref name="operator" type="ApplyRegularExpression"/>
													<ref name="expression" lowerBound="1" containment="true" type="ApplyHandlerActionExpressionElement"/>
												</class>
												<class name="Literal">
													<ref name="value" type="ApplyRegularExpression"/>
												</class>
												<class name="GetData">
													<ref name="field" type="ApplyRegularExpression"/>
													<ref name="data" type="AbsApplyData"/>
												</class>
												<class name="EnableRouting">
													<ref name="type" type="ApplyMessageDefinition"/>
													<ref name="value" type="ApplyNumericExpression"/>
												</class>
												<class name="Invocation">
													<ref name="actualList" upperBound="-1" type="ApplyHandlerActionExpressionElement"/>
													<ref name="type" type="ApplyMessageDefinition"/>
													<ref name="isTopDown" type="ApplyNumericExpression"/>
												</class>
												<class name="GetState">
													<ref name="state" lowerBound="1" type="ApplyStateMachine"/>
												</class>
												<class name="GetMessageData">
													<ref name="field" type="ApplyRegularExpression"/>
												</class>
												<class name="GetMessageParameter">
													<ref name="field" type="ApplyRegularExpression"/>
												</class>
												<class name="DomainPropertyGet">
													<ref name="name" type="ApplyRegularExpression"/>
												</class>
												<class name="DomainPropertySet">
													<ref name="name" type="ApplyRegularExpression"/>
													<ref name="value" lowerBound="1" type="ApplyHandlerActionExpressionElement"/>
												</class>
												<class name="Reference">
													<ref name="of" lowerBound="1" type="Let"/>
												</class>
												<class name="Let">
													<ref name="type" lowerBound="1" type="ApplyRegularExpression"/>
													<ref name="in" lowerBound="1" type="ApplyHandlerActionExpressionElement"/>
													<ref name="initialization" lowerBound="1" type="ApplyHandlerActionExpressionElement"/>
												</class>
												<class name="ApplyHandlerActionExpression">
													<ref name="expression" lowerBound="1" containment="true" type="ApplyHandlerActionExpressionElement"/>
												</class>
											</package>
										</package>
									</package>
								</package>
								<package name="ApplyVisualComponent" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.ApplyModel.ApplyVisualComponent" nsPrefix="ApplyVisualComponent">
									<class name="ApplyGeometryData" abstract="true"/>
									<class name="ApplyFace">
										<ref name="labelText" lowerBound="1" containment="true" type="ApplyLabel"/>
										<ref name="point3D" lowerBound="3" upperBound="-1" containment="true" type="Point3D"/>
									</class>
									<class name="GeometryData3D">
										<ref name="face" upperBound="-1" containment="true" type="ApplyFace"/>
									</class>
									<class name="GeometryData2D">
										<ref name="labelText" lowerBound="1" containment="true" type="ApplyLabel"/>
										<ref name="point2D" lowerBound="3" upperBound="-1" containment="true" type="Point2D"/>
									</class>
									<class name="Point2D"/>
									<class name="ApplyPoint">
										<ref name="yCoordinate" lowerBound="1" containment="true" type="ApplyYCoordinate"/>
										<ref name="xCoordinate" lowerBound="1" containment="true" type="ApplyXCoordinate"/>
									</class>
									<class name="Point3D">
										<ref name="zCoordinate" lowerBound="1" containment="true" type="ApplyZCoordinate"/>
									</class>
									<class name="VisualComponent">
										<ref name="geometryData" containment="true" type="ApplyGeometryData"/>
										<ref name="colorData" containment="true" type="ApplyColorData"/>
										<ref name="componentSet" upperBound="-1" containment="true" type="VisualComponent"/>
									</class>
									<class name="ApplyColorData">
										<ref name="disabledColors" containment="true" type="ApplyColorState"/>
										<ref name="normalColors" containment="true" type="ApplyColorState"/>
										<ref name="selectedColors" containment="true" type="ApplyColorState"/>
									</class>
									<class name="ApplyColorState">
										<ref name="alphaTransparency" containment="true" type="ApplyAlphaTransparency"/>
										<ref name="backgroundColor" containment="true" type="ApplyColor"/>
										<ref name="foregroundColor" containment="true" type="ApplyColor"/>
									</class>
									<class name="ApplyColor">
										<ref name="ambienceColor" containment="true" type="ApplyRGBColor"/>
										<ref name="specularColor" containment="true" type="ApplyRGBColor"/>
										<ref name="difuseColor" containment="true" type="ApplyRGBColor"/>
									</class>
									<class name="ApplyAlphaTransparency">
										<ref name="value" containment="true" type="ApplyTransparency"/>
									</class>
									<class name="ApplyRGBColor">
										<ref name="redValue" containment="true" type="ApplyRedValue"/>
										<ref name="greenValue" containment="true" type="ApplyGreenValue"/>
										<ref name="blueValue" containment="true" type="ApplyBlueValue"/>
									</class>
									<class name="ApplyXCoordinate"/>
									<class name="ApplyYCoordinate"/>
									<class name="ApplyZCoordinate"/>
									<class name="ApplyRedValue"/>
									<class name="ApplyGreenValue"/>
									<class name="ApplyBlueValue"/>
									<class name="ApplyTransparency"/>
									<class name="ApplyLabel"/>
								</package>
								<package name="ApplyTaskComponent" nsURI="AUIML.Agent.StateMachine.State.Transition.Ruling.RuleRightHandSide.ApplyModel.ApplyTaskComponent" nsPrefix="ApplyTaskComponent">
									<class name="ApplyGoal">
										<ref name="condition" lowerBound="1" containment="true" type="ApplyCondition"/>
									</class>
									<class name="TaskComponent">
										<ref name="numberOfGoalsCompleted" lowerBound="1" containment="true" type="ApplyNumberOfGoalsCompleted"/>
										<ref name="completionTime" lowerBound="1" containment="true" type="ApplyCompletionTime"/>
										<ref name="goal" upperBound="-1" containment="true" type="ApplyGoal"/>
										<ref name="componentSet" upperBound="-1" containment="true" type="TaskComponent"/>
									</class>
									<class name="ApplyCondition"/>
									<class name="ApplyCompletionTime"/>
									<class name="ApplyNumberOfGoalsCompleted"/>
								</package>
							</package>
						</package>
					</package>
					<package name="Poscondition" nsURI="AUIML.Agent.StateMachine.State.Transition.Poscondition" nsPrefix="Poscondition">
						<class name="PosConditionExpressionElement" abstract="true"/>
						<class name="VariableReference">
							<ref name="name" lowerBound="1" type="RegularAtribute"/>
						</class>
						<class name="BinaryOperator">
							<attr name="operatorname" type="//EString"/>
							<ref name="left" lowerBound="1" containment="true" type="PosConditionExpressionElement"/>
							<ref name="right" lowerBound="1" containment="true" type="PosConditionExpressionElement"/>
						</class>
						<class name="UnaryOperator">
							<attr name="operator" type="//EString"/>
							<ref name="expression" lowerBound="1" containment="true" type="PosConditionExpressionElement"/>
						</class>
						<class name="Literal">
							<attr name="value" type="//EString"/>
						</class>
						<class name="GetData">
							<attr name="field" defaultValueLiteral="name" type="//EString"/>
							<ref name="data" lowerBound="1" type="AbsData"/>
						</class>
						<class name="SetData">
							<attr name="field" defaultValueLiteral="name" type="//EString"/>
							<ref name="data" lowerBound="1" type="AbsData"/>
							<ref name="value" lowerBound="1" containment="true" type="PosConditionExpressionElement"/>
						</class>
						<class name="PosConditionExpression">
							<ref name="expression" lowerBound="1" containment="true" type="PosConditionExpressionElement"/>
						</class>
					</package>
					<package name="Action" nsURI="AUIML.Agent.StateMachine.State.Transition.Action" nsPrefix="Action">
						<class name="ActionExpressionElement" abstract="true"/>
						<class name="VariableReference">
							<ref name="name" lowerBound="1" type="RegularAtribute"/>
						</class>
						<class name="BinaryOperator">
							<attr name="operator" type="//EString"/>
							<ref name="left" lowerBound="1" containment="true" type="ActionExpressionElement"/>
							<ref name="right" lowerBound="1" containment="true" type="ActionExpressionElement"/>
						</class>
						<class name="UnaryOperator">
							<attr name="operator" type="//EString"/>
							<ref name="expression" lowerBound="1" containment="true" type="ActionExpressionElement"/>
						</class>
						<class name="Literal">
							<attr name="value" type="//EString"/>
						</class>
						<class name="GetData">
							<attr name="field" defaultValueLiteral="name" type="//EString"/>
							<ref name="data" lowerBound="1" type="AbsData"/>
						</class>
						<class name="EnableRouting">
							<attr name="value" defaultValueLiteral="true" type="//EBoolean"/>
							<ref name="type" type="MessageDefinition"/>
						</class>
						<class name="Invocation">
							<ref name="type" lowerBound="1" type="MessageDefinition"/>
							<ref name="actualList" upperBound="-1" containment="true" type="ActionExpressionElement"/>
							<attr name="isTopDown" defaultValueLiteral="true" type="//EBoolean"/>
						</class>
						<class name="ActionExpression">
							<ref name="expression" lowerBound="1" containment="true" type="ActionExpressionElement"/>
						</class>
					</package>
				</package>
			</package>
		</package>
		<package name="HandlerMachine" nsURI="AUIML.Agent.HandlerMachine" nsPrefix="HandlerMachine">
			<class name="MessageHandler">
				<ref name="message" lowerBound="1" type="MessageDefinition"/>
				<ref name="initial" lowerBound="1" containment="true" type="Initial"/>
				<ref name="states" upperBound="-1" containment="true" type="NamedHandler"/>
			</class>
			<package name="HandlerState" nsURI="AUIML.Agent.HandlerMachine.HandlerState" nsPrefix="HandlerState">
				<class name="HandlerState" abstract="true">
					<ref name="transitionList" upperBound="-1" containment="true" type="HandlerTransition"/>
				</class>
				<class name="NamedHandler">
					<attr name="name" type="//EString"/>
				</class>
				<class name="Initial"/>
				<class name="Final"/>
				<package name="Transition" nsURI="AUIML.Agent.HandlerMachine.HandlerState.Transition" nsPrefix="Transition">
					<class name="HandlerTransition">
						<ref name="precondition" lowerBound="1" containment="true" type="HandlerPreConditionExpression"/>
						<ref name="poscondition" lowerBound="1" containment="true" type="HandlerPosConditionExpression"/>
						<ref name="action" lowerBound="1" containment="true" type="HandlerActionExpression"/>
						<ref name="stateReference" lowerBound="1" type="HandlerState"/>
						<attr name="name" type="//EString"/>
					</class>
					<package name="Precondition" nsURI="AUIML.Agent.HandlerMachine.HandlerState.Transition.Precondition" nsPrefix="Precondition">
						<class name="HandlerPreConditionExpressionElement" abstract="true"/>
						<class name="VariableReference">
							<ref name="name" lowerBound="1" type="RegularAtribute"/>
						</class>
						<class name="BinaryOperator">
							<attr name="operator" type="//EString"/>
							<ref name="left" lowerBound="1" containment="true" type="HandlerPreConditionExpressionElement"/>
							<ref name="right" lowerBound="1" containment="true" type="HandlerPreConditionExpressionElement"/>
						</class>
						<class name="UnaryOperator">
							<attr name="operator" type="//EString"/>
							<ref name="expression" lowerBound="1" containment="true" type="HandlerPreConditionExpressionElement"/>
						</class>
						<class name="Literal">
							<attr name="value" type="//EString"/>
						</class>
						<class name="GetData">
							<attr name="field" defaultValueLiteral="name" type="//EString"/>
							<ref name="data" lowerBound="1" type="AbsData"/>
						</class>
						<class name="GetState">
							<ref name="state" lowerBound="1" type="StateMachine"/>
						</class>
						<class name="GetMessageData">
							<attr name="field" type="//EString"/>
						</class>
						<class name="GetMessageParameter">
							<attr name="field" type="//EString"/>
						</class>
						<class name="HandlerPreConditionExpression">
							<ref name="expression" lowerBound="1" containment="true" type="HandlerPreConditionExpressionElement"/>
						</class>
					</package>
					<package name="Poscondition" nsURI="AUIML.Agent.HandlerMachine.HandlerState.Transition.Poscondition" nsPrefix="Poscondition">
						<class name="HandlerPosConditionExpressionElement" abstract="true"/>
						<class name="VariableReference">
							<ref name="name" lowerBound="1" type="RegularAtribute"/>
						</class>
						<class name="BinaryOperator">
							<attr name="operator" type="//EString"/>
							<ref name="left" lowerBound="1" containment="true" type="HandlerPosConditionExpressionElement"/>
							<ref name="right" lowerBound="1" containment="true" type="HandlerPosConditionExpressionElement"/>
						</class>
						<class name="UnaryOperator">
							<attr name="operator" type="//EString"/>
							<ref name="expression" lowerBound="1" containment="true" type="HandlerPosConditionExpressionElement"/>
						</class>
						<class name="Literal">
							<attr name="value" type="//EString"/>
						</class>
						<class name="GetData">
							<attr name="field" defaultValueLiteral="name" type="//EString"/>
							<ref name="data" lowerBound="1" type="AbsData"/>
						</class>
						<class name="SetData">
							<attr name="field" defaultValueLiteral="name" type="//EString"/>
							<ref name="data" lowerBound="1" type="AbsData"/>
							<ref name="value" lowerBound="1" containment="true" type="HandlerPosConditionExpressionElement"/>
						</class>
						<class name="GetState">
							<ref name="state" lowerBound="1" type="StateMachine"/>
						</class>
						<class name="GetMessageData">
							<attr name="field" type="//EString"/>
						</class>
						<class name="GetMessageParameter">
							<attr name="field" type="//EString"/>
						</class>
						<class name="SetTopDown">
							<ref name="value" lowerBound="1" containment="true" type="HandlerPosConditionExpressionElement"/>
						</class>
						<class name="SetMessageData">
							<attr name="field" type="//EString"/>
							<ref name="value" lowerBound="1" containment="true" type="HandlerPosConditionExpressionElement"/>
						</class>
						<class name="SetMessageParameter">
							<attr name="field" type="//EString"/>
							<ref name="value" lowerBound="1" containment="true" type="HandlerPosConditionExpressionElement"/>
						</class>
						<class name="HandlerPosConditionExpression">
							<ref name="expression" lowerBound="1" containment="true" type="HandlerPosConditionExpressionElement"/>
						</class>
					</package>
					<package name="Action" nsURI="AUIML.Agent.HandlerMachine.HandlerState.Transition.Action" nsPrefix="Action">
						<class name="HandlerActionExpressionElement" abstract="true"/>
						<class name="VariableReference">
							<ref name="name" lowerBound="1" type="RegularAtribute"/>
						</class>
						<class name="BinaryOperator">
							<attr name="operator" type="//EString"/>
							<ref name="left" lowerBound="1" containment="true" type="HandlerActionExpressionElement"/>
							<ref name="right" lowerBound="1" containment="true" type="HandlerActionExpressionElement"/>
						</class>
						<class name="UnaryOperator">
							<attr name="operator" type="//EString"/>
							<ref name="expression" lowerBound="1" containment="true" type="HandlerActionExpressionElement"/>
						</class>
						<class name="Literal">
							<attr name="value" type="//EString"/>
						</class>
						<class name="GetData">
							<attr name="field" defaultValueLiteral="name" type="//EString"/>
							<ref name="data" lowerBound="1" type="AbsData"/>
						</class>
						<class name="EnableRouting">
							<attr name="value" defaultValueLiteral="true" type="//EBoolean"/>
							<ref name="type" type="MessageDefinition"/>
						</class>
						<class name="Invocation">
							<ref name="type" lowerBound="1" type="MessageDefinition"/>
							<ref name="actualList" upperBound="-1" containment="true" type="HandlerActionExpressionElement"/>
							<attr name="isTopDown" type="//EBoolean"/>
						</class>
						<class name="GetState">
							<ref name="state" lowerBound="1" type="StateMachine"/>
						</class>
						<class name="GetMessageData">
							<attr name="field" type="//EString"/>
						</class>
						<class name="GetMessageParameter">
							<attr name="field" type="//EString"/>
						</class>
						<class name="HandlerActionExpression">
							<ref name="expression" lowerBound="1" containment="true" type="HandlerActionExpressionElement"/>
						</class>
					</package>
				</package>
			</package>
		</package>
	</package>
	<package name="MessageDefinition" nsURI="AUIML.MessageDefinition" nsPrefix="MessageDefinition">
		<class name="MessageDefinition">
			<attr name="name" type="//EString"/>
			<ref name="dataList" upperBound="-1" containment="true" type="Data"/>
			<ref name="parameterList" upperBound="-1" containment="true" type="Parameter"/>
		</class>
	</package>
	<package name="Data" nsURI="AUIML.Data" nsPrefix="Data">
		<class name="AbsData" abstract="true">
			<attr name="name" type="//EString"/>
			<attr name="type" type="//EString"/>
			<attr name="initialValue" type="//EString"/>
		</class>
		<class name="Parameter"/>
		<class name="Data"/>
	</package>
</package>
