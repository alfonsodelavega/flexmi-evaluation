<?xml version="1.0" encoding="ASCII"?>
<FlexmiModel xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns="flexmi" nsuri="http://www.eclipse.org/emf/2002/Ecore">
  <imports>http://www.eclipse.org/emf/2002/Ecore</imports>
  <tags name="package">
    <attributes name="name" value="simTL4J"/>
    <attributes name="nsURI" value="http://www.emftext.org/simTL4J"/>
    <attributes name="nsPrefix" value="simTL4J"/>
    <tags name="package">
      <attributes name="name" value="annotations"/>
      <attributes name="nsURI" value="http://www.emftext.org/simTL4J/annotations"/>
      <attributes name="nsPrefix" value="annotations"/>
      <tags name="class">
        <attributes name="name" value="Annotable"/>
        <attributes name="abstract" value="true"/>
        <tags name="ref">
          <attributes name="name" value="annotations"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="AnnotationInstance"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="AnnotationInstance"/>
        <tags name="ref">
          <attributes name="name" value="annotation"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="type" value="Classifier"/>
        </tags>
        <tags name="ref">
          <attributes name="name" value="parameter"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="AnnotationParameter"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="AnnotationParameter"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="SingleAnnotationParameter"/>
        <tags name="ref">
          <attributes name="name" value="value"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="AnnotationValue"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="AnnotationParameterList"/>
        <tags name="ref">
          <attributes name="name" value="settings"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="AnnotationAttributeSetting"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="AnnotationAttributeSetting"/>
        <tags name="ref">
          <attributes name="name" value="attribute"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="type" value="InterfaceMethod"/>
        </tags>
        <tags name="ref">
          <attributes name="name" value="value"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="AnnotationValue"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="AnnotationValue"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="AnnotationAttribute"/>
        <tags name="ref">
          <attributes name="name" value="defaultValue"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="Expression"/>
        </tags>
      </tags>
    </tags>
    <tags name="package">
      <attributes name="name" value="arrays"/>
      <attributes name="nsURI" value="http://www.emftext.org/simTL4J/arrays"/>
      <attributes name="nsPrefix" value="arrays"/>
      <tags name="class">
        <attributes name="name" value="ArrayTypeable"/>
        <attributes name="abstract" value="true"/>
        <tags name="EOperation">
          <attributes name="name" value="getArrayDimension"/>
          <attributes name="type" value="ELong"/>
        </tags>
        <tags name="ref">
          <attributes name="name" value="arrayDimensionsBefore"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="ArrayDimension"/>
        </tags>
        <tags name="ref">
          <attributes name="name" value="arrayDimensionsAfter"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="ArrayDimension"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="ArrayDimension"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="ArrayInitializer"/>
        <tags name="ref">
          <attributes name="name" value="initialValues"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="ArrayInitializationValue"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="ArrayInitializationValue"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="ArrayInstantiationBySize"/>
        <tags name="ref">
          <attributes name="name" value="sizes"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="Expression"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="ArrayInstantiationByValues"/>
        <tags name="ref">
          <attributes name="name" value="arrayInitializer"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="ArrayInitializer"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="ArraySelector"/>
        <tags name="ref">
          <attributes name="name" value="position"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="Expression"/>
        </tags>
      </tags>
    </tags>
    <tags name="package">
      <attributes name="name" value="classifiers"/>
      <attributes name="nsURI" value="http://www.emftext.org/simTL4J/classifiers"/>
      <attributes name="nsPrefix" value="classifiers"/>
      <tags name="class">
        <attributes name="name" value="Classifier"/>
        <attributes name="abstract" value="true"/>
        <tags name="EOperation">
          <attributes name="name" value="getAllSuperClassifiers"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="type" value="ConcreteClassifier"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="//method has to be specified in subclasses&#xA;throw new java.lang.UnsupportedOperationException ( ) ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value=""/>
            </tags>
          </tags>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="ConcreteClassifier"/>
        <attributes name="abstract" value="true"/>
        <tags name="EOperation">
          <attributes name="name" value="getInnerClassifiers"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="type" value="ConcreteClassifier"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="if ( this .eIsProxy ( ) ) { &#xA;&#x9;java.lang.String uriString = ( ( org.eclipse.emf.ecore.InternalEObject ) this ) .eProxyURI ( ) .trimFragment ( ) .toString ( ) ; &#xA;&#x9;java.lang.String fullName = uriString .substring ( sg.edu.nus.comp.simTL.language.java.simTL4J.JavaUniquePathConstructor .JAVA_CLASSIFIER_PATHMAP .length ( ) , uriString .length ( ) - &quot;.java&quot; .length ( ) ) + &quot;$&quot; ; &#xA;&#x9;return getConcreteClassifiers ( fullName , &quot;*&quot; ) ; &#xA;} else { &#xA;&#x9;java.lang.String suffix = &quot;&quot; ; &#xA;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier containingClass = this ; &#xA;&#x9;while ( containingClass .eContainer ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) { &#xA;&#x9;&#x9;containingClass = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) containingClass .eContainer ( ) ; &#xA;&#x9;&#x9;suffix = containingClass .getName ( ) + sg.edu.nus.comp.simTL.language.java.simTL4J.JavaUniquePathConstructor .CLASSIFIER_SEPARATOR + suffix ; &#xA;&#x9;} &#xA;&#x9;if ( containingClass .eContainer ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.containers.CompilationUnit ) { &#xA;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.containers.CompilationUnit compilationUnit = ( sg.edu.nus.comp.simTL.language.java.simTL4J.containers.CompilationUnit ) containingClass .eContainer ( ) ; &#xA;&#x9;&#x9;java.lang.String fullName = compilationUnit .getNamespacesAsString ( ) + suffix + getName ( ) + sg.edu.nus.comp.simTL.language.java.simTL4J.JavaUniquePathConstructor .CLASSIFIER_SEPARATOR ; &#xA;&#x9;&#x9;return getConcreteClassifiers ( fullName , &quot;*&quot; ) ; &#xA;&#x9;} &#xA;} &#xA;//for classes declared locally inside methods that are not registered in the class path&#xA;org.eclipse.emf.common.util.EList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > result = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > ( ) ; &#xA;//can not call ClassifierUtil.getAllMembers, because it will try to call this method!&#xA;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.members.Member member : getMembers ( ) ) { &#xA;&#x9;if ( member instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) { &#xA;&#x9;&#x9;result .add ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) member ) ; &#xA;&#x9;} &#xA;} &#xA;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier superClassifier : getAllSuperClassifiers ( ) ) { &#xA;&#x9;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.members.Member member : superClassifier .getMembers ( ) ) { &#xA;&#x9;&#x9;if ( member instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) { &#xA;&#x9;&#x9;&#x9;result .add ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) member ) ; &#xA;&#x9;&#x9;} &#xA;&#x9;} &#xA;} &#xA;return result ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value=""/>
            </tags>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="getAllInnerClassifiers"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="type" value="ConcreteClassifier"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="org.eclipse.emf.common.util.EList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > innerClassifierList = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > ( ) ; &#xA;innerClassifierList .addAll ( getInnerClassifiers ( ) ) ; &#xA;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier superClassifier : getAllSuperClassifiers ( ) ) { &#xA;&#x9;org.eclipse.emf.common.util.EList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > superInnerList = superClassifier .getInnerClassifiers ( ) ; &#xA;&#x9;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier superInner : superInnerList ) { &#xA;&#x9;&#x9;if ( superInner .eIsProxy ( ) ) { &#xA;&#x9;&#x9;&#x9;superInner = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) org.eclipse.emf.ecore.util.EcoreUtil .resolve ( superInner , this ) ; &#xA;&#x9;&#x9;} &#xA;&#x9;&#x9;if ( ! superInner .eIsProxy ( ) &amp;&amp; ! superInner .isHidden ( this ) ) { &#xA;&#x9;&#x9;&#x9;innerClassifierList .add ( superInner ) ; &#xA;&#x9;&#x9;} &#xA;&#x9;} &#xA;} &#xA;return innerClassifierList ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value=""/>
            </tags>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="getSuperTypeReferences"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="type" value="ClassifierReference"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="org.eclipse.emf.common.util.EList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.types.ClassifierReference > typeReferenceList = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.types.ClassifierReference > ( ) ; &#xA;if ( this == null ) { &#xA;&#x9;return typeReferenceList ; &#xA;} &#xA;if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class ) { &#xA;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class javaClass = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class ) this ; &#xA;&#x9;if ( javaClass .getExtends ( ) != null ) { &#xA;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.types.ClassifierReference classifierReference = javaClass .getExtends ( ) .getPureClassifierReference ( ) ; &#xA;&#x9;&#x9;typeReferenceList .add ( classifierReference ) ; &#xA;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier target = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) classifierReference .getTarget ( ) ; &#xA;&#x9;&#x9;if ( ! target .equals ( getObjectClass ( ) ) ) { &#xA;&#x9;&#x9;&#x9;typeReferenceList .addAll ( target .getSuperTypeReferences ( ) ) ; &#xA;&#x9;&#x9;} &#xA;&#x9;} &#xA;&#x9;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypeReference interfaceReference : javaClass .getImplements ( ) ) { &#xA;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.types.ClassifierReference classifierReference = interfaceReference .getPureClassifierReference ( ) ; &#xA;&#x9;&#x9;typeReferenceList .add ( classifierReference ) ; &#xA;&#x9;&#x9;typeReferenceList .addAll ( ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) classifierReference .getTarget ( ) ) .getSuperTypeReferences ( ) ) ; &#xA;&#x9;} &#xA;} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Interface ) { &#xA;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Interface javaInterface = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Interface ) this ; &#xA;&#x9;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypeReference interfaceReference : javaInterface .getExtends ( ) ) { &#xA;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.types.ClassifierReference classifierReference = interfaceReference .getPureClassifierReference ( ) ; &#xA;&#x9;&#x9;typeReferenceList .add ( classifierReference ) ; &#xA;&#x9;&#x9;typeReferenceList .addAll ( ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) classifierReference .getTarget ( ) ) .getSuperTypeReferences ( ) ) ; &#xA;&#x9;} &#xA;} &#xA;return typeReferenceList ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value=""/>
            </tags>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="getAllMembers"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="type" value="Member"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="org.eclipse.emf.common.util.EList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.members.Member > memberList = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.members.Member > ( ) ; &#xA;sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier concreteClassifier = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) this ; &#xA;memberList .addAll ( concreteClassifier .getMembers ( ) ) ; &#xA;memberList .addAll ( concreteClassifier .getDefaultMembers ( ) ) ; &#xA;//because inner classes are found in separate class files&#xA;memberList .addAll ( concreteClassifier .getAllInnerClassifiers ( ) ) ; &#xA;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier superClassifier : getAllSuperClassifiers ( ) ) { &#xA;&#x9;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.members.Member member : superClassifier .getMembers ( ) ) { &#xA;&#x9;&#x9;if ( member instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.modifiers.AnnotableAndModifiable ) { &#xA;&#x9;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.modifiers.AnnotableAndModifiable modifiable = ( sg.edu.nus.comp.simTL.language.java.simTL4J.modifiers.AnnotableAndModifiable ) member ; &#xA;&#x9;&#x9;&#x9;if ( ! modifiable .isHidden ( context ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;memberList .add ( member ) ; &#xA;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;} else { &#xA;&#x9;&#x9;&#x9;memberList .add ( member ) ; &#xA;&#x9;&#x9;} &#xA;&#x9;} &#xA;&#x9;memberList .addAll ( superClassifier .getDefaultMembers ( ) ) ; &#xA;} &#xA;return memberList ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; Returns all members of the given classifier including inner classes and &#xA; all members of super types (extended classes and implemented interfaces).&#xA; &#xA; @param context to check protected visibility&#xA; @return member list&#xA;"/>
            </tags>
          </tags>
          <tags name="EParameter">
            <attributes name="name" value="context"/>
            <attributes name="type" value="Commentable"/>
          </tags>
        </tags>
        <tags name="attr">
          <attributes name="name" value="fullName"/>
          <attributes name="transient" value="true"/>
          <attributes name="type" value="//EString"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="Implementor"/>
        <attributes name="abstract" value="true"/>
        <tags name="ref">
          <attributes name="name" value="implements"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="TypeReference"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="Class"/>
        <tags name="EOperation">
          <attributes name="name" value="getAllSuperClassifiers"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="type" value="ConcreteClassifier"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="org.eclipse.emf.common.util.EList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > result = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > ( ) ; &#xA;//collects all superclasses first&#xA;sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class superClass = this ; &#xA;while ( superClass != null &amp;&amp; ! superClass .eIsProxy ( ) &amp;&amp; ! superClass .equals ( getObjectClass ( ) ) ) { &#xA;&#x9;superClass = superClass .getSuperClass ( ) ; &#xA;&#x9;if ( superClass != null ) { &#xA;&#x9;&#x9;result .add ( superClass ) ; &#xA;&#x9;} &#xA;} &#xA;//collect all implemented interfaces&#xA;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypeReference typeArg : this .getImplements ( ) ) { &#xA;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier superInterface = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) typeArg .getTarget ( ) ; &#xA;&#x9;if ( superInterface != null ) { &#xA;&#x9;&#x9;result .add ( superInterface ) ; &#xA;&#x9;&#x9;if ( superInterface instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Interface ) { &#xA;&#x9;&#x9;&#x9;result .addAll ( ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Interface ) superInterface ) .getAllSuperClassifiers ( ) ) ; &#xA;&#x9;&#x9;} &#xA;&#x9;} &#xA;} &#xA;//collect all implemented interfaces of super classes&#xA;superClass = this .getSuperClass ( ) ; &#xA;if ( superClass != null &amp;&amp; ! superClass .eIsProxy ( ) &amp;&amp; ! superClass .equals ( getObjectClass ( ) ) ) { &#xA;&#x9;result .addAll ( superClass .getAllSuperClassifiers ( ) ) ; &#xA;} &#xA;return result ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; Recursively collects all super types (extended classes and implemented interfaces)&#xA; of the given class.&#xA; &#xA; @param classifierList the list for the result&#xA;"/>
            </tags>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="getSuperClass"/>
          <attributes name="type" value="Class"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypeReference superClassReference = this .getExtends ( ) ; &#xA;if ( superClassReference == null ) { &#xA;&#x9;superClassReference = this .getDefaultExtends ( ) ; &#xA;} &#xA;if ( superClassReference == null ) { &#xA;&#x9;return null ; &#xA;} &#xA;sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type result = superClassReference .getTarget ( ) ; &#xA;if ( result instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class ) { &#xA;&#x9;return ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class ) result ; &#xA;} &#xA;return null ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; @param this&#xA; @return the direct super class&#xA;"/>
            </tags>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="unWrapPrimitiveType"/>
          <attributes name="type" value="PrimitiveType"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="if ( getLibClass ( &quot;Boolean&quot; ) .equals ( this ) ) { &#xA;&#x9;return sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypesFactory.eINSTANCE.createBoolean(); &#xA;} &#xA;if ( getLibClass ( &quot;Byte&quot; ) .equals ( this ) ) { &#xA;&#x9;return sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypesFactory.eINSTANCE.createByte(); &#xA;} &#xA;if ( getLibClass ( &quot;Character&quot; ) .equals ( this ) ) { &#xA;&#x9;return sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypesFactory.eINSTANCE.createChar(); &#xA;} &#xA;if ( getLibClass ( &quot;Float&quot; ) .equals ( this ) ) { &#xA;&#x9;return sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypesFactory.eINSTANCE.createFloat(); &#xA;} &#xA;if ( getLibClass ( &quot;Double&quot; ) .equals ( this ) ) { &#xA;&#x9;return sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypesFactory.eINSTANCE.createDouble(); &#xA;} &#xA;if ( getLibClass ( &quot;Integer&quot; ) .equals ( this ) ) { &#xA;&#x9;return sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypesFactory.eINSTANCE.createInt(); &#xA;} &#xA;if ( getLibClass ( &quot;Long&quot; ) .equals ( this ) ) { &#xA;&#x9;return sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypesFactory.eINSTANCE.createLong(); &#xA;} &#xA;if ( getLibClass ( &quot;Short&quot; ) .equals ( this ) ) { &#xA;&#x9;return sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypesFactory.eINSTANCE.createShort(); &#xA;} &#xA;if ( getLibClass ( &quot;Void&quot; ) .equals ( this ) ) { &#xA;&#x9;return sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypesFactory.eINSTANCE.createVoid(); &#xA;} &#xA;return null ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; @param this&#xA; @return primitive type, if the class can be wrapped&#xA;"/>
            </tags>
          </tags>
        </tags>
        <tags name="ref">
          <attributes name="name" value="extends"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="TypeReference"/>
        </tags>
        <tags name="ref">
          <attributes name="name" value="defaultExtends"/>
          <attributes name="transient" value="true"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="TypeReference"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="Interface"/>
        <tags name="EOperation">
          <attributes name="name" value="getAllSuperClassifiers"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="type" value="ConcreteClassifier"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="org.eclipse.emf.common.util.EList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > result = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > ( ) ; &#xA;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypeReference typeArg : this .getExtends ( ) ) { &#xA;&#x9;//use ConcreteClassifier instead of Interface because java.lang.Object can also act as implemented interface&#xA;sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier superInterface = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) typeArg .getTarget ( ) ; &#xA;&#x9;if ( superInterface != null ) { &#xA;&#x9;&#x9;result .add ( superInterface ) ; &#xA;&#x9;&#x9;if ( superInterface instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Interface ) { &#xA;&#x9;&#x9;&#x9;result .addAll ( ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Interface ) superInterface ) .getAllSuperClassifiers ( ) ) ; &#xA;&#x9;&#x9;} &#xA;&#x9;} &#xA;} &#xA;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypeReference typeArg : this .getDefaultExtends ( ) ) { &#xA;&#x9;//use ConcreteClassifier instead of Interface because java.lang.Object can also act as implemented interface&#xA;sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier superInterface = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) typeArg .getTarget ( ) ; &#xA;&#x9;if ( superInterface != null ) { &#xA;&#x9;&#x9;result .add ( superInterface ) ; &#xA;&#x9;&#x9;if ( superInterface instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Interface ) { &#xA;&#x9;&#x9;&#x9;result .addAll ( ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Interface ) superInterface ) .getAllSuperClassifiers ( ) ) ; &#xA;&#x9;&#x9;} &#xA;&#x9;} &#xA;} &#xA;return result ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; @return all interfaces extended by this interface. The type is &#xA; ConcreteClassifier, because java.lang.Object is also extended although&#xA; it is a Class.&#xA;"/>
            </tags>
          </tags>
        </tags>
        <tags name="ref">
          <attributes name="name" value="extends"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="TypeReference"/>
        </tags>
        <tags name="ref">
          <attributes name="name" value="defaultExtends"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="transient" value="true"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="TypeReference"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="Enumeration"/>
        <tags name="EOperation">
          <attributes name="name" value="getAllSuperClassifiers"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="type" value="ConcreteClassifier"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="org.eclipse.emf.common.util.EList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > result = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > ( ) ; &#xA;//enumerations inherit from java.lang.Enum&#xA;sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class enumClass = getLibClass ( &quot;Enum&quot; ) ; &#xA;result .add ( enumClass ) ; &#xA;result .addAll ( enumClass .getAllSuperClassifiers ( ) ) ; &#xA;//collect all implemented interfaces&#xA;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypeReference typeArg : this .getImplements ( ) ) { &#xA;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier superInterface = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) typeArg .getTarget ( ) ; &#xA;&#x9;if ( superInterface != null ) { &#xA;&#x9;&#x9;result .add ( superInterface ) ; &#xA;&#x9;&#x9;if ( superInterface instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Interface ) { &#xA;&#x9;&#x9;&#x9;result .addAll ( ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Interface ) superInterface ) .getAllSuperClassifiers ( ) ) ; &#xA;&#x9;&#x9;} &#xA;&#x9;} &#xA;} &#xA;return result ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; @return all interfaces extended by this enumeration.&#xA;"/>
            </tags>
          </tags>
        </tags>
        <tags name="ref">
          <attributes name="name" value="constants"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="EnumConstant"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="Annotation"/>
        <tags name="EOperation">
          <attributes name="name" value="getAllSuperClassifiers"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="type" value="ConcreteClassifier"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="org.eclipse.emf.common.util.EList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > result = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > ( ) ; &#xA;result .add ( getAnnotationInterface ( ) ) ; &#xA;return result ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; @return &lt;code>java.lang.annotation.Annotation&lt;/code> &#xA;"/>
            </tags>
          </tags>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="AnonymousClass"/>
        <tags name="EOperation">
          <attributes name="name" value="getAllSuperClassifiers"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="type" value="ConcreteClassifier"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="org.eclipse.emf.common.util.EList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > superClassifierList = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > ( ) ; &#xA;sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier superClassifier = getSuperClassifier ( ) ; &#xA;if ( superClassifier != null ) { &#xA;&#x9;superClassifierList .add ( superClassifier ) ; &#xA;&#x9;superClassifierList .addAll ( superClassifier .getAllSuperClassifiers ( ) ) ; &#xA;} else { &#xA;&#x9;superClassifierList .add ( getObjectClass ( ) ) ; &#xA;} &#xA;return superClassifierList ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; @return a view on all super classifiers&#xA;"/>
            </tags>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="getSuperClassifier"/>
          <attributes name="type" value="ConcreteClassifier"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="sg.edu.nus.comp.simTL.language.java.simTL4J.instantiations.NewConstructorCall ncCall = null ; &#xA;if ( this .eContainer ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.instantiations.NewConstructorCall ) { &#xA;&#x9;ncCall = ( sg.edu.nus.comp.simTL.language.java.simTL4J.instantiations.NewConstructorCall ) this .eContainer ( ) ; &#xA;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier superClassifier = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) ncCall .getTypeReference ( ) .getTarget ( ) ; &#xA;&#x9;return superClassifier ; &#xA;} else if ( this .eContainer ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.members.EnumConstant ) { &#xA;&#x9;if ( this .eContainer ( ) .eContainer ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Enumeration ) { &#xA;&#x9;&#x9;return ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Enumeration ) this .eContainer ( ) .eContainer ( ) ; &#xA;&#x9;} &#xA;} &#xA;return null ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; @return the direct super classifier&#xA;"/>
            </tags>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="getAllMembers"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="type" value="Member"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="org.eclipse.emf.common.util.EList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.members.Member > memberList = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.members.Member > ( ) ; &#xA;memberList .addAll ( this .getMembers ( ) ) ; &#xA;memberList .addAll ( this .getDefaultMembers ( ) ) ; &#xA;sg.edu.nus.comp.simTL.language.java.simTL4J.instantiations.NewConstructorCall ncCall = null ; &#xA;if ( this .eContainer ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.instantiations.NewConstructorCall ) { &#xA;&#x9;ncCall = ( sg.edu.nus.comp.simTL.language.java.simTL4J.instantiations.NewConstructorCall ) this .eContainer ( ) ; &#xA;&#x9;; &#xA;} &#xA;if ( ncCall == null ) { &#xA;&#x9;return memberList ; &#xA;} else { &#xA;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier classifier = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) ncCall .getTypeReference ( ) .getTarget ( ) ; &#xA;&#x9;if ( classifier != null ) { &#xA;&#x9;&#x9;org.eclipse.emf.common.util.EList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.members.Member > superMemberList = classifier .getAllMembers ( context ) ; &#xA;&#x9;&#x9;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.members.Member superMember : superMemberList ) { &#xA;&#x9;&#x9;&#x9;//exclude private members&#xA;if ( superMember instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.modifiers.AnnotableAndModifiable ) { &#xA;&#x9;&#x9;&#x9;&#x9;if ( superMember .eIsProxy ( ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;superMember = ( sg.edu.nus.comp.simTL.language.java.simTL4J.members.Member ) org.eclipse.emf.ecore.util.EcoreUtil .resolve ( superMember , this ) ; &#xA;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.modifiers.AnnotableAndModifiable modifiable = ( sg.edu.nus.comp.simTL.language.java.simTL4J.modifiers.AnnotableAndModifiable ) superMember ; &#xA;&#x9;&#x9;&#x9;&#x9;if ( ! modifiable .isHidden ( context ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;memberList .add ( superMember ) ; &#xA;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;} else { &#xA;&#x9;&#x9;&#x9;&#x9;memberList .add ( superMember ) ; &#xA;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;} &#xA;&#x9;} &#xA;&#x9;return memberList ; &#xA;} &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; @param context to check protected visibility&#xA; @return a view on all members including super classifiers' members&#xA;"/>
            </tags>
          </tags>
          <tags name="EParameter">
            <attributes name="name" value="context"/>
            <attributes name="type" value="Commentable"/>
          </tags>
        </tags>
      </tags>
    </tags>
    <tags name="package">
      <attributes name="name" value="commons"/>
      <attributes name="nsURI" value="http://www.emftext.org/simTL4J/commons"/>
      <attributes name="nsPrefix" value="commons"/>
      <tags name="class">
        <attributes name="name" value="Commentable"/>
        <attributes name="abstract" value="true"/>
        <tags name="EOperation">
          <attributes name="name" value="getConcreteClassifier"/>
          <attributes name="type" value="ConcreteClassifier"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="return ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) sg.edu.nus.comp.simTL.language.java.simTL4J.JavaClasspath .get ( this ) .getClassifier ( name ) ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value=""/>
            </tags>
          </tags>
          <tags name="EParameter">
            <attributes name="name" value="name"/>
            <attributes name="type" value="EString"/>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="getConcreteClassifiers"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="type" value="ConcreteClassifier"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="org.eclipse.emf.common.util.EList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > result = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > ( ) ; &#xA;for ( org.eclipse.emf.ecore.EObject classifier : sg.edu.nus.comp.simTL.language.java.simTL4J.JavaClasspath .get ( this ) .getClassifiers ( packageName , classifierQuery ) ) { &#xA;&#x9;result .add ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) classifier ) ; &#xA;} &#xA;return result ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value=""/>
            </tags>
          </tags>
          <tags name="EParameter">
            <attributes name="name" value="packageName"/>
            <attributes name="type" value="EString"/>
          </tags>
          <tags name="EParameter">
            <attributes name="name" value="classifierQuery"/>
            <attributes name="type" value="EString"/>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="getLibClass"/>
          <attributes name="type" value="Class"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="if ( this .eResource ( ) == null ) { &#xA;&#x9;throw new java.lang.IllegalArgumentException ( &quot;object context element must have a resource&quot; ) ; &#xA;} &#xA;sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class classClass = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class ) getConcreteClassifier ( &quot;java.lang.&quot; + name ) ; &#xA;classClass = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class ) org.eclipse.emf.ecore.util.EcoreUtil .resolve ( classClass , this ) ; &#xA;return classClass ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; Finds the &lt;code>sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class&lt;/code>&#xA; representing the class with the given name located in &lt;code>java.lang&lt;/code>.&#xA; &#xA; @param name name of the Class&#xA; @return the Class&#xA;"/>
            </tags>
          </tags>
          <tags name="EParameter">
            <attributes name="name" value="name"/>
            <attributes name="type" value="EString"/>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="getLibInterface"/>
          <attributes name="type" value="Interface"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="if ( this .eResource ( ) == null ) { &#xA;&#x9;throw new java.lang.IllegalArgumentException ( &quot;object context element  must have a resource&quot; ) ; &#xA;} &#xA;sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier classClass = getConcreteClassifier ( &quot;java.lang.&quot; + name ) ; &#xA;return ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Interface ) org.eclipse.emf.ecore.util.EcoreUtil .resolve ( classClass , this ) ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; Finds the &lt;code>sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Interface&lt;/code>&#xA; representing the interface with the given name located in &lt;code>java.lang&lt;/code>.&#xA; &#xA; @param name name of the Interface&#xA; @return the Class&#xA;"/>
            </tags>
          </tags>
          <tags name="EParameter">
            <attributes name="name" value="name"/>
            <attributes name="type" value="EString"/>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="getClassClass"/>
          <attributes name="type" value="Class"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="return getLibClass ( &quot;Class&quot; ) ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; Finds the &lt;code>sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class&lt;/code>&#xA; representing &lt;code>java.lang.Class&lt;/code>.&#xA; &#xA; @return the Class&#xA;"/>
            </tags>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="getObjectClass"/>
          <attributes name="type" value="Class"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="return getLibClass ( &quot;Object&quot; ) ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; Finds the &lt;code>sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class&lt;/code>&#xA; representing &lt;code>java.lang.Object&lt;/code>.&#xA; &#xA; @return the Class&#xA;"/>
            </tags>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="getStringClass"/>
          <attributes name="type" value="Class"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="return getLibClass ( &quot;String&quot; ) ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; Finds the &lt;code>sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class&lt;/code>&#xA; representing &lt;code>java.lang.String&lt;/code>.&#xA; &#xA; @return the Class&#xA;"/>
            </tags>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="getAnnotationInterface"/>
          <attributes name="type" value="Interface"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="if ( this .eResource ( ) == null ) { &#xA;&#x9;throw new java.lang.IllegalArgumentException ( &quot;object context element must have a resource&quot; ) ; &#xA;} &#xA;sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Interface annotationClass = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Interface ) org.eclipse.emf.ecore.util.EcoreUtil .resolve ( getConcreteClassifier ( &quot;java.lang.annotation.Annotation&quot; ) , this ) ; &#xA;return annotationClass ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; Finds the &lt;code>sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Interface&lt;/code>&#xA; representing &lt;code>java.lang.annotation.Annotation&lt;/code>.&#xA; &#xA; @return the Class&#xA;"/>
            </tags>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="getContainingAnnotationInstance"/>
          <attributes name="type" value="AnnotationInstance"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="org.eclipse.emf.ecore.EObject value = this ; &#xA;while ( ! ( value instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.annotations.AnnotationInstance ) &amp;&amp; value != null ) { &#xA;&#x9;value = value .eContainer ( ) ; &#xA;} &#xA;return ( sg.edu.nus.comp.simTL.language.java.simTL4J.annotations.AnnotationInstance ) value ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; Finds the containing annotation instance for the given element.&#xA; &#xA; @param value&#xA; @return containing annotation instance&#xA;"/>
            </tags>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="getContainingAnonymousClass"/>
          <attributes name="type" value="AnonymousClass"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="org.eclipse.emf.ecore.EObject value = this ; &#xA;while ( //do not jump over other classifiers &#xA;! ( value instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.AnonymousClass ) &amp;&amp; ! ( value instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) &amp;&amp; value != null ) { &#xA;&#x9;value = value .eContainer ( ) ; &#xA;} &#xA;if ( ! ( value instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.AnonymousClass ) ) { &#xA;&#x9;return null ; &#xA;} &#xA;return ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.AnonymousClass ) value ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; Finds the containing anonymous class for the given element.&#xA; &#xA; @param value&#xA; @return containing anonymous class &#xA;"/>
            </tags>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="getContainingConcreteClassifier"/>
          <attributes name="type" value="ConcreteClassifier"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="org.eclipse.emf.ecore.EObject value = this ; &#xA;while ( ! ( value instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) &amp;&amp; value != null ) { &#xA;&#x9;value = value .eContainer ( ) ; &#xA;} &#xA;return ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) value ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; Finds the containing classifier for the given element.&#xA; &#xA; @param value&#xA; @return containing classifier&#xA;"/>
            </tags>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="getContainingCompilationUnit"/>
          <attributes name="type" value="CompilationUnit"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="org.eclipse.emf.ecore.EObject value = this ; &#xA;while ( ! ( value instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.containers.CompilationUnit ) &amp;&amp; value != null ) { &#xA;&#x9;value = value .eContainer ( ) ; &#xA;} &#xA;return ( sg.edu.nus.comp.simTL.language.java.simTL4J.containers.CompilationUnit ) value ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; Finds the containing compilation unit for the given element.&#xA; &#xA; @param value&#xA; @return containing compilation unit&#xA;"/>
            </tags>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="getContainingPackageName"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="type" value="EString"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="sg.edu.nus.comp.simTL.language.java.simTL4J.containers.CompilationUnit cu = getContainingCompilationUnit ( ) ; &#xA;if ( cu == null ) { &#xA;&#x9;return null ; &#xA;} &#xA;int idx = cu .getNamespaces ( ) .size ( ) ; &#xA;if ( cu .getName ( ) != null ) { &#xA;&#x9;char [] fullName = cu .getName ( ) .toCharArray ( ) ; &#xA;&#x9;for ( int i = 0 ; i &lt; fullName .length ; i ++ ) { &#xA;&#x9;&#x9;if ( fullName [ i ] == '$' ) { &#xA;&#x9;&#x9;&#x9;idx -- ; &#xA;&#x9;&#x9;} &#xA;&#x9;} &#xA;} &#xA;return new org.eclipse.emf.common.util.BasicEList &lt; java.lang.String > ( cu .getNamespaces ( ) .subList ( 0 , idx ) ) ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value=""/>
            </tags>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="getParentConcreteClassifier"/>
          <attributes name="type" value="ConcreteClassifier"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier classifier = getContainingConcreteClassifier ( ) ; &#xA;if ( classifier == null ) { &#xA;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.containers.CompilationUnit cu = getContainingCompilationUnit ( ) ; &#xA;&#x9;//maybe the outer classifier is in an extra cu&#xA;classifier = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) org.eclipse.emf.ecore.util.EcoreUtil .resolve ( getConcreteClassifier ( cu .getNamespacesAsString ( ) ) , this ) ; &#xA;&#x9;if ( classifier .eIsProxy ( ) ) { &#xA;&#x9;&#x9;classifier = null ; &#xA;&#x9;} &#xA;} &#xA;return classifier ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; Finds the classifier that is the parent of this element. If &#xA; this element is an inner classifier the parent classifier does&#xA; not necessarily contain this element, since it can reside in &#xA; a different compilation unit when stored in byte code.&#xA; &#xA; @param value&#xA; @return containing classifier&#xA;"/>
            </tags>
          </tags>
        </tags>
        <tags name="attr">
          <attributes name="name" value="comments"/>
          <attributes name="unique" value="false"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="type" value="//EString"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="NamedElement"/>
        <attributes name="abstract" value="true"/>
        <tags name="attr">
          <attributes name="name" value="name"/>
          <attributes name="type" value="//EString"/>
        </tags>
        <tags name="ref">
          <attributes name="name" value="name_PH"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="TPlaceholder"/>
          <tags name="EAnnotation">
            <attributes name="source" value="xframes"/>
          </tags>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="NamespaceAwareElement"/>
        <attributes name="abstract" value="true"/>
        <tags name="EOperation">
          <attributes name="name" value="getNamespacesAsString"/>
          <attributes name="type" value="EString"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="java.lang.String containerName = &quot;&quot; ; &#xA;for ( java.util.Iterator &lt; java.lang.String > it = getNamespaces ( ) .iterator ( ) ; it .hasNext ( ) ; ) { &#xA;&#x9;java.lang.String namespaceFragment = it .next ( ) ; &#xA;&#x9;//does it point at a classifier or a package as container?&#xA;java.lang.String assumedPackageName = containerName + namespaceFragment + sg.edu.nus.comp.simTL.language.java.simTL4J.JavaUniquePathConstructor .PACKAGE_SEPARATOR ; &#xA;&#x9;java.lang.String assumedClassifierName = containerName + namespaceFragment + sg.edu.nus.comp.simTL.language.java.simTL4J.JavaUniquePathConstructor .CLASSIFIER_SEPARATOR ; &#xA;&#x9;if ( it .hasNext ( ) ) { &#xA;&#x9;&#x9;if ( sg.edu.nus.comp.simTL.language.java.simTL4J.JavaClasspath .get ( this ) .existsPackage ( assumedClassifierName ) ) { &#xA;&#x9;&#x9;&#x9;containerName = assumedClassifierName ; &#xA;&#x9;&#x9;} else { &#xA;&#x9;&#x9;&#x9;//assume package&#xA;containerName = assumedPackageName ; &#xA;&#x9;&#x9;} &#xA;&#x9;} else { &#xA;&#x9;&#x9;if ( sg.edu.nus.comp.simTL.language.java.simTL4J.JavaClasspath .get ( this ) .existsPackage ( assumedPackageName ) ) { &#xA;&#x9;&#x9;&#x9;//a package is always available as key&#xA;containerName = assumedPackageName ; &#xA;&#x9;&#x9;} else { &#xA;&#x9;&#x9;&#x9;//assume classifier that is not key, but value in the map&#xA;containerName = assumedClassifierName ; &#xA;&#x9;&#x9;} &#xA;&#x9;} &#xA;} &#xA;return containerName ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; Converts the namespaces array of the given namespace aware element into&#xA; a String representation using package (.) and class ($) delimiters. The method&#xA; uses the classpath to determine for each element of the namespace if it &#xA; identifies a package or a class.&#xA; &#xA; @param naElement&#xA; @return single string representation of namespace&#xA;"/>
            </tags>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="getClassifierAtNamespaces"/>
          <attributes name="type" value="ConcreteClassifier"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="java.lang.String fullQualifiedName = getNamespacesAsString ( ) ; &#xA;if ( fullQualifiedName == null || fullQualifiedName .endsWith ( sg.edu.nus.comp.simTL.language.java.simTL4J.JavaUniquePathConstructor .PACKAGE_SEPARATOR ) ) { &#xA;&#x9;return null ; &#xA;} &#xA;//cut the trailing separator&#xA;fullQualifiedName = fullQualifiedName .substring ( 0 , fullQualifiedName .length ( ) - 1 ) ; &#xA;return ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) org.eclipse.emf.ecore.util.EcoreUtil .resolve ( getConcreteClassifier ( fullQualifiedName ) , this ) ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; Assuming the namespace&#xA; identifies a classifier, that classifier is returned.&#xA; &#xA; @return classifier at namespace&#xA;"/>
            </tags>
          </tags>
        </tags>
        <tags name="attr">
          <attributes name="name" value="namespaces"/>
          <attributes name="unique" value="false"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="type" value="//EString"/>
        </tags>
      </tags>
    </tags>
    <tags name="package">
      <attributes name="name" value="containers"/>
      <attributes name="nsURI" value="http://www.emftext.org/simTL4J/containers"/>
      <attributes name="nsPrefix" value="containers"/>
      <tags name="class">
        <attributes name="name" value="JavaRoot"/>
        <attributes name="abstract" value="true"/>
        <tags name="EOperation">
          <attributes name="name" value="getClassifiersInSamePackage"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="type" value="ConcreteClassifier"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="org.eclipse.emf.common.util.EList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > defaultImportList = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > ( ) ; &#xA;java.lang.String packageName = getNamespacesAsString ( ) ; &#xA;defaultImportList .addAll ( getConcreteClassifiers ( packageName , &quot;*&quot; ) ) ; &#xA;return defaultImportList ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; @return all classes in the same package imports&#xA;"/>
            </tags>
          </tags>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="CompilationUnit"/>
        <tags name="EOperation">
          <attributes name="name" value="getContainedClassifier"/>
          <attributes name="type" value="ConcreteClassifier"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="if ( name == null ) { &#xA;&#x9;return null ; &#xA;} &#xA;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier candidate : getClassifiers ( ) ) { &#xA;&#x9;if ( name .equals ( candidate .getName ( ) ) ) { &#xA;&#x9;&#x9;return candidate ; &#xA;&#x9;} &#xA;} &#xA;return null ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; @param name name of the contained Classifier&#xA; @return the Classifier&#xA;"/>
            </tags>
          </tags>
          <tags name="EParameter">
            <attributes name="name" value="name"/>
            <attributes name="type" value="EString"/>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="getClassifiersInSamePackage"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="type" value="ConcreteClassifier"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="org.eclipse.emf.common.util.EList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > defaultImportList = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > ( ) ; &#xA;java.lang.String packageName = getNamespacesAsString ( ) ; &#xA;//locally defined in this container&#xA;defaultImportList .addAll ( getClassifiers ( ) ) ; &#xA;defaultImportList .addAll ( getConcreteClassifiers ( packageName , &quot;*&quot; ) ) ; &#xA;return defaultImportList ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; @return all classes in the same package imports&#xA;"/>
            </tags>
          </tags>
        </tags>
        <tags name="ref">
          <attributes name="name" value="classifiers"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="ConcreteClassifier"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="Package"/>
        <tags name="ref">
          <attributes name="name" value="compilationUnits"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="CompilationUnit"/>
        </tags>
        <tags name="ref">
          <attributes name="name" value="subpackages"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="Package"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="EmptyModel"/>
      </tags>
    </tags>
    <tags name="package">
      <attributes name="name" value="expressions"/>
      <attributes name="nsURI" value="http://www.emftext.org/simTL4J/expressions"/>
      <attributes name="nsPrefix" value="expressions"/>
      <tags name="class">
        <attributes name="name" value="ExpressionList"/>
        <tags name="ref">
          <attributes name="name" value="expressions"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="Expression"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="Expression"/>
        <attributes name="abstract" value="true"/>
        <tags name="EOperation">
          <attributes name="name" value="getType"/>
          <attributes name="type" value="Type"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="return getOneType ( false ) ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; Returns the type of the expression considering all concrete&#xA; subtypes of Expression.&#xA; &#xA; @return type of expression&#xA;"/>
            </tags>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="getAlternativeType"/>
          <attributes name="type" value="Type"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="return getOneType ( true ) ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value=""/>
            </tags>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="getOneType"/>
          <attributes name="type" value="Type"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class stringClass = getStringClass ( ) ; &#xA;sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type type = null ; &#xA;if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) { &#xA;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference reference = ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) this ; &#xA;&#x9;//navigate down references&#xA;while ( reference .getNext ( ) != null ) { &#xA;&#x9;&#x9;reference = reference .getNext ( ) ; &#xA;&#x9;} &#xA;&#x9;type = reference .getReferencedType ( ) ; &#xA;} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.literals.Literal ) { &#xA;&#x9;type = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.literals.Literal ) this ) .getType ( ) ; &#xA;} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.CastExpression ) { &#xA;&#x9;type = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.CastExpression ) this ) .getTypeReference ( ) .getTarget ( ) ; &#xA;} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.AssignmentExpression ) { &#xA;&#x9;type = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.AssignmentExpression ) this ) .getChild ( ) .getOneType ( alternative ) ; &#xA;} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.ConditionalExpression &amp;&amp; ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.ConditionalExpression ) this ) .getExpressionIf ( ) != null ) { &#xA;&#x9;if ( alternative ) { &#xA;&#x9;&#x9;type = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.ConditionalExpression ) this ) .getExpressionElse ( ) .getOneType ( alternative ) ; &#xA;&#x9;} else { &#xA;&#x9;&#x9;type = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.ConditionalExpression ) this ) .getExpressionIf ( ) .getOneType ( alternative ) ; &#xA;&#x9;} &#xA;} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.EqualityExpression || this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.RelationExpression || this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.ConditionalOrExpression || this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.ConditionalAndExpression || this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.InstanceOfExpression ) { &#xA;&#x9;type = getLibClass ( &quot;Boolean&quot; ) ; &#xA;} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.AdditiveExpression || this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.MultiplicativeExpression || this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.InclusiveOrExpression || this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.ExclusiveOrExpression || this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.AndExpression || this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.ShiftExpression ) { &#xA;&#x9;if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.AdditiveExpression ) { &#xA;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.AdditiveExpression additiveExpression = ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.AdditiveExpression ) this ; &#xA;&#x9;&#x9;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.Expression subExp : additiveExpression .getChildren ( ) ) { &#xA;&#x9;&#x9;&#x9;if ( stringClass .equals ( subExp .getOneType ( alternative ) ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;//special case: string concatenation&#xA;return stringClass ; &#xA;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;} &#xA;&#x9;} &#xA;&#x9;@ SuppressWarnings ( &quot;unchecked&quot; ) sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.Expression subExp = ( ( org.eclipse.emf.common.util.EList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.Expression > ) this .eGet ( this .eClass ( ) .getEStructuralFeature ( &quot;children&quot; ) ) ) .get ( 0 ) ; &#xA;&#x9;return subExp .getOneType ( alternative ) ; &#xA;} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.UnaryExpression ) { &#xA;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.Expression subExp = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.UnaryExpression ) this ) .getChild ( ) ; &#xA;&#x9;return subExp .getOneType ( alternative ) ; &#xA;} else for ( org.eclipse.emf.common.util.TreeIterator &lt; org.eclipse.emf.ecore.EObject > i = this .eAllContents ( ) ; i .hasNext ( ) ; ) { &#xA;&#x9;org.eclipse.emf.ecore.EObject next = i .next ( ) ; &#xA;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type nextType = null ; &#xA;&#x9;if ( next instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.PrimaryExpression ) { &#xA;&#x9;&#x9;if ( next instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) { &#xA;&#x9;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ref = ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) next ; &#xA;&#x9;&#x9;&#x9;//navigate down references&#xA;while ( ref .getNext ( ) != null ) { &#xA;&#x9;&#x9;&#x9;&#x9;ref = ref .getNext ( ) ; &#xA;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;next = ref ; &#xA;&#x9;&#x9;} &#xA;&#x9;&#x9;if ( next instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.literals.Literal ) { &#xA;&#x9;&#x9;&#x9;nextType = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.literals.Literal ) next ) .getType ( ) ; &#xA;&#x9;&#x9;} else if ( next instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.CastExpression ) { &#xA;&#x9;&#x9;&#x9;nextType = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.CastExpression ) next ) .getTypeReference ( ) .getTarget ( ) ; &#xA;&#x9;&#x9;} else { &#xA;&#x9;&#x9;&#x9;nextType = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) next ) .getReferencedType ( ) ; &#xA;&#x9;&#x9;} &#xA;&#x9;&#x9;i .prune ( ) ; &#xA;&#x9;} &#xA;&#x9;if ( nextType != null ) { &#xA;&#x9;&#x9;type = nextType ; &#xA;&#x9;&#x9;//in the special case that this is an expression with&#xA;//some string included, everything is converted to string&#xA;if ( stringClass .equals ( type ) ) { &#xA;&#x9;&#x9;&#x9;break ; &#xA;&#x9;&#x9;} &#xA;&#x9;} &#xA;} &#xA;//type can be null in cases of unresolved/unresolvable proxies&#xA;return type ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value=""/>
            </tags>
          </tags>
          <tags name="EParameter">
            <attributes name="name" value="alternative"/>
            <attributes name="type" value="EBoolean"/>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="getArrayDimension"/>
          <attributes name="type" value="ELong"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="long size = 0 ; &#xA;sg.edu.nus.comp.simTL.language.java.simTL4J.arrays.ArrayTypeable arrayType = null ; &#xA;if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.NestedExpression &amp;&amp; ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.NestedExpression ) this ) .getNext ( ) == null ) { &#xA;&#x9;return ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.NestedExpression ) this ) .getExpression ( ) .getArrayDimension ( ) - ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.NestedExpression ) this ) .getArraySelectors ( ) .size ( ) ; &#xA;} &#xA;if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.ConditionalExpression &amp;&amp; ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.ConditionalExpression ) this ) .getExpressionIf ( ) != null ) { &#xA;&#x9;return ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.ConditionalExpression ) this ) .getExpressionIf ( ) .getArrayDimension ( ) ; &#xA;} &#xA;if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.AssignmentExpression ) { &#xA;&#x9;return ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.AssignmentExpression ) this ) .getValue ( ) .getArrayDimension ( ) ; &#xA;} &#xA;if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.InstanceOfExpression ) { &#xA;&#x9;return 0 ; &#xA;} &#xA;if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) { &#xA;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference reference = ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) this ; &#xA;&#x9;while ( reference .getNext ( ) != null ) { &#xA;&#x9;&#x9;reference = reference .getNext ( ) ; &#xA;&#x9;} &#xA;&#x9;//an array clone? -> dimension defined by cloned array&#xA;if ( reference instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.ElementReference &amp;&amp; reference .getPrevious ( ) != null ) { &#xA;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.references.ReferenceableElement target = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.ElementReference ) reference ) .getTarget ( ) ; &#xA;&#x9;&#x9;if ( target instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.members.Method ) { &#xA;&#x9;&#x9;&#x9;if ( &quot;clone&quot; .equals ( ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.members.Method ) target ) .getName ( ) ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;reference = ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) reference .eContainer ( ) ; &#xA;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;} &#xA;&#x9;} &#xA;&#x9;if ( reference instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.ElementReference ) { &#xA;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.references.ElementReference elementReference = ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.ElementReference ) reference ; &#xA;&#x9;&#x9;if ( elementReference .getTarget ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.arrays.ArrayTypeable ) { &#xA;&#x9;&#x9;&#x9;arrayType = ( sg.edu.nus.comp.simTL.language.java.simTL4J.arrays.ArrayTypeable ) elementReference .getTarget ( ) ; &#xA;&#x9;&#x9;} &#xA;&#x9;&#x9;if ( elementReference .getTarget ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.variables.AdditionalLocalVariable ) { &#xA;&#x9;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.variables.AdditionalLocalVariable additionalLocalVariable = ( sg.edu.nus.comp.simTL.language.java.simTL4J.variables.AdditionalLocalVariable ) elementReference .getTarget ( ) ; &#xA;&#x9;&#x9;&#x9;arrayType = ( sg.edu.nus.comp.simTL.language.java.simTL4J.variables.LocalVariable ) additionalLocalVariable .eContainer ( ) ; &#xA;&#x9;&#x9;&#x9;size += additionalLocalVariable .getArrayDimensionsAfter ( ) .size ( ) ; &#xA;&#x9;&#x9;&#x9;size -= arrayType .getArrayDimensionsAfter ( ) .size ( ) ; &#xA;&#x9;&#x9;} &#xA;&#x9;&#x9;if ( elementReference .getTarget ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.members.AdditionalField ) { &#xA;&#x9;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.members.AdditionalField additionalField = ( sg.edu.nus.comp.simTL.language.java.simTL4J.members.AdditionalField ) elementReference .getTarget ( ) ; &#xA;&#x9;&#x9;&#x9;arrayType = ( sg.edu.nus.comp.simTL.language.java.simTL4J.members.Field ) additionalField .eContainer ( ) ; &#xA;&#x9;&#x9;&#x9;size += additionalField .getArrayDimensionsAfter ( ) .size ( ) ; &#xA;&#x9;&#x9;&#x9;size -= arrayType .getArrayDimensionsAfter ( ) .size ( ) ; &#xA;&#x9;&#x9;} &#xA;&#x9;} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.arrays.ArrayTypeable ) { &#xA;&#x9;&#x9;size += ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.arrays.ArrayTypeable ) this ) .getArrayDimensionsBefore ( ) .size ( ) + ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.arrays.ArrayTypeable ) this ) .getArrayDimensionsAfter ( ) .size ( ) ; &#xA;&#x9;&#x9;if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.parameters.VariableLengthParameter ) { &#xA;&#x9;&#x9;&#x9;size ++ ; &#xA;&#x9;&#x9;} &#xA;&#x9;} &#xA;&#x9;size -= reference .getArraySelectors ( ) .size ( ) ; &#xA;} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.arrays.ArrayTypeable ) { &#xA;&#x9;size += ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.arrays.ArrayTypeable ) this ) .getArrayDimensionsBefore ( ) .size ( ) + ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.arrays.ArrayTypeable ) this ) .getArrayDimensionsAfter ( ) .size ( ) ; &#xA;&#x9;if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.parameters.VariableLengthParameter ) { &#xA;&#x9;&#x9;size ++ ; &#xA;&#x9;} &#xA;} &#xA;if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.arrays.ArrayInstantiationBySize ) { &#xA;&#x9;size += ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.arrays.ArrayInstantiationBySize ) this ) .getSizes ( ) .size ( ) ; &#xA;} &#xA;if ( arrayType != null ) { &#xA;&#x9;size += arrayType .getArrayDimension ( ) ; &#xA;} &#xA;return size ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value=""/>
            </tags>
          </tags>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="AssignmentExpression"/>
        <tags name="ref">
          <attributes name="name" value="child"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="AssignmentExpressionChild"/>
        </tags>
        <tags name="ref">
          <attributes name="name" value="assignmentOperator"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="AssignmentOperator"/>
        </tags>
        <tags name="ref">
          <attributes name="name" value="value"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="Expression"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="AssignmentExpressionChild"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="ConditionalExpression"/>
        <tags name="ref">
          <attributes name="name" value="child"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="ConditionalExpressionChild"/>
        </tags>
        <tags name="ref">
          <attributes name="name" value="expressionIf"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="Expression"/>
        </tags>
        <tags name="ref">
          <attributes name="name" value="expressionElse"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="AssignmentExpressionChild"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="ConditionalExpressionChild"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="ConditionalOrExpression"/>
        <tags name="ref">
          <attributes name="name" value="children"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="ConditionalOrExpressionChild"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="ConditionalOrExpressionChild"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="ConditionalAndExpression"/>
        <tags name="ref">
          <attributes name="name" value="children"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="ConditionalAndExpressionChild"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="ConditionalAndExpressionChild"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="InclusiveOrExpression"/>
        <tags name="ref">
          <attributes name="name" value="children"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="InclusiveOrExpressionChild"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="InclusiveOrExpressionChild"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="ExclusiveOrExpression"/>
        <tags name="ref">
          <attributes name="name" value="children"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="ExclusiveOrExpressionChild"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="ExclusiveOrExpressionChild"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="AndExpression"/>
        <tags name="ref">
          <attributes name="name" value="children"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="AndExpressionChild"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="AndExpressionChild"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="EqualityExpression"/>
        <tags name="ref">
          <attributes name="name" value="equalityOperators"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="EqualityOperator"/>
        </tags>
        <tags name="ref">
          <attributes name="name" value="children"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="EqualityExpressionChild"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="EqualityExpressionChild"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="InstanceOfExpression"/>
        <tags name="ref">
          <attributes name="name" value="child"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="InstanceOfExpressionChild"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="InstanceOfExpressionChild"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="RelationExpression"/>
        <tags name="ref">
          <attributes name="name" value="children"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="RelationExpressionChild"/>
        </tags>
        <tags name="ref">
          <attributes name="name" value="relationOperators"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="RelationOperator"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="RelationExpressionChild"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="ShiftExpression"/>
        <tags name="ref">
          <attributes name="name" value="children"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="ShiftExpressionChild"/>
        </tags>
        <tags name="ref">
          <attributes name="name" value="shiftOperators"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="ShiftOperator"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="ShiftExpressionChild"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="AdditiveExpression"/>
        <tags name="ref">
          <attributes name="name" value="children"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="AdditiveExpressionChild"/>
        </tags>
        <tags name="ref">
          <attributes name="name" value="additiveOperators"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="AdditiveOperator"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="AdditiveExpressionChild"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="MultiplicativeExpression"/>
        <tags name="ref">
          <attributes name="name" value="children"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="MultiplicativeExpressionChild"/>
        </tags>
        <tags name="ref">
          <attributes name="name" value="multiplicativeOperators"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="MultiplicativeOperator"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="MultiplicativeExpressionChild"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="UnaryExpression"/>
        <tags name="ref">
          <attributes name="name" value="operators"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="UnaryOperator"/>
        </tags>
        <tags name="ref">
          <attributes name="name" value="child"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="UnaryExpressionChild"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="UnaryExpressionChild"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="UnaryModificationExpression"/>
        <attributes name="abstract" value="true"/>
        <tags name="ref">
          <attributes name="name" value="child"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="UnaryModificationExpressionChild"/>
        </tags>
        <tags name="ref">
          <attributes name="name" value="operator"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="UnaryModificationOperator"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="PrefixUnaryModificationExpression"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="SuffixUnaryModificationExpression"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="UnaryModificationExpressionChild"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="CastExpression"/>
        <tags name="ref">
          <attributes name="name" value="child"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="MultiplicativeExpressionChild"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="PrimaryExpression"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="NestedExpression"/>
        <tags name="ref">
          <attributes name="name" value="expression"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="Expression"/>
        </tags>
      </tags>
    </tags>
    <tags name="package">
      <attributes name="name" value="generics"/>
      <attributes name="nsURI" value="http://www.emftext.org/simTL4J/generics"/>
      <attributes name="nsPrefix" value="generics"/>
      <tags name="class">
        <attributes name="name" value="TypeArgument"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="TypeArgumentable"/>
        <attributes name="abstract" value="true"/>
        <tags name="ref">
          <attributes name="name" value="typeArguments"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="TypeArgument"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="CallTypeArgumentable"/>
        <attributes name="abstract" value="true"/>
        <tags name="ref">
          <attributes name="name" value="callTypeArguments"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="TypeArgument"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="TypeParametrizable"/>
        <attributes name="abstract" value="true"/>
        <tags name="ref">
          <attributes name="name" value="typeParameters"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="TypeParameter"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="ExtendsTypeArgument"/>
        <tags name="ref">
          <attributes name="name" value="extendTypes"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="TypeReference"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="QualifiedTypeArgument"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="SuperTypeArgument"/>
        <tags name="ref">
          <attributes name="name" value="superType"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="TypeReference"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="TypeParameter"/>
        <tags name="EOperation">
          <attributes name="name" value="getAllSuperClassifiers"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="type" value="ConcreteClassifier"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="org.eclipse.emf.common.util.EList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > result = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > ( ) ; &#xA;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypeReference typeRef : getExtendTypes ( ) ) { &#xA;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type type = typeRef .getTarget ( ) ; &#xA;&#x9;if ( type instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) { &#xA;&#x9;&#x9;result .add ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) type ) ; &#xA;&#x9;} &#xA;&#x9;if ( type instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Classifier ) { &#xA;&#x9;&#x9;result .addAll ( ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Classifier ) type ) .getAllSuperClassifiers ( ) ) ; &#xA;&#x9;} &#xA;} &#xA;return result ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; @return all type restrictions&#xA;"/>
            </tags>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="getAllMembers"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="type" value="Member"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="org.eclipse.emf.common.util.EList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.members.Member > memberList = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.members.Member > ( ) ; &#xA;sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type > possiblyVisibleSuperClassifier = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type > ( ) ; &#xA;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypeReference typeReference : ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeParameter ) this ) .getExtendTypes ( ) ) { &#xA;&#x9;possiblyVisibleSuperClassifier .add ( typeReference .getTarget ( ) ) ; &#xA;} &#xA;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier superClassifier : getAllSuperClassifiers ( ) ) { &#xA;&#x9;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.members.Member member : superClassifier .getMembers ( ) ) { &#xA;&#x9;&#x9;if ( member instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.modifiers.AnnotableAndModifiable ) { &#xA;&#x9;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.modifiers.AnnotableAndModifiable modifiable = ( sg.edu.nus.comp.simTL.language.java.simTL4J.modifiers.AnnotableAndModifiable ) member ; &#xA;&#x9;&#x9;&#x9;if ( ! modifiable .isHidden ( context ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;memberList .add ( member ) ; &#xA;&#x9;&#x9;&#x9;} else if ( possiblyVisibleSuperClassifier .contains ( superClassifier ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;memberList .add ( member ) ; &#xA;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;} else { &#xA;&#x9;&#x9;&#x9;memberList .add ( member ) ; &#xA;&#x9;&#x9;} &#xA;&#x9;} &#xA;&#x9;memberList .addAll ( superClassifier .getDefaultMembers ( ) ) ; &#xA;} &#xA;return memberList ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; Returns all members of the given classifier including inner classes and &#xA; all members of super types (extended classes and implemented interfaces).&#xA; &#xA; @param context to check protected visibility&#xA; @return member list&#xA;"/>
            </tags>
          </tags>
          <tags name="EParameter">
            <attributes name="name" value="context"/>
            <attributes name="type" value="Commentable"/>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="getBoundType"/>
          <attributes name="type" value="Type"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="org.eclipse.emf.common.util.EList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type > resultList = new org.eclipse.emf.common.util.BasicEList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type > ( ) ; &#xA;sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeParametrizable typeParameterDeclarator = ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeParametrizable ) this .eContainer ( ) ; &#xA;sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference parentReference = null ; &#xA;org.eclipse.emf.common.util.EList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type > prevTypeList = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type > ( ) ; &#xA;if ( reference != null &amp;&amp; reference .getPrevious ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.NestedExpression ) { &#xA;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.NestedExpression nestedExpression = ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.NestedExpression ) reference .getPrevious ( ) ; &#xA;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.Expression expression = null ; &#xA;&#x9;if ( nestedExpression .getExpression ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) { &#xA;&#x9;&#x9;expression = nestedExpression .getExpression ( ) ; &#xA;&#x9;} else if ( nestedExpression .getExpression ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.ConditionalExpression ) { &#xA;&#x9;&#x9;expression = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.ConditionalExpression ) nestedExpression .getExpression ( ) ) .getExpressionIf ( ) ; &#xA;&#x9;} &#xA;&#x9;if ( expression instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) { &#xA;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference expressionReference = ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) expression ; &#xA;&#x9;&#x9;//navigate down references&#xA;while ( expressionReference .getNext ( ) != null ) { &#xA;&#x9;&#x9;&#x9;expressionReference = expressionReference .getNext ( ) ; &#xA;&#x9;&#x9;} &#xA;&#x9;&#x9;parentReference = expressionReference ; &#xA;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type prevType = nestedExpression .getExpression ( ) .getType ( ) ; &#xA;&#x9;&#x9;if ( prevType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.util.TemporalCompositeClassifier ) { &#xA;&#x9;&#x9;&#x9;for ( org.eclipse.emf.ecore.EObject aType : ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.util.TemporalCompositeClassifier ) prevType ) .getSuperTypes ( ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;prevTypeList .add ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type ) aType ) ; &#xA;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;} else { &#xA;&#x9;&#x9;&#x9;prevTypeList .add ( prevType ) ; &#xA;&#x9;&#x9;} &#xA;&#x9;} else if ( nestedExpression .getExpression ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.CastExpression ) { &#xA;&#x9;&#x9;prevTypeList .add ( ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.CastExpression ) nestedExpression .getExpression ( ) ) .getTypeReference ( ) .getTarget ( ) ) ; &#xA;&#x9;} &#xA;} else if ( reference != null &amp;&amp; reference .getPrevious ( ) != null ) { &#xA;&#x9;parentReference = reference .getPrevious ( ) ; &#xA;&#x9;while ( parentReference instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.SelfReference ) { &#xA;&#x9;&#x9;if ( ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.SelfReference ) parentReference ) .getSelf ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.literals.Super ) { &#xA;&#x9;&#x9;&#x9;if ( parentReference .eContainer ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) { &#xA;&#x9;&#x9;&#x9;&#x9;parentReference = ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) parentReference .eContainer ( ) ; &#xA;&#x9;&#x9;&#x9;} else { &#xA;&#x9;&#x9;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier containingClassifier = reference .getContainingConcreteClassifier ( ) ; &#xA;&#x9;&#x9;&#x9;&#x9;if ( containingClassifier != null ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;prevTypeList .add ( containingClassifier ) ; &#xA;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;parentReference = null ; &#xA;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;} else { &#xA;&#x9;&#x9;&#x9;break ; &#xA;&#x9;&#x9;} &#xA;&#x9;} &#xA;&#x9;if ( parentReference != null ) { &#xA;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type prevType = parentReference .getReferencedType ( ) ; &#xA;&#x9;&#x9;if ( prevType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.util.TemporalCompositeClassifier ) { &#xA;&#x9;&#x9;&#x9;for ( org.eclipse.emf.ecore.EObject aType : ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.util.TemporalCompositeClassifier ) prevType ) .getSuperTypes ( ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;prevTypeList .add ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type ) aType ) ; &#xA;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;} else { &#xA;&#x9;&#x9;&#x9;prevTypeList .add ( prevType ) ; &#xA;&#x9;&#x9;} &#xA;&#x9;} &#xA;} else if ( reference != null ) { &#xA;&#x9;//prev type is on of the containing classes which can still bind by inheritance&#xA;sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier containingClassifier = reference .getContainingConcreteClassifier ( ) ; &#xA;&#x9;while ( containingClassifier != null ) { &#xA;&#x9;&#x9;prevTypeList .add ( containingClassifier ) ; &#xA;&#x9;&#x9;containingClassifier = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.commons.Commentable ) containingClassifier .eContainer ( ) ) .getContainingConcreteClassifier ( ) ; &#xA;&#x9;} &#xA;} &#xA;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type prevType : prevTypeList ) { &#xA;&#x9;int typeParameterIndex = - 1 ; &#xA;&#x9;if ( typeParameterDeclarator instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) { &#xA;&#x9;&#x9;typeParameterIndex = typeParameterDeclarator .getTypeParameters ( ) .indexOf ( this ) ; &#xA;&#x9;&#x9;if ( reference != null ) { &#xA;&#x9;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.types.ClassifierReference classifierReference = null ; &#xA;&#x9;&#x9;&#x9;if ( parentReference instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.ElementReference ) { &#xA;&#x9;&#x9;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.references.ReferenceableElement prevReferenced = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.ElementReference ) parentReference ) .getTarget ( ) ; &#xA;&#x9;&#x9;&#x9;&#x9;if ( prevReferenced instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypedElement ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypeReference prevTypeReference = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypedElement ) prevReferenced ) .getTypeReference ( ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if ( prevTypeReference != null ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;classifierReference = prevTypeReference .getPureClassifierReference ( ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;if ( parentReference instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypedElement ) { &#xA;&#x9;&#x9;&#x9;&#x9;//e.g. New Constructor Call&#xA;sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypeReference prevParentReference = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypedElement ) parentReference ) .getTypeReference ( ) ; &#xA;&#x9;&#x9;&#x9;&#x9;if ( prevParentReference != null ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;classifierReference = prevParentReference .getPureClassifierReference ( ) ; &#xA;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;if ( prevType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) { &#xA;&#x9;&#x9;&#x9;&#x9;//bound through inheritance?&#xA;int idx = 0 ; &#xA;&#x9;&#x9;&#x9;&#x9;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.ClassifierReference superClassifierReference : ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) prevType ) .getSuperTypeReferences ( ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if ( typeParameterIndex &lt; superClassifierReference .getTypeArguments ( ) .size ( ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//is this an argument for the correct class?&#xA;if ( typeParameterDeclarator .equals ( superClassifierReference .getTarget ( ) ) || ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Classifier ) superClassifierReference .getTarget ( ) ) .getAllSuperClassifiers ( ) .contains ( typeParameterDeclarator ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeArgument arg = superClassifierReference .getTypeArguments ( ) .get ( typeParameterIndex ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ( arg instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.generics.QualifiedTypeArgument ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resultList .add ( idx , ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.QualifiedTypeArgument ) arg ) .getTypeReference ( ) .getTarget ( ) ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;idx ++ ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;org.eclipse.emf.common.util.EList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeArgument > typeArgumentList ; &#xA;&#x9;&#x9;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.util.TemporalTypeArgumentHolder ttah = null ; &#xA;&#x9;&#x9;&#x9;&#x9;for ( org.eclipse.emf.common.notify.Adapter adapter : prevType .eAdapters ( ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if ( adapter instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.util.TemporalTypeArgumentHolder ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ttah = ( sg.edu.nus.comp.simTL.language.java.simTL4J.util.TemporalTypeArgumentHolder ) adapter ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;prevType .eAdapters ( ) .remove ( ttah ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;if ( ttah != null ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;typeArgumentList = ttah .getTypeArguments ( ) ; &#xA;&#x9;&#x9;&#x9;&#x9;} else if ( classifierReference != null ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;typeArgumentList = classifierReference .getTypeArguments ( ) ; &#xA;&#x9;&#x9;&#x9;&#x9;} else { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;typeArgumentList = org.eclipse.emf.common.util.ECollections .emptyEList ( ) ; &#xA;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;if ( typeParameterIndex &lt; typeArgumentList .size ( ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeArgument arg = typeArgumentList .get ( typeParameterIndex ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if ( arg instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.generics.QualifiedTypeArgument ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.types.ClassifierReference theTypeRef = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.QualifiedTypeArgument ) arg ) .getTypeReference ( ) .getPureClassifierReference ( ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ( theTypeRef != null ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type theType = theTypeRef .getBoundTarget ( parentReference ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ( theType != null ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ( ! theTypeRef .getTypeArguments ( ) .isEmpty ( ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ttah = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.TemporalTypeArgumentHolder ( ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ttah .getTypeArguments ( ) .addAll ( theTypeRef .getTypeArguments ( ) ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;theType .eAdapters ( ) .add ( ttah ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resultList .add ( 0 , theType ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if ( arg instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.generics.ExtendsTypeArgument ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypeReference extendedType : ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.ExtendsTypeArgument ) arg ) .getExtendTypes ( ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resultList .add ( 0 , extendedType .getBoundTarget ( parentReference ) ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;} else if ( prevType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeParameter ) { &#xA;&#x9;&#x9;&#x9;&#x9;//the prev. type parameter, although unbound, may contain type restrictions through extends &#xA;resultList .add ( prevType ) ; &#xA;&#x9;&#x9;&#x9;&#x9;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypeReference extendedRef : ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeParameter ) prevType ) .getExtendTypes ( ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier extended = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) extendedRef .getTarget ( ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;int idx = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeParametrizable ) prevType .eContainer ( ) ) .getTypeParameters ( ) .indexOf ( prevType ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if ( extended .getTypeParameters ( ) .size ( ) > idx ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//also add more precise bindings from extensions&#xA;resultList .add ( extended .getTypeParameters ( ) .get ( idx ) ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;} &#xA;&#x9;&#x9;if ( reference != null &amp;&amp; reference .eContainer ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.ReflectiveClassReference ) { &#xA;&#x9;&#x9;&#x9;if ( reference .eContainer ( ) .eContainer ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) { &#xA;&#x9;&#x9;&#x9;&#x9;//the &quot;.class&quot; instantiation implicitly binds the T parameter of java.lang.Class to the class itself&#xA;resultList .add ( 0 , ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) reference .eContainer ( ) .eContainer ( ) ) .getReferencedType ( ) ) ; &#xA;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;} &#xA;&#x9;} &#xA;} &#xA;if ( typeParameterDeclarator instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.members.Method ) { &#xA;&#x9;if ( reference instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.MethodCall ) { &#xA;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.members.Method method = ( sg.edu.nus.comp.simTL.language.java.simTL4J.members.Method ) typeParameterDeclarator ; &#xA;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.references.MethodCall methodCall = ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.MethodCall ) reference ; &#xA;&#x9;&#x9;if ( method .getTypeParameters ( ) .size ( ) == methodCall .getCallTypeArguments ( ) .size ( ) ) { &#xA;&#x9;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeArgument typeArgument = methodCall .getCallTypeArguments ( ) .get ( method .getTypeParameters ( ) .indexOf ( this ) ) ; &#xA;&#x9;&#x9;&#x9;if ( typeArgument instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.generics.QualifiedTypeArgument ) { &#xA;&#x9;&#x9;&#x9;&#x9;resultList .add ( 0 , ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.QualifiedTypeArgument ) typeArgument ) .getTypeReference ( ) .getBoundTarget ( parentReference ) ) ; &#xA;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;} &#xA;&#x9;&#x9;//class type parameter&#xA;int idx = method .getParameters ( ) .indexOf ( typeReference .eContainer ( ) ) ; &#xA;&#x9;&#x9;//method type parameter&#xA;if ( idx == - 1 ) { &#xA;&#x9;&#x9;&#x9;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.parameters.Parameter parameter : method .getParameters ( ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeArgument typeArgument : parameter .getTypeArguments ( ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if ( typeArgument instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.generics.QualifiedTypeArgument ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ( ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.QualifiedTypeArgument ) typeArgument ) .getTypeReference ( ) .getTarget ( ) .equals ( this ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;idx = method .getParameters ( ) .indexOf ( parameter ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.types.ClassifierReference paramTypeReference = parameter .getTypeReference ( ) .getPureClassifierReference ( ) ; &#xA;&#x9;&#x9;&#x9;&#x9;if ( paramTypeReference != null ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeArgument typeArgument : paramTypeReference .getTypeArguments ( ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ( typeArgument instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.generics.QualifiedTypeArgument ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ( this .equals ( ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.QualifiedTypeArgument ) typeArgument ) .getTypeReference ( ) .getTarget ( ) ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;idx = method .getParameters ( ) .indexOf ( parameter ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;} &#xA;&#x9;&#x9;if ( idx &lt; methodCall .getArguments ( ) .size ( ) &amp;&amp; idx >= 0 ) { &#xA;&#x9;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.Expression argument = methodCall .getArguments ( ) .get ( idx ) ; &#xA;&#x9;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.parameters.Parameter parameter = method .getParameters ( ) .get ( idx ) ; &#xA;&#x9;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.types.ClassifierReference parameterType = parameter .getTypeReference ( ) .getPureClassifierReference ( ) ; &#xA;&#x9;&#x9;&#x9;if ( argument instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.instantiations.NewConstructorCall ) { &#xA;&#x9;&#x9;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.types.ClassifierReference argumentType = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.instantiations.NewConstructorCall ) argument ) .getTypeReference ( ) .getPureClassifierReference ( ) ; &#xA;&#x9;&#x9;&#x9;&#x9;if ( argumentType != null &amp;&amp; parameterType .getTypeArguments ( ) .size ( ) == argumentType .getTypeArguments ( ) .size ( ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeArgument typeArgument : parameterType .getTypeArguments ( ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ( typeArgument instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.generics.QualifiedTypeArgument ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ( ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.QualifiedTypeArgument ) typeArgument ) .getTypeReference ( ) .getTarget ( ) .equals ( this ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resultList .add ( 0 , ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.QualifiedTypeArgument ) argumentType .getTypeArguments ( ) .get ( parameterType .getTypeArguments ( ) .indexOf ( typeArgument ) ) ) .getTypeReference ( ) .getTarget ( ) ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;if ( argumentType != null &amp;&amp; parameterType .getTarget ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeParameter ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;resultList .add ( 0 , argumentType .getTarget ( ) ) ; &#xA;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;} else if ( parameterType != null &amp;&amp; argument instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) { &#xA;&#x9;&#x9;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference argReference = ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) argument ; &#xA;&#x9;&#x9;&#x9;&#x9;while ( argReference .getNext ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference &amp;&amp; ! ( argReference .getNext ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.ReflectiveClassReference ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;argReference = argReference .getNext ( ) ; &#xA;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;if ( argReference instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.ElementReference ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.references.ElementReference elementReference = ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.ElementReference ) argReference ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while ( elementReference .getNext ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.ElementReference ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elementReference = ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.ElementReference ) elementReference .getNext ( ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if ( elementReference .getTarget ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypedElement ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.types.ClassifierReference argumentType = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypedElement ) elementReference .getTarget ( ) ) .getTypeReference ( ) .getPureClassifierReference ( ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ( argumentType != null &amp;&amp; parameterType .getTypeArguments ( ) .size ( ) == argumentType .getTypeArguments ( ) .size ( ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeArgument typeArgument : parameterType .getTypeArguments ( ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ( typeArgument instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.generics.QualifiedTypeArgument ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ( ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.QualifiedTypeArgument ) typeArgument ) .getTypeReference ( ) .getTarget ( ) .equals ( this ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;int idx2 = parameterType .getTypeArguments ( ) .indexOf ( typeArgument ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ( argumentType .getTypeArguments ( ) .get ( idx2 ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.generics.QualifiedTypeArgument ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resultList .add ( 0 , ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.QualifiedTypeArgument ) argumentType .getTypeArguments ( ) .get ( idx2 ) ) .getTypeReference ( ) .getTarget ( ) ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} else if ( argumentType .getTypeArguments ( ) .get ( idx2 ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.generics.ExtendsTypeArgument ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypeReference extendedType : ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.ExtendsTypeArgument ) argumentType .getTypeArguments ( ) .get ( idx2 ) ) .getExtendTypes ( ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resultList .add ( 0 , extendedType .getTarget ( ) ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ( argumentType != null &amp;&amp; parameterType .getTarget ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeParameter ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resultList .add ( 0 , argumentType .getTarget ( ) ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if ( elementReference .getNext ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.ReflectiveClassReference ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ( parameterType .getTypeArguments ( ) .size ( ) == 1 ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeArgument typeArgument : parameterType .getTypeArguments ( ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ( typeArgument instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.generics.QualifiedTypeArgument ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ( ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.QualifiedTypeArgument ) typeArgument ) .getTypeReference ( ) .getTarget ( ) .equals ( this ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resultList .add ( 0 , elementReference .getReferencedType ( ) ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;} else { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if ( parameterType .getTarget ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeParameter ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;while ( argReference .getNext ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;argReference = argReference .getNext ( ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resultList .add ( 0 , ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) argReference ) .getReferencedType ( ) ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;} &#xA;&#x9;&#x9;//return type&#xA;if ( method .equals ( typeReference .eContainer ( ) ) ) { &#xA;&#x9;&#x9;&#x9;//bound by the type of a method argument?&#xA;org.eclipse.emf.common.util.EList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Classifier > allSuperTypes = null ; &#xA;&#x9;&#x9;&#x9;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.parameters.Parameter parameter : method .getParameters ( ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;if ( this .equals ( parameter .getTypeReference ( ) .getTarget ( ) ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;idx = method .getParameters ( ) .indexOf ( parameter ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Classifier argumentType = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Classifier ) methodCall .getArguments ( ) .get ( idx ) .getType ( ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if ( allSuperTypes == null ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;allSuperTypes = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Classifier > ( ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;allSuperTypes .add ( argumentType ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;allSuperTypes .addAll ( argumentType .getAllSuperClassifiers ( ) ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} else { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;allSuperTypes .add ( argumentType ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;org.eclipse.emf.common.util.EList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Classifier > allOtherSuperTypes = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Classifier > ( ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;allOtherSuperTypes .add ( argumentType ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;allOtherSuperTypes .addAll ( argumentType .getAllSuperClassifiers ( ) ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;org.eclipse.emf.common.util.EList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Classifier > temp = allSuperTypes ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;allSuperTypes = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Classifier > ( ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Classifier st : allOtherSuperTypes ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ( temp .contains ( st ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;allSuperTypes .add ( st ) ; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;//all types given by all bindings&#xA;if ( allSuperTypes != null ) { &#xA;&#x9;&#x9;&#x9;&#x9;resultList .addAll ( allSuperTypes ) ; &#xA;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;} &#xA;&#x9;} &#xA;} &#xA;//remove nulls&#xA;for ( java.util.Iterator &lt; ? > it = resultList .iterator ( ) ; it .hasNext ( ) ; ) { &#xA;&#x9;if ( it .next ( ) == null ) { &#xA;&#x9;&#x9;it .remove ( ) ; &#xA;&#x9;} &#xA;} &#xA;if ( resultList .isEmpty ( ) || ( resultList .size ( ) == 1 &amp;&amp; resultList .get ( 0 ) .equals ( this ) ) ) { &#xA;&#x9;return this ; &#xA;} else { &#xA;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.util.TemporalCompositeClassifier temp = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.TemporalCompositeClassifier ( this ) ; &#xA;&#x9;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type aResult : resultList ) { &#xA;&#x9;&#x9;if ( aResult instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.PrimitiveType ) { &#xA;&#x9;&#x9;&#x9;aResult = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.PrimitiveType ) aResult ) .wrapPrimitiveType ( ) ; &#xA;&#x9;&#x9;} &#xA;&#x9;&#x9;if ( aResult instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.util.TemporalCompositeClassifier ) { &#xA;&#x9;&#x9;&#x9;//flatten&#xA;temp .getSuperTypes ( ) .addAll ( ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.util.TemporalCompositeClassifier ) aResult ) .getSuperTypes ( ) ) ; &#xA;&#x9;&#x9;} else { &#xA;&#x9;&#x9;&#x9;temp .getSuperTypes ( ) .add ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Classifier ) aResult ) ; &#xA;&#x9;&#x9;} &#xA;&#x9;} &#xA;&#x9;temp .getSuperTypes ( ) .add ( this ) ; &#xA;&#x9;return temp ; &#xA;} &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; Returns the type bound to the given parameter in the context&#xA; of the given reference.&#xA; &#xA; @param typeReference&#xA; @param reference&#xA; @return bound type or parameter if not bound&#xA;"/>
            </tags>
          </tags>
          <tags name="EParameter">
            <attributes name="name" value="typeReference"/>
            <attributes name="type" value="TypeReference"/>
          </tags>
          <tags name="EParameter">
            <attributes name="name" value="reference"/>
            <attributes name="type" value="Reference"/>
          </tags>
        </tags>
        <tags name="ref">
          <attributes name="name" value="extendTypes"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="TypeReference"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="UnknownTypeArgument"/>
      </tags>
    </tags>
    <tags name="package">
      <attributes name="name" value="imports"/>
      <attributes name="nsURI" value="http://www.emftext.org/simTL4J/imports"/>
      <attributes name="nsPrefix" value="imports"/>
      <tags name="class">
        <attributes name="name" value="Import"/>
        <attributes name="abstract" value="true"/>
        <tags name="EOperation">
          <attributes name="name" value="getImportedClassifier"/>
          <attributes name="type" value="ConcreteClassifier"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="java.lang.String containerName = getNamespacesAsString ( ) ; &#xA;if ( containerName == null ) { &#xA;&#x9;return null ; &#xA;} &#xA;java.lang.String fullQualifiedName = containerName + name ; &#xA;return getConcreteClassifier ( fullQualifiedName ) ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; Returns the classifier with the given name &#xA; located in the namespace defined by the import.&#xA; &#xA; @param name the name of the classifier&#xA; @return imported classifier (proxy)&#xA;"/>
            </tags>
          </tags>
          <tags name="EParameter">
            <attributes name="name" value="name"/>
            <attributes name="type" value="EString"/>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="getImportedClassifiers"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="type" value="ConcreteClassifier"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="java.lang.String containerName = getNamespacesAsString ( ) ; &#xA;if ( containerName == null ) { &#xA;&#x9;return org.eclipse.emf.common.util.ECollections .emptyEList ( ) ; &#xA;} &#xA;return getConcreteClassifiers ( containerName , &quot;*&quot; ) ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; Returns a list of imported classifiers assuming the import's namespace&#xA; identifies a package.&#xA; &#xA; @param _this &#xA; @return imported classifier (proxy)&#xA;"/>
            </tags>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="getImportedMembers"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="type" value="NamedElement"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier concreteClassifier = getClassifierAtNamespaces ( ) ; &#xA;if ( concreteClassifier == null || concreteClassifier .eIsProxy ( ) ) { &#xA;&#x9;return org.eclipse.emf.common.util.ECollections .emptyEList ( ) ; &#xA;} &#xA;org.eclipse.emf.common.util.EList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.commons.NamedElement > result = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.commons.NamedElement > ( ) ; &#xA;result .addAll ( concreteClassifier .getAllMembers ( this ) ) ; &#xA;if ( concreteClassifier instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Enumeration ) { &#xA;&#x9;result .addAll ( ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Enumeration ) concreteClassifier ) .getConstants ( ) ) ; &#xA;} &#xA;return result ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; Returns all imported members assuming the import's namespace&#xA; identifies a classifier.&#xA; &#xA; @param _this &#xA; @return list of imported classifiers (proxies)&#xA;"/>
            </tags>
          </tags>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="ImportingElement"/>
        <attributes name="abstract" value="true"/>
        <tags name="EOperation">
          <attributes name="name" value="getDefaultImports"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="type" value="ConcreteClassifier"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="org.eclipse.emf.common.util.EList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > result = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > ( ) ; &#xA;for ( org.eclipse.emf.ecore.EObject classifier : sg.edu.nus.comp.simTL.language.java.simTL4J.JavaClasspath .get ( this ) .getDefaultImports ( ) ) { &#xA;&#x9;result .add ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) classifier ) ; &#xA;} &#xA;return result ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value=""/>
            </tags>
          </tags>
        </tags>
        <tags name="ref">
          <attributes name="name" value="imports"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="Import"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="StaticImport"/>
        <attributes name="abstract" value="true"/>
        <tags name="ref">
          <attributes name="name" value="static"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="Static"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="ClassifierImport"/>
        <tags name="ref">
          <attributes name="name" value="classifier"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="type" value="ConcreteClassifier"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="PackageImport"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="StaticClassifierImport"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="StaticMemberImport"/>
        <tags name="ref">
          <attributes name="name" value="staticMembers"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="type" value="ReferenceableElement"/>
        </tags>
      </tags>
    </tags>
    <tags name="package">
      <attributes name="name" value="instantiations"/>
      <attributes name="nsURI" value="http://www.emftext.org/simTL4J/instantiations"/>
      <attributes name="nsPrefix" value="instantiations"/>
      <tags name="class">
        <attributes name="name" value="Initializable"/>
        <attributes name="abstract" value="true"/>
        <tags name="ref">
          <attributes name="name" value="initialValue"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="Expression"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="Instantiation"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="NewConstructorCall"/>
        <tags name="ref">
          <attributes name="name" value="anonymousClass"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="AnonymousClass"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="ExplicitConstructorCall"/>
        <tags name="ref">
          <attributes name="name" value="callTarget"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="Self"/>
        </tags>
      </tags>
    </tags>
    <tags name="package">
      <attributes name="name" value="literals"/>
      <attributes name="nsURI" value="http://www.emftext.org/simTL4J/literals"/>
      <attributes name="nsPrefix" value="literals"/>
      <tags name="class">
        <attributes name="name" value="Literal"/>
        <attributes name="abstract" value="true"/>
        <tags name="EOperation">
          <attributes name="name" value="getOneType"/>
          <attributes name="type" value="Type"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="//Overrides implementation in Expression&#xA;sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class javaClass = null ; &#xA;if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.literals.NullLiteral ) { &#xA;&#x9;javaClass = getLibClass ( &quot;Void&quot; ) ; &#xA;} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.literals.BooleanLiteral ) { &#xA;&#x9;javaClass = getLibClass ( &quot;Boolean&quot; ) ; &#xA;} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.literals.DoubleLiteral ) { &#xA;&#x9;javaClass = getLibClass ( &quot;Double&quot; ) ; &#xA;} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.literals.FloatLiteral ) { &#xA;&#x9;javaClass = getLibClass ( &quot;Float&quot; ) ; &#xA;} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.literals.IntegerLiteral ) { &#xA;&#x9;javaClass = getLibClass ( &quot;Integer&quot; ) ; &#xA;} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.literals.LongLiteral ) { &#xA;&#x9;javaClass = getLibClass ( &quot;Long&quot; ) ; &#xA;} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.literals.CharacterLiteral ) { &#xA;&#x9;javaClass = getLibClass ( &quot;Character&quot; ) ; &#xA;} &#xA;return javaClass ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; @return type of the literal&#xA;"/>
            </tags>
          </tags>
          <tags name="EParameter">
            <attributes name="name" value="alternative"/>
            <attributes name="type" value="EBoolean"/>
          </tags>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="Self"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="BooleanLiteral"/>
        <tags name="attr">
          <attributes name="name" value="value"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="type" value="//EBoolean"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="CharacterLiteral"/>
        <tags name="attr">
          <attributes name="name" value="value"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="type" value="//EChar"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="FloatLiteral"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="DecimalFloatLiteral"/>
        <tags name="attr">
          <attributes name="name" value="decimalValue"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="type" value="//EFloat"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="HexFloatLiteral"/>
        <tags name="attr">
          <attributes name="name" value="hexValue"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="type" value="//EFloat"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="DoubleLiteral"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="DecimalDoubleLiteral"/>
        <tags name="attr">
          <attributes name="name" value="decimalValue"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="type" value="//EDouble"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="HexDoubleLiteral"/>
        <tags name="attr">
          <attributes name="name" value="hexValue"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="type" value="//EDouble"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="IntegerLiteral"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="DecimalIntegerLiteral"/>
        <tags name="attr">
          <attributes name="name" value="decimalValue"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="type" value="//EBigInteger"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="HexIntegerLiteral"/>
        <tags name="attr">
          <attributes name="name" value="hexValue"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="type" value="//EBigInteger"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="OctalIntegerLiteral"/>
        <tags name="attr">
          <attributes name="name" value="octalValue"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="type" value="//EBigInteger"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="LongLiteral"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="DecimalLongLiteral"/>
        <tags name="attr">
          <attributes name="name" value="decimalValue"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="type" value="//EBigInteger"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="HexLongLiteral"/>
        <tags name="attr">
          <attributes name="name" value="hexValue"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="type" value="//EBigInteger"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="OctalLongLiteral"/>
        <tags name="attr">
          <attributes name="name" value="octalValue"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="type" value="//EBigInteger"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="NullLiteral"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="Super"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="This"/>
      </tags>
    </tags>
    <tags name="package">
      <attributes name="name" value="members"/>
      <attributes name="nsURI" value="http://www.emftext.org/simTL4J/members"/>
      <attributes name="nsPrefix" value="members"/>
      <tags name="class">
        <attributes name="name" value="ExceptionThrower"/>
        <attributes name="abstract" value="true"/>
        <tags name="ref">
          <attributes name="name" value="exceptions"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="NamespaceClassifierReference"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="Member"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="MemberContainer"/>
        <attributes name="abstract" value="true"/>
        <tags name="EOperation">
          <attributes name="name" value="getContainedClassifier"/>
          <attributes name="type" value="ConcreteClassifier"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="for ( sg.edu.nus.comp.simTL.language.java.simTL4J.members.Member member : getMembers ( ) ) { &#xA;&#x9;if ( member instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier &amp;&amp; name .equals ( member .getName ( ) ) ) { &#xA;&#x9;&#x9;return ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) member ; &#xA;&#x9;} &#xA;} &#xA;return null ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; @param name&#xA; @return classifier with the given name defined in this member container&#xA;"/>
            </tags>
          </tags>
          <tags name="EParameter">
            <attributes name="name" value="name"/>
            <attributes name="type" value="EString"/>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="getContainedField"/>
          <attributes name="type" value="Field"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="for ( sg.edu.nus.comp.simTL.language.java.simTL4J.members.Member member : getMembers ( ) ) { &#xA;&#x9;if ( member instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.members.Field &amp;&amp; name .equals ( member .getName ( ) ) ) { &#xA;&#x9;&#x9;return ( sg.edu.nus.comp.simTL.language.java.simTL4J.members.Field ) member ; &#xA;&#x9;} &#xA;} &#xA;return null ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; @param name&#xA; @return field with the given name defined in this member container&#xA;"/>
            </tags>
          </tags>
          <tags name="EParameter">
            <attributes name="name" value="name"/>
            <attributes name="type" value="EString"/>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="getContainedMethod"/>
          <attributes name="type" value="Method"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="sg.edu.nus.comp.simTL.language.java.simTL4J.members.Method found = null ; &#xA;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.members.Member member : getMembers ( ) ) { &#xA;&#x9;if ( member instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.members.Method &amp;&amp; name .equals ( member .getName ( ) ) ) { &#xA;&#x9;&#x9;if ( found != null ) { &#xA;&#x9;&#x9;&#x9;return null ; &#xA;&#x9;&#x9;} else { &#xA;&#x9;&#x9;&#x9;found = ( sg.edu.nus.comp.simTL.language.java.simTL4J.members.Method ) member ; &#xA;&#x9;&#x9;} &#xA;&#x9;} &#xA;} &#xA;return found ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; @param name&#xA; @return method with the given name defined in this member container;&#xA;         null, if there is no such method &#xA;         or if there are multiple methods with the same name&#xA;"/>
            </tags>
          </tags>
          <tags name="EParameter">
            <attributes name="name" value="name"/>
            <attributes name="type" value="EString"/>
          </tags>
        </tags>
        <tags name="ref">
          <attributes name="name" value="members"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="Member"/>
        </tags>
        <tags name="ref">
          <attributes name="name" value="defaultMembers"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="transient" value="true"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="Member"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="AdditionalField"/>
        <tags name="EOperation">
          <attributes name="name" value="getArrayDimension"/>
          <attributes name="type" value="ELong"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="long size = this .getArrayDimensionsBefore ( ) .size ( ) + this .getArrayDimensionsAfter ( ) .size ( ) ; &#xA;return size ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value=""/>
            </tags>
          </tags>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="Constructor"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="EmptyMember"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="Field"/>
        <tags name="ref">
          <attributes name="name" value="additionalFields"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="AdditionalField"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="Method"/>
        <attributes name="abstract" value="true"/>
        <tags name="EOperation">
          <attributes name="name" value="isMethodForCall"/>
          <attributes name="type" value="EBoolean"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="org.eclipse.emf.common.util.EList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type > argumentTypeList = methodCall .getArgumentTypes ( ) ; &#xA;org.eclipse.emf.common.util.EList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.parameters.Parameter > parameterList = new org.eclipse.emf.common.util.BasicEList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.parameters.Parameter > ( this .getParameters ( ) ) ; &#xA;org.eclipse.emf.common.util.EList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type > parameterTypeList = new org.eclipse.emf.common.util.BasicEList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type > ( ) ; &#xA;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.parameters.Parameter parameter : parameterList ) { &#xA;&#x9;//determine types before messing with the parameters&#xA;parameterTypeList .add ( parameter .getTypeReference ( ) .getBoundTarget ( methodCall ) ) ; &#xA;} &#xA;if ( ! parameterList .isEmpty ( ) ) { &#xA;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.parameters.Parameter lastParameter = parameterList .get ( parameterList .size ( ) - 1 ) ; &#xA;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type lastParameterType = parameterTypeList .get ( parameterTypeList .size ( ) - 1 ) ; &#xA;&#x9;; &#xA;&#x9;if ( lastParameter instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.parameters.VariableLengthParameter ) { &#xA;&#x9;&#x9;//in case of variable length add/remove some parameters&#xA;while ( parameterList .size ( ) &lt; argumentTypeList .size ( ) ) { &#xA;&#x9;&#x9;&#x9;if ( needsPerfectMatch ) return false ; &#xA;&#x9;&#x9;&#x9;parameterList .add ( lastParameter ) ; &#xA;&#x9;&#x9;&#x9;parameterTypeList .add ( lastParameterType ) ; &#xA;&#x9;&#x9;} &#xA;&#x9;&#x9;if ( parameterList .size ( ) > argumentTypeList .size ( ) ) { &#xA;&#x9;&#x9;&#x9;if ( needsPerfectMatch ) return false ; &#xA;&#x9;&#x9;&#x9;parameterList .remove ( lastParameter ) ; &#xA;&#x9;&#x9;&#x9;parameterTypeList .remove ( parameterTypeList .size ( ) - 1 ) ; &#xA;&#x9;&#x9;} &#xA;&#x9;} &#xA;} &#xA;if ( parameterList .size ( ) == argumentTypeList .size ( ) ) { &#xA;&#x9;boolean parametersMatch = true ; &#xA;&#x9;for ( int i = 0 ; i &lt; argumentTypeList .size ( ) ; i ++ ) { &#xA;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.parameters.Parameter parameter = parameterList .get ( i ) ; &#xA;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.Expression argument = methodCall .getArguments ( ) .get ( i ) ; &#xA;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type parameterType = parameterTypeList .get ( i ) ; &#xA;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type argumentType = argumentTypeList .get ( i ) ; &#xA;&#x9;&#x9;if ( argumentType == null || parameterType == null ) { &#xA;&#x9;&#x9;&#x9;return false ; &#xA;&#x9;&#x9;} &#xA;&#x9;&#x9;if ( parameterType != null &amp;&amp; argumentType != null ) { &#xA;&#x9;&#x9;&#x9;if ( ! parameterType .eIsProxy ( ) || ! argumentType .eIsProxy ( ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;if ( needsPerfectMatch ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;parametersMatch = parametersMatch &amp;&amp; argumentType .equalsType ( argument .getArrayDimension ( ) , parameterType , parameter .getArrayDimension ( ) ) ; &#xA;&#x9;&#x9;&#x9;&#x9;} else { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;parametersMatch = parametersMatch &amp;&amp; argumentType .isSuperType ( argument .getArrayDimension ( ) , parameterType , parameter ) ; &#xA;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;} else { &#xA;&#x9;&#x9;&#x9;&#x9;return false ; &#xA;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;} else { &#xA;&#x9;&#x9;&#x9;return false ; &#xA;&#x9;&#x9;} &#xA;&#x9;} &#xA;&#x9;return parametersMatch ; &#xA;} &#xA;return false ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value=""/>
            </tags>
          </tags>
          <tags name="EParameter">
            <attributes name="name" value="methodCall"/>
            <attributes name="type" value="MethodCall"/>
          </tags>
          <tags name="EParameter">
            <attributes name="name" value="needsPerfectMatch"/>
            <attributes name="type" value="EBoolean"/>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="isSomeMethodForCall"/>
          <attributes name="type" value="EBoolean"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="return isMethodForCall ( methodCall , false ) ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; Decides if the given method matches the given call. &#xA; &#xA; @param methodCall&#xA; @return&#xA;"/>
            </tags>
          </tags>
          <tags name="EParameter">
            <attributes name="name" value="methodCall"/>
            <attributes name="type" value="MethodCall"/>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="isBetterMethodForCall"/>
          <attributes name="type" value="EBoolean"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="if ( ! isMethodForCall ( methodCall , false ) ) { &#xA;&#x9;return false ; &#xA;} &#xA;if ( otherMethod .isMethodForCall ( methodCall , true ) ) { &#xA;&#x9;//the other already matches perfectly; I am not better&#xA;return false ; &#xA;} &#xA;if ( ! otherMethod .isMethodForCall ( methodCall , false ) ) { &#xA;&#x9;//I match, but the other does not&#xA;return true ; &#xA;} &#xA;//we both match, I am only better if I match perfectly &lt;- &#xA;//TODO #763: this is not enough: we need to check for &quot;nearest subtype&quot; here&#xA;return isMethodForCall ( methodCall , true ) ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; Only returns true if the given Method is a better match for the given calls than the&#xA; otherMethod given.&#xA; &#xA; @param otherMethod&#xA; @param methodCall&#xA; @return&#xA;"/>
            </tags>
          </tags>
          <tags name="EParameter">
            <attributes name="name" value="otherMethod"/>
            <attributes name="type" value="Method"/>
          </tags>
          <tags name="EParameter">
            <attributes name="name" value="methodCall"/>
            <attributes name="type" value="MethodCall"/>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="getArrayDimension"/>
          <attributes name="type" value="ELong"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="long size = this .getArrayDimensionsBefore ( ) .size ( ) + this .getArrayDimensionsAfter ( ) .size ( ) ; &#xA;if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.parameters.VariableLengthParameter ) { &#xA;&#x9;size ++ ; &#xA;} &#xA;return size ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value=""/>
            </tags>
          </tags>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="InterfaceMethod"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="ClassMethod"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="EnumConstant"/>
        <tags name="ref">
          <attributes name="name" value="anonymousClass"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="AnonymousClass"/>
        </tags>
      </tags>
    </tags>
    <tags name="package">
      <attributes name="name" value="modifiers"/>
      <attributes name="nsURI" value="http://www.emftext.org/simTL4J/modifiers"/>
      <attributes name="nsPrefix" value="modifiers"/>
      <tags name="class">
        <attributes name="name" value="Modifier"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="AnnotationInstanceOrModifier"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="AnnotableAndModifiable"/>
        <attributes name="abstract" value="true"/>
        <tags name="EOperation">
          <attributes name="name" value="isHidden"/>
          <attributes name="type" value="EBoolean"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="//all members of an interface are public by default&#xA;if ( this .eContainer ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Interface ) { &#xA;&#x9;return false ; &#xA;} &#xA;if ( context .eIsProxy ( ) ) { &#xA;&#x9;context = ( sg.edu.nus.comp.simTL.language.java.simTL4J.commons.Commentable ) org.eclipse.emf.ecore.util.EcoreUtil .resolve ( context , this ) ; &#xA;} &#xA;sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier contextClassifier = context .getContainingConcreteClassifier ( ) ; &#xA;sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier myClassifier = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.commons.Commentable ) eContainer ( ) ) .getParentConcreteClassifier ( ) ; &#xA;//special case: self reference to outer instance&#xA;if ( context instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) { &#xA;&#x9;if ( ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) context ) .getPrevious ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.SelfReference ) { &#xA;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.references.SelfReference selfReference = ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.SelfReference ) ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) context ) .getPrevious ( ) ; &#xA;&#x9;&#x9;if ( selfReference .getSelf ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.literals.Self ) { &#xA;&#x9;&#x9;&#x9;if ( selfReference .getPrevious ( ) != null ) { &#xA;&#x9;&#x9;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type type = selfReference .getPrevious ( ) .getReferencedType ( ) ; &#xA;&#x9;&#x9;&#x9;&#x9;if ( type instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;contextClassifier = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) type ; &#xA;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;} &#xA;&#x9;} &#xA;} &#xA;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.modifiers.AnnotationInstanceOrModifier modifier : this .getAnnotationsAndModifiers ( ) ) { &#xA;&#x9;if ( modifier instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.modifiers.Private ) { &#xA;&#x9;&#x9;if ( myClassifier .equalsType ( 0 , contextClassifier , 0 ) ) { &#xA;&#x9;&#x9;&#x9;return false ; &#xA;&#x9;&#x9;} &#xA;&#x9;&#x9;return true ; &#xA;&#x9;} &#xA;&#x9;if ( modifier instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.modifiers.Public ) { &#xA;&#x9;&#x9;return false ; &#xA;&#x9;} &#xA;&#x9;if ( modifier instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.modifiers.Protected ) { &#xA;&#x9;&#x9;//package visibility&#xA;if ( getContainingPackageName ( ) != null &amp;&amp; getContainingPackageName ( ) .equals ( context .getContainingPackageName ( ) ) ) { &#xA;&#x9;&#x9;&#x9;return false ; &#xA;&#x9;&#x9;} &#xA;&#x9;&#x9;//try outer classifiers as well &#xA;while ( contextClassifier instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Classifier ) { &#xA;&#x9;&#x9;&#x9;if ( contextClassifier .isSuperType ( 0 , myClassifier , null ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;return false ; &#xA;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;contextClassifier = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.commons.Commentable ) contextClassifier .eContainer ( ) ) .getParentConcreteClassifier ( ) ; &#xA;&#x9;&#x9;&#x9;if ( contextClassifier != null &amp;&amp; ! contextClassifier .eIsProxy ( ) &amp;&amp; contextClassifier .isSuperType ( 0 , myClassifier , null ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;return false ; &#xA;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;} &#xA;&#x9;&#x9;//visibility through anonymous subclass&#xA;sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.AnonymousClass anonymousClass = context .getContainingAnonymousClass ( ) ; &#xA;&#x9;&#x9;while ( anonymousClass != null ) { &#xA;&#x9;&#x9;&#x9;contextClassifier = anonymousClass .getSuperClassifier ( ) ; &#xA;&#x9;&#x9;&#x9;if ( contextClassifier == null ) { &#xA;&#x9;&#x9;&#x9;&#x9;return true ; &#xA;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;if ( contextClassifier .isSuperType ( 0 , myClassifier , null ) ) { &#xA;&#x9;&#x9;&#x9;&#x9;return false ; &#xA;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;anonymousClass = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.commons.Commentable ) anonymousClass .eContainer ( ) ) .getContainingAnonymousClass ( ) ; &#xA;&#x9;&#x9;} &#xA;&#x9;&#x9;return true ; &#xA;&#x9;} &#xA;} &#xA;//package visibility?&#xA;if ( getContainingPackageName ( ) != null &amp;&amp; getContainingPackageName ( ) .equals ( context .getContainingPackageName ( ) ) ) { &#xA;&#x9;return false ; &#xA;} &#xA;return true ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value=""/>
            </tags>
          </tags>
          <tags name="EParameter">
            <attributes name="name" value="context"/>
            <attributes name="type" value="Commentable"/>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="isStatic"/>
          <attributes name="type" value="EBoolean"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="//all members of an interface as static by default&#xA;if ( this .eContainer ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Interface ) { &#xA;&#x9;return true ; &#xA;} &#xA;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.modifiers.AnnotationInstanceOrModifier modifier : this .getAnnotationsAndModifiers ( ) ) { &#xA;&#x9;if ( modifier instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.modifiers.Static ) { &#xA;&#x9;&#x9;return true ; &#xA;&#x9;} &#xA;} &#xA;return false ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value=""/>
            </tags>
          </tags>
        </tags>
        <tags name="ref">
          <attributes name="name" value="annotationsAndModifiers"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="AnnotationInstanceOrModifier"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="Modifiable"/>
        <attributes name="abstract" value="true"/>
        <tags name="ref">
          <attributes name="name" value="modifiers"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="Modifier"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="Abstract"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="Final"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="Native"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="Protected"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="Public"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="Private"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="Static"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="Strictfp"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="Synchronized"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="Transient"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="Volatile"/>
      </tags>
    </tags>
    <tags name="package">
      <attributes name="name" value="operators"/>
      <attributes name="nsURI" value="http://www.emftext.org/simTL4J/operators"/>
      <attributes name="nsPrefix" value="operators"/>
      <tags name="class">
        <attributes name="name" value="Operator"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="AdditiveOperator"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="AssignmentOperator"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="EqualityOperator"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="MultiplicativeOperator"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="RelationOperator"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="ShiftOperator"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="UnaryOperator"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="UnaryModificationOperator"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="Assignment"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="AssignmentAnd"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="AssignmentDivision"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="AssignmentExclusiveOr"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="AssignmentMinus"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="AssignmentModulo"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="AssignmentMultiplication"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="AssignmentLeftShift"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="AssignmentOr"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="AssignmentPlus"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="AssignmentRightShift"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="AssignmentUnsignedRightShift"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="Equal"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="NotEqual"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="GreaterThan"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="GreaterThanOrEqual"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="LessThan"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="LessThanOrEqual"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="Addition"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="Subtraction"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="Division"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="Multiplication"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="Remainder"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="Complement"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="MinusMinus"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="Negate"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="PlusPlus"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="LeftShift"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="RightShift"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="UnsignedRightShift"/>
      </tags>
    </tags>
    <tags name="package">
      <attributes name="name" value="parameters"/>
      <attributes name="nsURI" value="http://www.emftext.org/simTL4J/parameters"/>
      <attributes name="nsPrefix" value="parameters"/>
      <tags name="class">
        <attributes name="name" value="Parameter"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="Parametrizable"/>
        <attributes name="abstract" value="true"/>
        <tags name="ref">
          <attributes name="name" value="parameters"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="Parameter"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="OrdinaryParameter"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="VariableLengthParameter"/>
      </tags>
    </tags>
    <tags name="package">
      <attributes name="name" value="references"/>
      <attributes name="nsURI" value="http://www.emftext.org/simTL4J/references"/>
      <attributes name="nsPrefix" value="references"/>
      <tags name="class">
        <attributes name="name" value="Reference"/>
        <attributes name="abstract" value="true"/>
        <tags name="EOperation">
          <attributes name="name" value="getReferencedType"/>
          <attributes name="type" value="Type"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.literals.Literal ) { &#xA;&#x9;return ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.literals.Literal ) this ) .getType ( ) ; &#xA;} &#xA;sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type type = null ; &#xA;//referenced element point to a type&#xA;//element points to this or super&#xA;if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypedElement ) { &#xA;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypeReference typeRef = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypedElement ) this ) .getTypeReference ( ) ; &#xA;&#x9;type = typeRef .getBoundTarget ( this ) ; &#xA;} else //element points to the object's class object&#xA;if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.SelfReference ) { &#xA;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type thisClass = null ; &#xA;&#x9;if ( this .getPrevious ( ) != null ) { &#xA;&#x9;&#x9;thisClass = this .getPrevious ( ) .getReferencedType ( ) ; &#xA;&#x9;} else { &#xA;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.AnonymousClass anonymousContainer = getContainingAnonymousClass ( ) ; &#xA;&#x9;&#x9;if ( anonymousContainer != null ) { &#xA;&#x9;&#x9;&#x9;thisClass = anonymousContainer ; &#xA;&#x9;&#x9;} else { &#xA;&#x9;&#x9;&#x9;thisClass = getContainingConcreteClassifier ( ) ; &#xA;&#x9;&#x9;} &#xA;&#x9;} &#xA;&#x9;//find super class if &quot;self&quot; is &quot;super&quot;&#xA;if ( ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.SelfReference ) this ) .getSelf ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.literals.Super ) { &#xA;&#x9;&#x9;if ( thisClass instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class ) { &#xA;&#x9;&#x9;&#x9;return ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class ) thisClass ) .getSuperClass ( ) ; &#xA;&#x9;&#x9;} &#xA;&#x9;&#x9;if ( thisClass instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.AnonymousClass ) { &#xA;&#x9;&#x9;&#x9;return ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.AnonymousClass ) thisClass ) .getSuperClassifier ( ) ; &#xA;&#x9;&#x9;} &#xA;&#x9;} &#xA;&#x9;return thisClass ; &#xA;} else //referenced element points to an element with a type&#xA;if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.ReflectiveClassReference ) { &#xA;&#x9;return getClassClass ( ) ; &#xA;} else //Strings may also appear as reference&#xA;if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.ElementReference ) { &#xA;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.references.ReferenceableElement target = ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.ReferenceableElement ) ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.ElementReference ) this ) .getTarget ( ) ; &#xA;&#x9;if ( target .eIsProxy ( ) ) { &#xA;&#x9;&#x9;type = null ; &#xA;&#x9;} &#xA;&#x9;//Navigate through AdditionalLocalVariable or Field&#xA;if ( target instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.variables.AdditionalLocalVariable ) { &#xA;&#x9;&#x9;target = ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.ReferenceableElement ) target .eContainer ( ) ; &#xA;&#x9;} &#xA;&#x9;if ( target instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.members.AdditionalField ) { &#xA;&#x9;&#x9;target = ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.ReferenceableElement ) target .eContainer ( ) ; &#xA;&#x9;} &#xA;&#x9;if ( target instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypedElement ) { &#xA;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypeReference typeRef = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypedElement ) target ) .getTypeReference ( ) ; &#xA;&#x9;&#x9;if ( typeRef != null ) { &#xA;&#x9;&#x9;&#x9;type = typeRef .getBoundTarget ( this ) ; &#xA;&#x9;&#x9;} &#xA;&#x9;} else /*e.g. Annotation*/if ( target instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type ) { &#xA;&#x9;&#x9;return ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type ) target ; &#xA;&#x9;} else if ( target instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.members.EnumConstant ) { &#xA;&#x9;&#x9;type = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Enumeration ) target .eContainer ( ) ; &#xA;&#x9;} &#xA;} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.StringReference ) { &#xA;&#x9;return getStringClass ( ) ; &#xA;} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.NestedExpression ) { &#xA;&#x9;type = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.NestedExpression ) this ) .getExpression ( ) .getType ( ) ; &#xA;} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.PrimitiveTypeReference ) { &#xA;&#x9;type = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.PrimitiveTypeReference ) this ) .getPrimitiveType ( ) ; &#xA;} else { &#xA;&#x9;assert ( false ) ; &#xA;} &#xA;return type ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; Determines the &lt;code>Type&lt;/code> of the reference. That is,&#xA; either the type to which the reference points directly, or the&#xA; type of the element to which the reference points.&#xA; &#xA; @return the determined type&#xA;"/>
            </tags>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="getPrevious"/>
          <attributes name="type" value="Reference"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="if ( eContainer() instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) { &#xA;&#x9;&#x9;&#x9; Reference container = (Reference) eContainer( ) ; &#xA;&#x9;&#x9;&#x9;  if (this.equals(container.getNext())) {&#xA;&#x9;&#x9;&#x9;&#x9; return container;&#xA;&#x9;&#x9;&#x9; }&#xA;}&#xA;return null;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value=""/>
            </tags>
          </tags>
        </tags>
        <tags name="ref">
          <attributes name="name" value="next"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="Reference"/>
        </tags>
        <tags name="ref">
          <attributes name="name" value="arraySelectors"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="ArraySelector"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="Argumentable"/>
        <attributes name="abstract" value="true"/>
        <tags name="EOperation">
          <attributes name="name" value="getArgumentTypes"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="type" value="Type"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="org.eclipse.emf.common.util.EList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type > resultList = new org.eclipse.emf.common.util.BasicEList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type > ( ) ; &#xA;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.Expression exp : getArguments ( ) ) { &#xA;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type type = exp .getType ( ) ; &#xA;&#x9;resultList .add ( type ) ; &#xA;} &#xA;return resultList ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; @return list of types of my arguments&#xA;"/>
            </tags>
          </tags>
        </tags>
        <tags name="ref">
          <attributes name="name" value="arguments"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="Expression"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="ReferenceableElement"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="ElementReference"/>
        <attributes name="abstract" value="true"/>
        <tags name="ref">
          <attributes name="name" value="target"/>
          <attributes name="type" value="ReferenceableElement"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="IdentifierReference"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="MethodCall"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="ReflectiveClassReference"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="PrimitiveTypeReference"/>
        <tags name="ref">
          <attributes name="name" value="primitiveType"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="PrimitiveType"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="StringReference"/>
        <tags name="attr">
          <attributes name="name" value="value"/>
          <attributes name="type" value="//EString"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="SelfReference"/>
        <tags name="ref">
          <attributes name="name" value="self"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="Self"/>
        </tags>
      </tags>
    </tags>
    <tags name="package">
      <attributes name="name" value="statements"/>
      <attributes name="nsURI" value="http://www.emftext.org/simTL4J/statements"/>
      <attributes name="nsPrefix" value="statements"/>
      <tags name="class">
        <attributes name="name" value="StatementContainer"/>
        <attributes name="abstract" value="true"/>
        <tags name="ref">
          <attributes name="name" value="statement"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="Statement"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="StatementListContainer"/>
        <attributes name="abstract" value="true"/>
        <tags name="ref">
          <attributes name="name" value="statements"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="Statement"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="Conditional"/>
        <attributes name="abstract" value="true"/>
        <tags name="ref">
          <attributes name="name" value="condition"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="Expression"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="ForLoopInitializer"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="Statement"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="SwitchCase"/>
        <attributes name="abstract" value="true"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="Assert"/>
        <tags name="ref">
          <attributes name="name" value="errorMessage"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="Expression"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="Break"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="Block"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="CatchBlock"/>
        <tags name="ref">
          <attributes name="name" value="parameter"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="OrdinaryParameter"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="Condition"/>
        <tags name="ref">
          <attributes name="name" value="elseStatement"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="Statement"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="Continue"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="DefaultSwitchCase"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="DoWhileLoop"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="EmptyStatement"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="ExpressionStatement"/>
        <tags name="ref">
          <attributes name="name" value="expression"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="Expression"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="ForLoop"/>
        <tags name="ref">
          <attributes name="name" value="init"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="ForLoopInitializer"/>
        </tags>
        <tags name="ref">
          <attributes name="name" value="updates"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="Expression"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="ForEachLoop"/>
        <tags name="ref">
          <attributes name="name" value="next"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="OrdinaryParameter"/>
        </tags>
        <tags name="ref">
          <attributes name="name" value="collection"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="Expression"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="Jump"/>
        <attributes name="abstract" value="true"/>
        <tags name="ref">
          <attributes name="name" value="target"/>
          <attributes name="type" value="JumpLabel"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="JumpLabel"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="LocalVariableStatement"/>
        <tags name="ref">
          <attributes name="name" value="variable"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="LocalVariable"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="NormalSwitchCase"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="Return"/>
        <tags name="ref">
          <attributes name="name" value="returnValue"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="Expression"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="Switch"/>
        <tags name="ref">
          <attributes name="name" value="cases"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="SwitchCase"/>
        </tags>
        <tags name="ref">
          <attributes name="name" value="variable"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="Expression"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="SynchronizedBlock"/>
        <tags name="ref">
          <attributes name="name" value="lockProvider"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="Expression"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="Throw"/>
        <tags name="ref">
          <attributes name="name" value="throwable"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="Expression"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="TryBlock"/>
        <tags name="ref">
          <attributes name="name" value="catcheBlocks"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="CatchBlock"/>
        </tags>
        <tags name="ref">
          <attributes name="name" value="finallyBlock"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="Block"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="WhileLoop"/>
        <tags name="ref">
          <attributes name="name" value="condition"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="Expression"/>
        </tags>
      </tags>
    </tags>
    <tags name="package">
      <attributes name="name" value="types"/>
      <attributes name="nsURI" value="http://www.emftext.org/simTL4J/types"/>
      <attributes name="nsPrefix" value="types"/>
      <tags name="class">
        <attributes name="name" value="Type"/>
        <attributes name="abstract" value="true"/>
        <tags name="EOperation">
          <attributes name="name" value="equalsType"/>
          <attributes name="type" value="EBoolean"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type _this = this ; &#xA;//do comparison on the classifier level&#xA;if ( _this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.PrimitiveType ) { &#xA;&#x9;_this = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.PrimitiveType ) _this ) .wrapPrimitiveType ( ) ; &#xA;} &#xA;if ( otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.PrimitiveType ) { &#xA;&#x9;otherType = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.PrimitiveType ) otherType ) .wrapPrimitiveType ( ) ; &#xA;} &#xA;if ( arrayDimension == otherArrayDimension &amp;&amp; otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Classifier &amp;&amp; _this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Classifier &amp;&amp; ( otherType .equals ( _this ) ) ) { &#xA;&#x9;return true ; &#xA;} &#xA;return false ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; @param arrayDimension&#xA; @param otherType&#xA; @param otherArrayDimension&#xA; @return if both type are equal&#xA;"/>
            </tags>
          </tags>
          <tags name="EParameter">
            <attributes name="name" value="arrayDimension"/>
            <attributes name="type" value="ELong"/>
          </tags>
          <tags name="EParameter">
            <attributes name="name" value="otherType"/>
            <attributes name="type" value="Type"/>
          </tags>
          <tags name="EParameter">
            <attributes name="name" value="otherArrayDimension"/>
            <attributes name="type" value="ELong"/>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="isSuperType"/>
          <attributes name="type" value="EBoolean"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="if ( otherType == null ) { &#xA;&#x9;return false ; &#xA;} &#xA;sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type _this = this ; &#xA;if ( _this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.util.TemporalCompositeClassifier || otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.util.TemporalCompositeClassifier ) { &#xA;&#x9;org.eclipse.emf.common.util.EList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type > _thisTypeList = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type > ( ) ; &#xA;&#x9;org.eclipse.emf.common.util.EList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type > otherTypeList = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList &lt; sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type > ( ) ; &#xA;&#x9;if ( _this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.util.TemporalCompositeClassifier ) { &#xA;&#x9;&#x9;for ( org.eclipse.emf.ecore.EObject aType : ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.util.TemporalCompositeClassifier ) _this ) .getSuperTypes ( ) ) { &#xA;&#x9;&#x9;&#x9;_thisTypeList .add ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type ) aType ) ; &#xA;&#x9;&#x9;} &#xA;&#x9;} else { &#xA;&#x9;&#x9;_thisTypeList .add ( _this ) ; &#xA;&#x9;} &#xA;&#x9;if ( otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.util.TemporalCompositeClassifier ) { &#xA;&#x9;&#x9;for ( org.eclipse.emf.ecore.EObject aType : ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.util.TemporalCompositeClassifier ) otherType ) .getSuperTypes ( ) ) { &#xA;&#x9;&#x9;&#x9;otherTypeList .add ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type ) aType ) ; &#xA;&#x9;&#x9;} &#xA;&#x9;} else { &#xA;&#x9;&#x9;otherTypeList .add ( _this ) ; &#xA;&#x9;} &#xA;&#x9;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type one_thisType : _thisTypeList ) { &#xA;&#x9;&#x9;for ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type oneOtherType : otherTypeList ) { &#xA;&#x9;&#x9;&#x9;boolean result = one_thisType .isSuperType ( arrayDimension , oneOtherType , otherArrayType ) ; &#xA;&#x9;&#x9;&#x9;if ( result ) { &#xA;&#x9;&#x9;&#x9;&#x9;return true ; &#xA;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;} &#xA;&#x9;} &#xA;&#x9;return false ; &#xA;} &#xA;//if I am a void, I am of every type&#xA;if ( _this .equals ( getLibClass ( &quot;Void&quot; ) ) ) { &#xA;&#x9;return true ; &#xA;} &#xA;//if the other is Object I am a subtype in any case (also array dimensions do not matter)&#xA;if ( otherType .equals ( getObjectClass ( ) ) ) { &#xA;&#x9;return true ; &#xA;} &#xA;//String, primitives, and arrays are serializable&#xA;sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier serializableClass = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) org.eclipse.emf.ecore.util.EcoreUtil .resolve ( getConcreteClassifier ( &quot;java.io.Serializable&quot; ) , _this ) ; &#xA;if ( otherType .equals ( serializableClass ) ) { &#xA;&#x9;if ( _this .equals ( serializableClass ) ) { &#xA;&#x9;&#x9;return true ; &#xA;&#x9;} else if ( _this .equals ( getStringClass ( ) ) ) { &#xA;&#x9;&#x9;return true ; &#xA;&#x9;} else if ( _this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.PrimitiveType ) { &#xA;&#x9;&#x9;return true ; &#xA;&#x9;} else if ( arrayDimension > 0 ) { &#xA;&#x9;&#x9;//all arrays are serializable&#xA;return true ; &#xA;&#x9;} &#xA;} &#xA;//if one of us is a parameter to the best of my knowledge, we might match&#xA;if ( _this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeParameter ) { &#xA;&#x9;return true ; &#xA;} &#xA;if ( otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeParameter ) { &#xA;&#x9;return true ; &#xA;} &#xA;//if array dimensions do not match, I am no subtype&#xA;boolean isTypeParameter = false ; &#xA;if ( otherArrayType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypedElement ) { &#xA;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type type = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypedElement ) otherArrayType ) .getTypeReference ( ) .getTarget ( ) ; &#xA;&#x9;isTypeParameter = type instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeParameter ; &#xA;} &#xA;boolean isVariableLengthParameter = otherArrayType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.parameters.VariableLengthParameter ; &#xA;long otherArrayDim = 0 ; &#xA;if ( otherArrayType != null ) { &#xA;&#x9;otherArrayDim = otherArrayType .getArrayDimension ( ) ; &#xA;} &#xA;if ( isTypeParameter &amp;&amp; isVariableLengthParameter ) { &#xA;&#x9;if ( arrayDimension != otherArrayDim &amp;&amp; arrayDimension != otherArrayDim - 1 &amp;&amp; arrayDimension &lt; otherArrayDim ) { &#xA;&#x9;&#x9;return false ; &#xA;&#x9;} &#xA;} else if ( isTypeParameter ) { &#xA;&#x9;if ( arrayDimension &lt; otherArrayDim ) { &#xA;&#x9;&#x9;return false ; &#xA;&#x9;} &#xA;} else if ( isVariableLengthParameter ) { &#xA;&#x9;if ( arrayDimension != otherArrayDim &amp;&amp; arrayDimension != otherArrayDim - 1 ) { &#xA;&#x9;&#x9;return false ; &#xA;&#x9;} &#xA;} else { &#xA;&#x9;if ( arrayDimension != otherArrayDim ) { &#xA;&#x9;&#x9;return false ; &#xA;&#x9;} &#xA;} &#xA;//annotations&#xA;if ( _this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Annotation &amp;&amp; ( otherType .equals ( getAnnotationInterface ( ) ) || ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) _this ) .getAllSuperClassifiers ( ) .contains ( getAnnotationInterface ( ) ) ) ) { &#xA;&#x9;return true ; &#xA;} &#xA;//do comparison on the classifier level&#xA;if ( _this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.PrimitiveType ) { &#xA;&#x9;_this = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.PrimitiveType ) _this ) .wrapPrimitiveType ( ) ; &#xA;} &#xA;if ( otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.PrimitiveType ) { &#xA;&#x9;otherType = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.PrimitiveType ) otherType ) .wrapPrimitiveType ( ) ; &#xA;} &#xA;//compare in type hierarchy&#xA;if ( otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier &amp;&amp; _this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier &amp;&amp; ( otherType .equals ( _this ) || ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) _this ) .getAllSuperClassifiers ( ) .contains ( otherType ) ) ) { &#xA;&#x9;return true ; &#xA;} &#xA;if ( otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier &amp;&amp; _this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.AnonymousClass &amp;&amp; ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.AnonymousClass ) _this ) .getAllSuperClassifiers ( ) .contains ( otherType ) ) { &#xA;&#x9;return true ; &#xA;} &#xA;//everything can be implicitly casted to CharSequence, so I match when the other type is a CharSequence&#xA;sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Interface charSequenceClass = getLibInterface ( &quot;CharSequence&quot; ) ; &#xA;if ( otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) { &#xA;&#x9;if ( otherType .equals ( charSequenceClass ) || ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) otherType ) .getAllSuperClassifiers ( ) .contains ( charSequenceClass ) ) { &#xA;&#x9;&#x9;return true ; &#xA;&#x9;} &#xA;} &#xA;//there are some specifics for primitive types not reflected in the type hierarchy&#xA;if ( otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class ) { &#xA;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.types.PrimitiveType primitiveType = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class ) otherType ) .unWrapPrimitiveType ( ) ; &#xA;&#x9;if ( primitiveType == null ) { &#xA;&#x9;&#x9;return false ; &#xA;&#x9;} &#xA;&#x9;otherType = primitiveType ; &#xA;} &#xA;if ( _this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class ) { &#xA;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.types.PrimitiveType primitiveType = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class ) _this ) .unWrapPrimitiveType ( ) ; &#xA;&#x9;if ( primitiveType == null ) { &#xA;&#x9;&#x9;return false ; &#xA;&#x9;} &#xA;&#x9;_this = primitiveType ; &#xA;} &#xA;if ( _this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Boolean ) { &#xA;&#x9;if ( otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Boolean ) { &#xA;&#x9;&#x9;return true ; &#xA;&#x9;} else { &#xA;&#x9;&#x9;return false ; &#xA;&#x9;} &#xA;} &#xA;if ( _this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Byte || _this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Int || _this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Short || _this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Long || _this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Char ) { &#xA;&#x9;if ( otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Byte || otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Int || otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Short || otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Long || otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Char || otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Float || otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Double ) { &#xA;&#x9;&#x9;return true ; &#xA;&#x9;} else { &#xA;&#x9;&#x9;return false ; &#xA;&#x9;} &#xA;} &#xA;if ( _this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Float || _this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Double ) { &#xA;&#x9;if ( otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Float || otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Double ) { &#xA;&#x9;&#x9;return true ; &#xA;&#x9;} else { &#xA;&#x9;&#x9;return false ; &#xA;&#x9;} &#xA;} &#xA;return false ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; @param arrayDimension&#xA; @param otherType&#xA; @param otherArrayType&#xA; @return if the other type is equal to me or a super type of me&#xA;"/>
            </tags>
          </tags>
          <tags name="EParameter">
            <attributes name="name" value="arrayDimension"/>
            <attributes name="type" value="ELong"/>
          </tags>
          <tags name="EParameter">
            <attributes name="name" value="otherType"/>
            <attributes name="type" value="Type"/>
          </tags>
          <tags name="EParameter">
            <attributes name="name" value="otherArrayType"/>
            <attributes name="type" value="ArrayTypeable"/>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="getAllMembers"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="type" value="Member"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="//method has to be specified in subclasses&#xA;throw new java.lang.UnsupportedOperationException ( ) ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value=""/>
            </tags>
          </tags>
          <tags name="EParameter">
            <attributes name="name" value="context"/>
            <attributes name="type" value="Commentable"/>
          </tags>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="TypedElement"/>
        <attributes name="abstract" value="true"/>
        <tags name="ref">
          <attributes name="name" value="typeReference"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="TypeReference"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="TypeReference"/>
        <attributes name="abstract" value="true"/>
        <tags name="EOperation">
          <attributes name="name" value="getTarget"/>
          <attributes name="type" value="Type"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="return getBoundTarget ( null ) ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; Returns the type referenced by this &lt;code>TypeReference&lt;/code>&#xA; considering all concrete subclasses of &lt;code>TypeReference&lt;/code> used&#xA; by the Java metamodel. &#xA; &#xA; @param _this &#xA; @return the type&#xA;"/>
            </tags>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="getBoundTarget"/>
          <attributes name="type" value="Type"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type type = null ; &#xA;if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.ClassifierReference || this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.NamespaceClassifierReference ) { &#xA;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.types.ClassifierReference classifierRef = getPureClassifierReference ( ) ; &#xA;&#x9;if ( classifierRef != null ) { &#xA;&#x9;&#x9;type = classifierRef .getTarget ( ) ; &#xA;&#x9;} &#xA;&#x9;if ( reference instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.MethodCall ) { &#xA;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.references.MethodCall potentialCloneCall = ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.MethodCall ) reference ; &#xA;&#x9;&#x9;//clone returns the type of the cloned in the case of arrays&#xA;if ( &quot;clone&quot; .equals ( potentialCloneCall .getTarget ( ) .getName ( ) ) ) { &#xA;&#x9;&#x9;&#x9;if ( potentialCloneCall .getPrevious ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.ElementReference ) { &#xA;&#x9;&#x9;&#x9;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.references.ElementReference prevRef = ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.ElementReference ) potentialCloneCall .getPrevious ( ) ; &#xA;&#x9;&#x9;&#x9;&#x9;if ( prevRef .getTarget ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.arrays.ArrayTypeable &amp;&amp; ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.arrays.ArrayTypeable ) prevRef .getTarget ( ) ) .getArrayDimension ( ) > 0 ) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;type = prevRef .getReferencedType ( ) ; &#xA;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;} &#xA;&#x9;} &#xA;} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.PrimitiveType ) { &#xA;&#x9;return ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.PrimitiveType ) this ; &#xA;} &#xA;//resolve parameter to real type&#xA;if ( type instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeParameter ) { &#xA;&#x9;type = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeParameter ) type ) .getBoundType ( this , reference ) ; &#xA;} &#xA;if ( type != null &amp;&amp; type .eIsProxy ( ) ) { &#xA;&#x9;//this may happen, when e.g. a super type is resolved. It is ok.&#xA;return null ; &#xA;} &#xA;return type ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; Returns the type referenced by this &lt;code>TypeReference&lt;/code>&#xA; considering all concrete subclasses of &lt;code>TypeReference&lt;/code> used&#xA; by the Java metamodel. If type parameters are bound in the given reference,&#xA; the bound type will be returned instead of the parameter.&#xA; &#xA; @return the type&#xA;"/>
            </tags>
          </tags>
          <tags name="EParameter">
            <attributes name="name" value="reference"/>
            <attributes name="type" value="Reference"/>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="getPureClassifierReference"/>
          <attributes name="type" value="ClassifierReference"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="sg.edu.nus.comp.simTL.language.java.simTL4J.types.ClassifierReference classifierReference = null ; &#xA;if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.ClassifierReference ) { &#xA;&#x9;classifierReference = ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.ClassifierReference ) this ; &#xA;} &#xA;if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.NamespaceClassifierReference ) { &#xA;&#x9;sg.edu.nus.comp.simTL.language.java.simTL4J.types.NamespaceClassifierReference nsClassifierReference = ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.NamespaceClassifierReference ) this ; &#xA;&#x9;if ( ! nsClassifierReference .getClassifierReferences ( ) .isEmpty ( ) ) { &#xA;&#x9;&#x9;int lastIndex = nsClassifierReference .getClassifierReferences ( ) .size ( ) - 1 ; &#xA;&#x9;&#x9;classifierReference = nsClassifierReference .getClassifierReferences ( ) .get ( lastIndex ) ; &#xA;&#x9;} &#xA;} &#xA;return classifierReference ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; Extracts the (possibly nested) classifier reference (if any) &#xA; from this type references.&#xA; &#xA; @return&#xA;"/>
            </tags>
          </tags>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="ClassifierReference"/>
        <tags name="ref">
          <attributes name="name" value="target"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="type" value="Classifier"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="NamespaceClassifierReference"/>
        <tags name="ref">
          <attributes name="name" value="classifierReferences"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="ClassifierReference"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="PrimitiveType"/>
        <attributes name="abstract" value="true"/>
        <tags name="EOperation">
          <attributes name="name" value="getAllMembers"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="type" value="Member"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class javaClass = wrapPrimitiveType ( ) ; &#xA;return javaClass .getAllMembers ( context ) ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; @param context to check protected visibility&#xA; @return all members (including super type members)&#xA;"/>
            </tags>
          </tags>
          <tags name="EParameter">
            <attributes name="name" value="context"/>
            <attributes name="type" value="Commentable"/>
          </tags>
        </tags>
        <tags name="EOperation">
          <attributes name="name" value="wrapPrimitiveType"/>
          <attributes name="type" value="Class"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class javaClass = null ; &#xA;if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Boolean ) { &#xA;&#x9;javaClass = getLibClass ( &quot;Boolean&quot; ) ; &#xA;} &#xA;if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Byte ) { &#xA;&#x9;javaClass = getLibClass ( &quot;Byte&quot; ) ; &#xA;} &#xA;if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Char ) { &#xA;&#x9;javaClass = getLibClass ( &quot;Character&quot; ) ; &#xA;} &#xA;if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Double ) { &#xA;&#x9;javaClass = getLibClass ( &quot;Double&quot; ) ; &#xA;} &#xA;if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Float ) { &#xA;&#x9;javaClass = getLibClass ( &quot;Float&quot; ) ; &#xA;} &#xA;if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Int ) { &#xA;&#x9;javaClass = getLibClass ( &quot;Integer&quot; ) ; &#xA;} &#xA;if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Long ) { &#xA;&#x9;javaClass = getLibClass ( &quot;Long&quot; ) ; &#xA;} &#xA;if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Short ) { &#xA;&#x9;javaClass = getLibClass ( &quot;Short&quot; ) ; &#xA;} &#xA;if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Void ) { &#xA;&#x9;javaClass = getLibClass ( &quot;Void&quot; ) ; &#xA;} &#xA;return javaClass ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value="&#xA; @return primitive type as a class representation&#xA;"/>
            </tags>
          </tags>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="Boolean"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="Byte"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="Char"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="Double"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="Float"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="Int"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="Long"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="Short"/>
      </tags>
      <tags name="class">
        <attributes name="name" value="Void"/>
      </tags>
    </tags>
    <tags name="package">
      <attributes name="name" value="variables"/>
      <attributes name="nsURI" value="http://www.emftext.org/simTL4J/variables"/>
      <attributes name="nsPrefix" value="variables"/>
      <tags name="class">
        <attributes name="name" value="Variable"/>
        <attributes name="abstract" value="true"/>
        <tags name="EOperation">
          <attributes name="name" value="getArrayDimension"/>
          <attributes name="type" value="ELong"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="long size = this .getArrayDimensionsBefore ( ) .size ( ) + this .getArrayDimensionsAfter ( ) .size ( ) ; &#xA;if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.parameters.VariableLengthParameter ) { &#xA;&#x9;size ++ ; &#xA;} &#xA;return size ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value=""/>
            </tags>
          </tags>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="LocalVariable"/>
        <tags name="ref">
          <attributes name="name" value="additionalLocalVariables"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="AdditionalLocalVariable"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="AdditionalLocalVariable"/>
        <tags name="EOperation">
          <attributes name="name" value="getArrayDimension"/>
          <attributes name="type" value="ELong"/>
          <tags name="EAnnotation">
            <attributes name="source" value="http://www.eclipse.org/emf/2002/GenModel"/>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="body"/>
              <attributes name="value" value="long size = this .getArrayDimensionsBefore ( ) .size ( ) + this .getArrayDimensionsAfter ( ) .size ( ) ; &#xA;return size ; &#xA;"/>
            </tags>
            <tags name="EStringToStringMapEntry">
              <attributes name="key" value="documentation"/>
              <attributes name="value" value=""/>
            </tags>
          </tags>
        </tags>
      </tags>
    </tags>
    <tags name="package">
      <attributes name="name" value="simTL"/>
      <attributes name="nsURI" value="http://www.emftext.org/simTL4J/simTL"/>
      <attributes name="nsPrefix" value="simTL"/>
      <tags name="class">
        <attributes name="name" value="TIf"/>
        <attributes name="abstract" value="true"/>
        <tags name="EAnnotation">
          <attributes name="source" value="template_class"/>
        </tags>
        <tags name="EAnnotation">
          <attributes name="source" value="template_if"/>
        </tags>
        <tags name="ref">
          <attributes name="name" value="condition"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="TAbstractMethodStatement"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="TFor"/>
        <attributes name="abstract" value="true"/>
        <tags name="EAnnotation">
          <attributes name="source" value="template_class"/>
        </tags>
        <tags name="EAnnotation">
          <attributes name="source" value="template_forLoop"/>
        </tags>
        <tags name="ref">
          <attributes name="name" value="count"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="TForVariable"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="TForVariable"/>
        <tags name="EAnnotation">
          <attributes name="source" value="template_class"/>
        </tags>
        <tags name="attr">
          <attributes name="name" value="name"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="type" value="//EString"/>
        </tags>
        <tags name="ref">
          <attributes name="name" value="setToBeIterated"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="TAbstractMethodStatement"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="Template"/>
        <tags name="EAnnotation">
          <attributes name="source" value="template_class"/>
          <tags name="EStringToStringMapEntry">
            <attributes name="key" value="objectLanguage"/>
            <attributes name="value" value="http://www.emftext.org/java/"/>
          </tags>
          <tags name="EStringToStringMapEntry">
            <attributes name="key" value="objectLanguageFactory"/>
            <attributes name="value" value="org.emftext.language.java.resource.java.mopp.JavaResourceFactory"/>
          </tags>
          <tags name="EStringToStringMapEntry">
            <attributes name="key" value="objectLanguageExtension"/>
            <attributes name="value" value="java"/>
          </tags>
        </tags>
        <tags name="ref">
          <attributes name="name" value="templateHeader"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="TemplateHeader"/>
        </tags>
        <tags name="ref">
          <attributes name="name" value="class"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="JavaRoot"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="TemplateHeader"/>
        <tags name="EAnnotation">
          <attributes name="source" value="template_class"/>
        </tags>
        <tags name="ref">
          <attributes name="name" value="modelImports"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="TModelImport"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="TModelImport"/>
        <tags name="EAnnotation">
          <attributes name="source" value="template_class"/>
        </tags>
        <tags name="attr">
          <attributes name="name" value="name"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="type" value="//EString"/>
        </tags>
        <tags name="attr">
          <attributes name="name" value="uri"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="defaultValueLiteral" value=""/>
          <attributes name="type" value="//EString"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="TMethodCall"/>
        <tags name="EAnnotation">
          <attributes name="source" value="template_class"/>
        </tags>
        <tags name="attr">
          <attributes name="name" value="methodName"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="type" value="//EString"/>
        </tags>
        <tags name="attr">
          <attributes name="name" value="params"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="type" value="//EString"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="TAbstractMethodStatement"/>
        <tags name="EAnnotation">
          <attributes name="source" value="template_class"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="TFor_MemberContainer"/>
        <tags name="EAnnotation">
          <attributes name="source" value="template_class"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="TFor_StatementListContainer"/>
        <tags name="EAnnotation">
          <attributes name="source" value="template_class"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="TIf_MemberContainer"/>
        <tags name="EAnnotation">
          <attributes name="source" value="template_class"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="TIf_StatementListContainer"/>
        <tags name="EAnnotation">
          <attributes name="source" value="template_class"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="TPlaceholder"/>
        <tags name="EAnnotation">
          <attributes name="source" value="template_class"/>
        </tags>
        <tags name="EAnnotation">
          <attributes name="source" value="template_PH"/>
        </tags>
        <tags name="ref">
          <attributes name="name" value="methodStatement"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="TAbstractMethodStatement"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="TPlaceholder_PrimaryExpression"/>
        <tags name="EAnnotation">
          <attributes name="source" value="template_class"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="TUnaryOperator"/>
        <attributes name="abstract" value="true"/>
        <tags name="EAnnotation">
          <attributes name="source" value="template_class"/>
        </tags>
        <tags name="ref">
          <attributes name="name" value="methodStatement"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="TAbstractMethodStatement"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="TUnaryOperatorNOT"/>
        <tags name="EAnnotation">
          <attributes name="source" value="template_class"/>
        </tags>
      </tags>
      <tags name="class">
        <attributes name="name" value="TMethodStatementImpl"/>
        <tags name="EAnnotation">
          <attributes name="source" value="template_class"/>
        </tags>
        <tags name="attr">
          <attributes name="name" value="caller"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="type" value="//EString"/>
        </tags>
        <tags name="ref">
          <attributes name="name" value="callee"/>
          <attributes name="lowerBound" value="1"/>
          <attributes name="upperBound" value="-1"/>
          <attributes name="containment" value="true"/>
          <attributes name="type" value="TMethodCall"/>
        </tags>
      </tags>
    </tags>
  </tags>
</FlexmiModel>
