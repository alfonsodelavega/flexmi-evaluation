<?nsuri http://www.eclipse.org/emf/2002/Ecore?>
<?import http://www.eclipse.org/emf/2002/Ecore?>
<package name="simTL4J" nsURI="http://www.emftext.org/simTL4J" nsPrefix="simTL4J">
	<package name="annotations" nsURI="http://www.emftext.org/simTL4J/annotations" nsPrefix="annotations">
		<class name="Annotable" abstract="true">
			<ref name="annotations" upperBound="-1" containment="true" type="AnnotationInstance"/>
		</class>
		<class name="AnnotationInstance">
			<ref name="annotation" lowerBound="1" type="Classifier"/>
			<ref name="parameter" containment="true" type="AnnotationParameter"/>
		</class>
		<class name="AnnotationParameter" abstract="true"/>
		<class name="SingleAnnotationParameter">
			<ref name="value" lowerBound="1" containment="true" type="AnnotationValue"/>
		</class>
		<class name="AnnotationParameterList">
			<ref name="settings" upperBound="-1" containment="true" type="AnnotationAttributeSetting"/>
		</class>
		<class name="AnnotationAttributeSetting">
			<ref name="attribute" lowerBound="1" type="InterfaceMethod"/>
			<ref name="value" lowerBound="1" containment="true" type="AnnotationValue"/>
		</class>
		<class name="AnnotationValue" abstract="true"/>
		<class name="AnnotationAttribute">
			<ref name="defaultValue" containment="true" type="Expression"/>
		</class>
	</package>
	<package name="arrays" nsURI="http://www.emftext.org/simTL4J/arrays" nsPrefix="arrays">
		<class name="ArrayTypeable" abstract="true">
			<EOperation name="getArrayDimension" type="ELong"/>
			<ref name="arrayDimensionsBefore" upperBound="-1" containment="true" type="ArrayDimension"/>
			<ref name="arrayDimensionsAfter" upperBound="-1" containment="true" type="ArrayDimension"/>
		</class>
		<class name="ArrayDimension"/>
		<class name="ArrayInitializer">
			<ref name="initialValues" upperBound="-1" containment="true" type="ArrayInitializationValue"/>
		</class>
		<class name="ArrayInitializationValue" abstract="true"/>
		<class name="ArrayInstantiationBySize">
			<ref name="sizes" upperBound="-1" containment="true" type="Expression"/>
		</class>
		<class name="ArrayInstantiationByValues">
			<ref name="arrayInitializer" containment="true" type="ArrayInitializer"/>
		</class>
		<class name="ArraySelector">
			<ref name="position" containment="true" type="Expression"/>
		</class>
	</package>
	<package name="classifiers" nsURI="http://www.emftext.org/simTL4J/classifiers" nsPrefix="classifiers">
		<class name="Classifier" abstract="true">
			<EOperation name="getAllSuperClassifiers" upperBound="-1" type="ConcreteClassifier">
				<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
					<EStringToStringMapEntry key="body" value="//method has to be specified in subclasses
					throw new java.lang.UnsupportedOperationException ( ) ; 
					"/>
					<EStringToStringMapEntry key="documentation" value=""/>
				</EAnnotation>
			</EOperation>
		</class>
		<class name="ConcreteClassifier" abstract="true">
			<EOperation name="getInnerClassifiers" upperBound="-1" type="ConcreteClassifier">
				<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
					<EStringToStringMapEntry key="body" value="if ( this .eIsProxy ( ) ) { 
					java.lang.String uriString = ( ( org.eclipse.emf.ecore.InternalEObject ) this ) .eProxyURI ( ) .trimFragment ( ) .toString ( ) ; 
					java.lang.String fullName = uriString .substring ( sg.edu.nus.comp.simTL.language.java.simTL4J.JavaUniquePathConstructor .JAVA_CLASSIFIER_PATHMAP .length ( ) , uriString .length ( ) - ".java" .length ( ) ) + "$" ; 
					return getConcreteClassifiers ( fullName , "*" ) ; 
					} else { 
					java.lang.String suffix = "" ; 
					sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier containingClass = this ; 
					while ( containingClass .eContainer ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) { 
					containingClass = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) containingClass .eContainer ( ) ; 
					suffix = containingClass .getName ( ) + sg.edu.nus.comp.simTL.language.java.simTL4J.JavaUniquePathConstructor .CLASSIFIER_SEPARATOR + suffix ; 
					} 
					if ( containingClass .eContainer ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.containers.CompilationUnit ) { 
					sg.edu.nus.comp.simTL.language.java.simTL4J.containers.CompilationUnit compilationUnit = ( sg.edu.nus.comp.simTL.language.java.simTL4J.containers.CompilationUnit ) containingClass .eContainer ( ) ; 
					java.lang.String fullName = compilationUnit .getNamespacesAsString ( ) + suffix + getName ( ) + sg.edu.nus.comp.simTL.language.java.simTL4J.JavaUniquePathConstructor .CLASSIFIER_SEPARATOR ; 
					return getConcreteClassifiers ( fullName , "*" ) ; 
					} 
					} 
					//for classes declared locally inside methods that are not registered in the class path
					org.eclipse.emf.common.util.EList < sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > result = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList < sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > ( ) ; 
							//can not call ClassifierUtil.getAllMembers, because it will try to call this method!
							for ( sg.edu.nus.comp.simTL.language.java.simTL4J.members.Member member : getMembers ( ) ) { 
							if ( member instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) { 
							result .add ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) member ) ; 
							} 
							} 
							for ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier superClassifier : getAllSuperClassifiers ( ) ) { 
							for ( sg.edu.nus.comp.simTL.language.java.simTL4J.members.Member member : superClassifier .getMembers ( ) ) { 
							if ( member instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) { 
							result .add ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) member ) ; 
							} 
							} 
							} 
							return result ; 
							"/>
							<EStringToStringMapEntry key="documentation" value=""/>
						</EAnnotation>
					</EOperation>
					<EOperation name="getAllInnerClassifiers" upperBound="-1" type="ConcreteClassifier">
						<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
							<EStringToStringMapEntry key="body" value="org.eclipse.emf.common.util.EList < sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > innerClassifierList = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList < sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > ( ) ; 
									innerClassifierList .addAll ( getInnerClassifiers ( ) ) ; 
									for ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier superClassifier : getAllSuperClassifiers ( ) ) { 
									org.eclipse.emf.common.util.EList < sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > superInnerList = superClassifier .getInnerClassifiers ( ) ; 
										for ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier superInner : superInnerList ) { 
										if ( superInner .eIsProxy ( ) ) { 
										superInner = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) org.eclipse.emf.ecore.util.EcoreUtil .resolve ( superInner , this ) ; 
										} 
										if ( ! superInner .eIsProxy ( ) && ! superInner .isHidden ( this ) ) { 
										innerClassifierList .add ( superInner ) ; 
										} 
										} 
										} 
										return innerClassifierList ; 
										"/>
										<EStringToStringMapEntry key="documentation" value=""/>
									</EAnnotation>
								</EOperation>
								<EOperation name="getSuperTypeReferences" upperBound="-1" type="ClassifierReference">
									<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
										<EStringToStringMapEntry key="body" value="org.eclipse.emf.common.util.EList < sg.edu.nus.comp.simTL.language.java.simTL4J.types.ClassifierReference > typeReferenceList = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList < sg.edu.nus.comp.simTL.language.java.simTL4J.types.ClassifierReference > ( ) ; 
												if ( this == null ) { 
												return typeReferenceList ; 
												} 
												if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class ) { 
												sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class javaClass = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class ) this ; 
												if ( javaClass .getExtends ( ) != null ) { 
												sg.edu.nus.comp.simTL.language.java.simTL4J.types.ClassifierReference classifierReference = javaClass .getExtends ( ) .getPureClassifierReference ( ) ; 
												typeReferenceList .add ( classifierReference ) ; 
												sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier target = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) classifierReference .getTarget ( ) ; 
												if ( ! target .equals ( getObjectClass ( ) ) ) { 
												typeReferenceList .addAll ( target .getSuperTypeReferences ( ) ) ; 
												} 
												} 
												for ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypeReference interfaceReference : javaClass .getImplements ( ) ) { 
												sg.edu.nus.comp.simTL.language.java.simTL4J.types.ClassifierReference classifierReference = interfaceReference .getPureClassifierReference ( ) ; 
												typeReferenceList .add ( classifierReference ) ; 
												typeReferenceList .addAll ( ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) classifierReference .getTarget ( ) ) .getSuperTypeReferences ( ) ) ; 
												} 
												} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Interface ) { 
												sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Interface javaInterface = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Interface ) this ; 
												for ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypeReference interfaceReference : javaInterface .getExtends ( ) ) { 
												sg.edu.nus.comp.simTL.language.java.simTL4J.types.ClassifierReference classifierReference = interfaceReference .getPureClassifierReference ( ) ; 
												typeReferenceList .add ( classifierReference ) ; 
												typeReferenceList .addAll ( ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) classifierReference .getTarget ( ) ) .getSuperTypeReferences ( ) ) ; 
												} 
												} 
												return typeReferenceList ; 
												"/>
												<EStringToStringMapEntry key="documentation" value=""/>
											</EAnnotation>
										</EOperation>
										<EOperation name="getAllMembers" upperBound="-1" type="Member">
											<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
												<EStringToStringMapEntry key="body" value="org.eclipse.emf.common.util.EList < sg.edu.nus.comp.simTL.language.java.simTL4J.members.Member > memberList = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList < sg.edu.nus.comp.simTL.language.java.simTL4J.members.Member > ( ) ; 
														sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier concreteClassifier = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) this ; 
														memberList .addAll ( concreteClassifier .getMembers ( ) ) ; 
														memberList .addAll ( concreteClassifier .getDefaultMembers ( ) ) ; 
														//because inner classes are found in separate class files
														memberList .addAll ( concreteClassifier .getAllInnerClassifiers ( ) ) ; 
														for ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier superClassifier : getAllSuperClassifiers ( ) ) { 
														for ( sg.edu.nus.comp.simTL.language.java.simTL4J.members.Member member : superClassifier .getMembers ( ) ) { 
														if ( member instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.modifiers.AnnotableAndModifiable ) { 
														sg.edu.nus.comp.simTL.language.java.simTL4J.modifiers.AnnotableAndModifiable modifiable = ( sg.edu.nus.comp.simTL.language.java.simTL4J.modifiers.AnnotableAndModifiable ) member ; 
														if ( ! modifiable .isHidden ( context ) ) { 
														memberList .add ( member ) ; 
														} 
														} else { 
														memberList .add ( member ) ; 
														} 
														} 
														memberList .addAll ( superClassifier .getDefaultMembers ( ) ) ; 
														} 
														return memberList ; 
														"/>
														<EStringToStringMapEntry key="documentation" value="
														Returns all members of the given classifier including inner classes and 
														all members of super types (extended classes and implemented interfaces).
														
														@param context to check protected visibility
														@return member list
														"/>
													</EAnnotation>
													<EParameter name="context" type="Commentable"/>
												</EOperation>
												<attr name="fullName" transient="true" type="//EString"/>
											</class>
											<class name="Implementor" abstract="true">
												<ref name="implements" upperBound="-1" containment="true" type="TypeReference"/>
											</class>
											<class name="Class">
												<EOperation name="getAllSuperClassifiers" upperBound="-1" type="ConcreteClassifier">
													<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
														<EStringToStringMapEntry key="body" value="org.eclipse.emf.common.util.EList < sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > result = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList < sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > ( ) ; 
																//collects all superclasses first
																sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class superClass = this ; 
																while ( superClass != null && ! superClass .eIsProxy ( ) && ! superClass .equals ( getObjectClass ( ) ) ) { 
																superClass = superClass .getSuperClass ( ) ; 
																if ( superClass != null ) { 
																result .add ( superClass ) ; 
																} 
																} 
																//collect all implemented interfaces
																for ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypeReference typeArg : this .getImplements ( ) ) { 
																sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier superInterface = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) typeArg .getTarget ( ) ; 
																if ( superInterface != null ) { 
																result .add ( superInterface ) ; 
																if ( superInterface instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Interface ) { 
																result .addAll ( ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Interface ) superInterface ) .getAllSuperClassifiers ( ) ) ; 
																} 
																} 
																} 
																//collect all implemented interfaces of super classes
																superClass = this .getSuperClass ( ) ; 
																if ( superClass != null && ! superClass .eIsProxy ( ) && ! superClass .equals ( getObjectClass ( ) ) ) { 
																result .addAll ( superClass .getAllSuperClassifiers ( ) ) ; 
																} 
																return result ; 
																"/>
																<EStringToStringMapEntry key="documentation" value="
																Recursively collects all super types (extended classes and implemented interfaces)
																of the given class.
																
																@param classifierList the list for the result
																"/>
															</EAnnotation>
														</EOperation>
														<EOperation name="getSuperClass" type="Class">
															<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																<EStringToStringMapEntry key="body" value="sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypeReference superClassReference = this .getExtends ( ) ; 
																if ( superClassReference == null ) { 
																superClassReference = this .getDefaultExtends ( ) ; 
																} 
																if ( superClassReference == null ) { 
																return null ; 
																} 
																sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type result = superClassReference .getTarget ( ) ; 
																if ( result instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class ) { 
																return ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class ) result ; 
																} 
																return null ; 
																"/>
																<EStringToStringMapEntry key="documentation" value="
																@param this
																@return the direct super class
																"/>
															</EAnnotation>
														</EOperation>
														<EOperation name="unWrapPrimitiveType" type="PrimitiveType">
															<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																<EStringToStringMapEntry key="body" value="if ( getLibClass ( "Boolean" ) .equals ( this ) ) { 
																return sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypesFactory.eINSTANCE.createBoolean(); 
																} 
																if ( getLibClass ( "Byte" ) .equals ( this ) ) { 
																return sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypesFactory.eINSTANCE.createByte(); 
																} 
																if ( getLibClass ( "Character" ) .equals ( this ) ) { 
																return sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypesFactory.eINSTANCE.createChar(); 
																} 
																if ( getLibClass ( "Float" ) .equals ( this ) ) { 
																return sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypesFactory.eINSTANCE.createFloat(); 
																} 
																if ( getLibClass ( "Double" ) .equals ( this ) ) { 
																return sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypesFactory.eINSTANCE.createDouble(); 
																} 
																if ( getLibClass ( "Integer" ) .equals ( this ) ) { 
																return sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypesFactory.eINSTANCE.createInt(); 
																} 
																if ( getLibClass ( "Long" ) .equals ( this ) ) { 
																return sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypesFactory.eINSTANCE.createLong(); 
																} 
																if ( getLibClass ( "Short" ) .equals ( this ) ) { 
																return sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypesFactory.eINSTANCE.createShort(); 
																} 
																if ( getLibClass ( "Void" ) .equals ( this ) ) { 
																return sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypesFactory.eINSTANCE.createVoid(); 
																} 
																return null ; 
																"/>
																<EStringToStringMapEntry key="documentation" value="
																@param this
																@return primitive type, if the class can be wrapped
																"/>
															</EAnnotation>
														</EOperation>
														<ref name="extends" containment="true" type="TypeReference"/>
														<ref name="defaultExtends" transient="true" containment="true" type="TypeReference"/>
													</class>
													<class name="Interface">
														<EOperation name="getAllSuperClassifiers" upperBound="-1" type="ConcreteClassifier">
															<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																<EStringToStringMapEntry key="body" value="org.eclipse.emf.common.util.EList < sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > result = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList < sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > ( ) ; 
																		for ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypeReference typeArg : this .getExtends ( ) ) { 
																		//use ConcreteClassifier instead of Interface because java.lang.Object can also act as implemented interface
																		sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier superInterface = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) typeArg .getTarget ( ) ; 
																		if ( superInterface != null ) { 
																		result .add ( superInterface ) ; 
																		if ( superInterface instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Interface ) { 
																		result .addAll ( ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Interface ) superInterface ) .getAllSuperClassifiers ( ) ) ; 
																		} 
																		} 
																		} 
																		for ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypeReference typeArg : this .getDefaultExtends ( ) ) { 
																		//use ConcreteClassifier instead of Interface because java.lang.Object can also act as implemented interface
																		sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier superInterface = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) typeArg .getTarget ( ) ; 
																		if ( superInterface != null ) { 
																		result .add ( superInterface ) ; 
																		if ( superInterface instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Interface ) { 
																		result .addAll ( ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Interface ) superInterface ) .getAllSuperClassifiers ( ) ) ; 
																		} 
																		} 
																		} 
																		return result ; 
																		"/>
																		<EStringToStringMapEntry key="documentation" value="
																		@return all interfaces extended by this interface. The type is 
																		ConcreteClassifier, because java.lang.Object is also extended although
																		it is a Class.
																		"/>
																	</EAnnotation>
																</EOperation>
																<ref name="extends" upperBound="-1" containment="true" type="TypeReference"/>
																<ref name="defaultExtends" upperBound="-1" transient="true" containment="true" type="TypeReference"/>
															</class>
															<class name="Enumeration">
																<EOperation name="getAllSuperClassifiers" upperBound="-1" type="ConcreteClassifier">
																	<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																		<EStringToStringMapEntry key="body" value="org.eclipse.emf.common.util.EList < sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > result = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList < sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > ( ) ; 
																				//enumerations inherit from java.lang.Enum
																				sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class enumClass = getLibClass ( "Enum" ) ; 
																				result .add ( enumClass ) ; 
																				result .addAll ( enumClass .getAllSuperClassifiers ( ) ) ; 
																				//collect all implemented interfaces
																				for ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypeReference typeArg : this .getImplements ( ) ) { 
																				sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier superInterface = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) typeArg .getTarget ( ) ; 
																				if ( superInterface != null ) { 
																				result .add ( superInterface ) ; 
																				if ( superInterface instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Interface ) { 
																				result .addAll ( ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Interface ) superInterface ) .getAllSuperClassifiers ( ) ) ; 
																				} 
																				} 
																				} 
																				return result ; 
																				"/>
																				<EStringToStringMapEntry key="documentation" value="
																				@return all interfaces extended by this enumeration.
																				"/>
																			</EAnnotation>
																		</EOperation>
																		<ref name="constants" upperBound="-1" containment="true" type="EnumConstant"/>
																	</class>
																	<class name="Annotation">
																		<EOperation name="getAllSuperClassifiers" upperBound="-1" type="ConcreteClassifier">
																			<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																				<EStringToStringMapEntry key="body" value="org.eclipse.emf.common.util.EList < sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > result = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList < sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > ( ) ; 
																						result .add ( getAnnotationInterface ( ) ) ; 
																						return result ; 
																						"/>
																						<EStringToStringMapEntry key="documentation" value="
																						@return <code>java.lang.annotation.Annotation</code> 
																						"/>
																					</EAnnotation>
																				</EOperation>
																			</class>
																			<class name="AnonymousClass">
																				<EOperation name="getAllSuperClassifiers" upperBound="-1" type="ConcreteClassifier">
																					<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																						<EStringToStringMapEntry key="body" value="org.eclipse.emf.common.util.EList < sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > superClassifierList = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList < sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > ( ) ; 
																								sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier superClassifier = getSuperClassifier ( ) ; 
																								if ( superClassifier != null ) { 
																								superClassifierList .add ( superClassifier ) ; 
																								superClassifierList .addAll ( superClassifier .getAllSuperClassifiers ( ) ) ; 
																								} else { 
																								superClassifierList .add ( getObjectClass ( ) ) ; 
																								} 
																								return superClassifierList ; 
																								"/>
																								<EStringToStringMapEntry key="documentation" value="
																								@return a view on all super classifiers
																								"/>
																							</EAnnotation>
																						</EOperation>
																						<EOperation name="getSuperClassifier" type="ConcreteClassifier">
																							<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																								<EStringToStringMapEntry key="body" value="sg.edu.nus.comp.simTL.language.java.simTL4J.instantiations.NewConstructorCall ncCall = null ; 
																								if ( this .eContainer ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.instantiations.NewConstructorCall ) { 
																								ncCall = ( sg.edu.nus.comp.simTL.language.java.simTL4J.instantiations.NewConstructorCall ) this .eContainer ( ) ; 
																								sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier superClassifier = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) ncCall .getTypeReference ( ) .getTarget ( ) ; 
																								return superClassifier ; 
																								} else if ( this .eContainer ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.members.EnumConstant ) { 
																								if ( this .eContainer ( ) .eContainer ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Enumeration ) { 
																								return ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Enumeration ) this .eContainer ( ) .eContainer ( ) ; 
																								} 
																								} 
																								return null ; 
																								"/>
																								<EStringToStringMapEntry key="documentation" value="
																								@return the direct super classifier
																								"/>
																							</EAnnotation>
																						</EOperation>
																						<EOperation name="getAllMembers" upperBound="-1" type="Member">
																							<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																								<EStringToStringMapEntry key="body" value="org.eclipse.emf.common.util.EList < sg.edu.nus.comp.simTL.language.java.simTL4J.members.Member > memberList = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList < sg.edu.nus.comp.simTL.language.java.simTL4J.members.Member > ( ) ; 
																										memberList .addAll ( this .getMembers ( ) ) ; 
																										memberList .addAll ( this .getDefaultMembers ( ) ) ; 
																										sg.edu.nus.comp.simTL.language.java.simTL4J.instantiations.NewConstructorCall ncCall = null ; 
																										if ( this .eContainer ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.instantiations.NewConstructorCall ) { 
																										ncCall = ( sg.edu.nus.comp.simTL.language.java.simTL4J.instantiations.NewConstructorCall ) this .eContainer ( ) ; 
																										; 
																										} 
																										if ( ncCall == null ) { 
																										return memberList ; 
																										} else { 
																										sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier classifier = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) ncCall .getTypeReference ( ) .getTarget ( ) ; 
																										if ( classifier != null ) { 
																										org.eclipse.emf.common.util.EList < sg.edu.nus.comp.simTL.language.java.simTL4J.members.Member > superMemberList = classifier .getAllMembers ( context ) ; 
																											for ( sg.edu.nus.comp.simTL.language.java.simTL4J.members.Member superMember : superMemberList ) { 
																											//exclude private members
																											if ( superMember instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.modifiers.AnnotableAndModifiable ) { 
																											if ( superMember .eIsProxy ( ) ) { 
																											superMember = ( sg.edu.nus.comp.simTL.language.java.simTL4J.members.Member ) org.eclipse.emf.ecore.util.EcoreUtil .resolve ( superMember , this ) ; 
																											} 
																											sg.edu.nus.comp.simTL.language.java.simTL4J.modifiers.AnnotableAndModifiable modifiable = ( sg.edu.nus.comp.simTL.language.java.simTL4J.modifiers.AnnotableAndModifiable ) superMember ; 
																											if ( ! modifiable .isHidden ( context ) ) { 
																											memberList .add ( superMember ) ; 
																											} 
																											} else { 
																											memberList .add ( superMember ) ; 
																											} 
																											} 
																											} 
																											return memberList ; 
																											} 
																											"/>
																											<EStringToStringMapEntry key="documentation" value="
																											@param context to check protected visibility
																											@return a view on all members including super classifiers' members
																											"/>
																										</EAnnotation>
																										<EParameter name="context" type="Commentable"/>
																									</EOperation>
																								</class>
																							</package>
																							<package name="commons" nsURI="http://www.emftext.org/simTL4J/commons" nsPrefix="commons">
																								<class name="Commentable" abstract="true">
																									<EOperation name="getConcreteClassifier" type="ConcreteClassifier">
																										<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																											<EStringToStringMapEntry key="body" value="return ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) sg.edu.nus.comp.simTL.language.java.simTL4J.JavaClasspath .get ( this ) .getClassifier ( name ) ; 
																											"/>
																											<EStringToStringMapEntry key="documentation" value=""/>
																										</EAnnotation>
																										<EParameter name="name" type="EString"/>
																									</EOperation>
																									<EOperation name="getConcreteClassifiers" upperBound="-1" type="ConcreteClassifier">
																										<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																											<EStringToStringMapEntry key="body" value="org.eclipse.emf.common.util.EList < sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > result = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList < sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > ( ) ; 
																													for ( org.eclipse.emf.ecore.EObject classifier : sg.edu.nus.comp.simTL.language.java.simTL4J.JavaClasspath .get ( this ) .getClassifiers ( packageName , classifierQuery ) ) { 
																													result .add ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) classifier ) ; 
																													} 
																													return result ; 
																													"/>
																													<EStringToStringMapEntry key="documentation" value=""/>
																												</EAnnotation>
																												<EParameter name="packageName" type="EString"/>
																												<EParameter name="classifierQuery" type="EString"/>
																											</EOperation>
																											<EOperation name="getLibClass" type="Class">
																												<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																													<EStringToStringMapEntry key="body" value="if ( this .eResource ( ) == null ) { 
																													throw new java.lang.IllegalArgumentException ( "object context element must have a resource" ) ; 
																													} 
																													sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class classClass = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class ) getConcreteClassifier ( "java.lang." + name ) ; 
																													classClass = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class ) org.eclipse.emf.ecore.util.EcoreUtil .resolve ( classClass , this ) ; 
																													return classClass ; 
																													"/>
																													<EStringToStringMapEntry key="documentation" value="
																													Finds the <code>sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class</code>
																													representing the class with the given name located in <code>java.lang</code>.
																													
																													@param name name of the Class
																													@return the Class
																													"/>
																												</EAnnotation>
																												<EParameter name="name" type="EString"/>
																											</EOperation>
																											<EOperation name="getLibInterface" type="Interface">
																												<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																													<EStringToStringMapEntry key="body" value="if ( this .eResource ( ) == null ) { 
																													throw new java.lang.IllegalArgumentException ( "object context element  must have a resource" ) ; 
																													} 
																													sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier classClass = getConcreteClassifier ( "java.lang." + name ) ; 
																													return ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Interface ) org.eclipse.emf.ecore.util.EcoreUtil .resolve ( classClass , this ) ; 
																													"/>
																													<EStringToStringMapEntry key="documentation" value="
																													Finds the <code>sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Interface</code>
																													representing the interface with the given name located in <code>java.lang</code>.
																													
																													@param name name of the Interface
																													@return the Class
																													"/>
																												</EAnnotation>
																												<EParameter name="name" type="EString"/>
																											</EOperation>
																											<EOperation name="getClassClass" type="Class">
																												<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																													<EStringToStringMapEntry key="body" value="return getLibClass ( "Class" ) ; 
																													"/>
																													<EStringToStringMapEntry key="documentation" value="
																													Finds the <code>sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class</code>
																													representing <code>java.lang.Class</code>.
																													
																													@return the Class
																													"/>
																												</EAnnotation>
																											</EOperation>
																											<EOperation name="getObjectClass" type="Class">
																												<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																													<EStringToStringMapEntry key="body" value="return getLibClass ( "Object" ) ; 
																													"/>
																													<EStringToStringMapEntry key="documentation" value="
																													Finds the <code>sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class</code>
																													representing <code>java.lang.Object</code>.
																													
																													@return the Class
																													"/>
																												</EAnnotation>
																											</EOperation>
																											<EOperation name="getStringClass" type="Class">
																												<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																													<EStringToStringMapEntry key="body" value="return getLibClass ( "String" ) ; 
																													"/>
																													<EStringToStringMapEntry key="documentation" value="
																													Finds the <code>sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class</code>
																													representing <code>java.lang.String</code>.
																													
																													@return the Class
																													"/>
																												</EAnnotation>
																											</EOperation>
																											<EOperation name="getAnnotationInterface" type="Interface">
																												<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																													<EStringToStringMapEntry key="body" value="if ( this .eResource ( ) == null ) { 
																													throw new java.lang.IllegalArgumentException ( "object context element must have a resource" ) ; 
																													} 
																													sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Interface annotationClass = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Interface ) org.eclipse.emf.ecore.util.EcoreUtil .resolve ( getConcreteClassifier ( "java.lang.annotation.Annotation" ) , this ) ; 
																													return annotationClass ; 
																													"/>
																													<EStringToStringMapEntry key="documentation" value="
																													Finds the <code>sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Interface</code>
																													representing <code>java.lang.annotation.Annotation</code>.
																													
																													@return the Class
																													"/>
																												</EAnnotation>
																											</EOperation>
																											<EOperation name="getContainingAnnotationInstance" type="AnnotationInstance">
																												<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																													<EStringToStringMapEntry key="body" value="org.eclipse.emf.ecore.EObject value = this ; 
																													while ( ! ( value instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.annotations.AnnotationInstance ) && value != null ) { 
																													value = value .eContainer ( ) ; 
																													} 
																													return ( sg.edu.nus.comp.simTL.language.java.simTL4J.annotations.AnnotationInstance ) value ; 
																													"/>
																													<EStringToStringMapEntry key="documentation" value="
																													Finds the containing annotation instance for the given element.
																													
																													@param value
																													@return containing annotation instance
																													"/>
																												</EAnnotation>
																											</EOperation>
																											<EOperation name="getContainingAnonymousClass" type="AnonymousClass">
																												<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																													<EStringToStringMapEntry key="body" value="org.eclipse.emf.ecore.EObject value = this ; 
																													while ( //do not jump over other classifiers 
																													! ( value instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.AnonymousClass ) && ! ( value instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) && value != null ) { 
																													value = value .eContainer ( ) ; 
																													} 
																													if ( ! ( value instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.AnonymousClass ) ) { 
																													return null ; 
																													} 
																													return ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.AnonymousClass ) value ; 
																													"/>
																													<EStringToStringMapEntry key="documentation" value="
																													Finds the containing anonymous class for the given element.
																													
																													@param value
																													@return containing anonymous class 
																													"/>
																												</EAnnotation>
																											</EOperation>
																											<EOperation name="getContainingConcreteClassifier" type="ConcreteClassifier">
																												<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																													<EStringToStringMapEntry key="body" value="org.eclipse.emf.ecore.EObject value = this ; 
																													while ( ! ( value instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) && value != null ) { 
																													value = value .eContainer ( ) ; 
																													} 
																													return ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) value ; 
																													"/>
																													<EStringToStringMapEntry key="documentation" value="
																													Finds the containing classifier for the given element.
																													
																													@param value
																													@return containing classifier
																													"/>
																												</EAnnotation>
																											</EOperation>
																											<EOperation name="getContainingCompilationUnit" type="CompilationUnit">
																												<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																													<EStringToStringMapEntry key="body" value="org.eclipse.emf.ecore.EObject value = this ; 
																													while ( ! ( value instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.containers.CompilationUnit ) && value != null ) { 
																													value = value .eContainer ( ) ; 
																													} 
																													return ( sg.edu.nus.comp.simTL.language.java.simTL4J.containers.CompilationUnit ) value ; 
																													"/>
																													<EStringToStringMapEntry key="documentation" value="
																													Finds the containing compilation unit for the given element.
																													
																													@param value
																													@return containing compilation unit
																													"/>
																												</EAnnotation>
																											</EOperation>
																											<EOperation name="getContainingPackageName" upperBound="-1" type="EString">
																												<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																													<EStringToStringMapEntry key="body" value="sg.edu.nus.comp.simTL.language.java.simTL4J.containers.CompilationUnit cu = getContainingCompilationUnit ( ) ; 
																													if ( cu == null ) { 
																													return null ; 
																													} 
																													int idx = cu .getNamespaces ( ) .size ( ) ; 
																													if ( cu .getName ( ) != null ) { 
																													char [] fullName = cu .getName ( ) .toCharArray ( ) ; 
																													for ( int i = 0 ; i < fullName .length ; i ++ ) { 
																													if ( fullName [ i ] == '$' ) { 
																													idx -- ; 
																													} 
																													} 
																													} 
																													return new org.eclipse.emf.common.util.BasicEList < java.lang.String > ( cu .getNamespaces ( ) .subList ( 0 , idx ) ) ; 
																														"/>
																														<EStringToStringMapEntry key="documentation" value=""/>
																													</EAnnotation>
																												</EOperation>
																												<EOperation name="getParentConcreteClassifier" type="ConcreteClassifier">
																													<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																														<EStringToStringMapEntry key="body" value="sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier classifier = getContainingConcreteClassifier ( ) ; 
																														if ( classifier == null ) { 
																														sg.edu.nus.comp.simTL.language.java.simTL4J.containers.CompilationUnit cu = getContainingCompilationUnit ( ) ; 
																														//maybe the outer classifier is in an extra cu
																														classifier = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) org.eclipse.emf.ecore.util.EcoreUtil .resolve ( getConcreteClassifier ( cu .getNamespacesAsString ( ) ) , this ) ; 
																														if ( classifier .eIsProxy ( ) ) { 
																														classifier = null ; 
																														} 
																														} 
																														return classifier ; 
																														"/>
																														<EStringToStringMapEntry key="documentation" value="
																														Finds the classifier that is the parent of this element. If 
																														this element is an inner classifier the parent classifier does
																														not necessarily contain this element, since it can reside in 
																														a different compilation unit when stored in byte code.
																														
																														@param value
																														@return containing classifier
																														"/>
																													</EAnnotation>
																												</EOperation>
																												<attr name="comments" unique="false" upperBound="-1" type="//EString"/>
																											</class>
																											<class name="NamedElement" abstract="true">
																												<attr name="name" type="//EString"/>
																												<ref name="name_PH" containment="true" type="TPlaceholder">
																													<EAnnotation source="xframes"/>
																												</ref>
																											</class>
																											<class name="NamespaceAwareElement" abstract="true">
																												<EOperation name="getNamespacesAsString" type="EString">
																													<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																														<EStringToStringMapEntry key="body" value="java.lang.String containerName = "" ; 
																														for ( java.util.Iterator < java.lang.String > it = getNamespaces ( ) .iterator ( ) ; it .hasNext ( ) ; ) { 
																															java.lang.String namespaceFragment = it .next ( ) ; 
																															//does it point at a classifier or a package as container?
																															java.lang.String assumedPackageName = containerName + namespaceFragment + sg.edu.nus.comp.simTL.language.java.simTL4J.JavaUniquePathConstructor .PACKAGE_SEPARATOR ; 
																															java.lang.String assumedClassifierName = containerName + namespaceFragment + sg.edu.nus.comp.simTL.language.java.simTL4J.JavaUniquePathConstructor .CLASSIFIER_SEPARATOR ; 
																															if ( it .hasNext ( ) ) { 
																															if ( sg.edu.nus.comp.simTL.language.java.simTL4J.JavaClasspath .get ( this ) .existsPackage ( assumedClassifierName ) ) { 
																															containerName = assumedClassifierName ; 
																															} else { 
																															//assume package
																															containerName = assumedPackageName ; 
																															} 
																															} else { 
																															if ( sg.edu.nus.comp.simTL.language.java.simTL4J.JavaClasspath .get ( this ) .existsPackage ( assumedPackageName ) ) { 
																															//a package is always available as key
																															containerName = assumedPackageName ; 
																															} else { 
																															//assume classifier that is not key, but value in the map
																															containerName = assumedClassifierName ; 
																															} 
																															} 
																															} 
																															return containerName ; 
																															"/>
																															<EStringToStringMapEntry key="documentation" value="
																															Converts the namespaces array of the given namespace aware element into
																															a String representation using package (.) and class ($) delimiters. The method
																															uses the classpath to determine for each element of the namespace if it 
																															identifies a package or a class.
																															
																															@param naElement
																															@return single string representation of namespace
																															"/>
																														</EAnnotation>
																													</EOperation>
																													<EOperation name="getClassifierAtNamespaces" type="ConcreteClassifier">
																														<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																															<EStringToStringMapEntry key="body" value="java.lang.String fullQualifiedName = getNamespacesAsString ( ) ; 
																															if ( fullQualifiedName == null || fullQualifiedName .endsWith ( sg.edu.nus.comp.simTL.language.java.simTL4J.JavaUniquePathConstructor .PACKAGE_SEPARATOR ) ) { 
																															return null ; 
																															} 
																															//cut the trailing separator
																															fullQualifiedName = fullQualifiedName .substring ( 0 , fullQualifiedName .length ( ) - 1 ) ; 
																															return ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) org.eclipse.emf.ecore.util.EcoreUtil .resolve ( getConcreteClassifier ( fullQualifiedName ) , this ) ; 
																															"/>
																															<EStringToStringMapEntry key="documentation" value="
																															Assuming the namespace
																															identifies a classifier, that classifier is returned.
																															
																															@return classifier at namespace
																															"/>
																														</EAnnotation>
																													</EOperation>
																													<attr name="namespaces" unique="false" upperBound="-1" type="//EString"/>
																												</class>
																											</package>
																											<package name="containers" nsURI="http://www.emftext.org/simTL4J/containers" nsPrefix="containers">
																												<class name="JavaRoot" abstract="true">
																													<EOperation name="getClassifiersInSamePackage" upperBound="-1" type="ConcreteClassifier">
																														<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																															<EStringToStringMapEntry key="body" value="org.eclipse.emf.common.util.EList < sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > defaultImportList = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList < sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > ( ) ; 
																																	java.lang.String packageName = getNamespacesAsString ( ) ; 
																																	defaultImportList .addAll ( getConcreteClassifiers ( packageName , "*" ) ) ; 
																																	return defaultImportList ; 
																																	"/>
																																	<EStringToStringMapEntry key="documentation" value="
																																	@return all classes in the same package imports
																																	"/>
																																</EAnnotation>
																															</EOperation>
																														</class>
																														<class name="CompilationUnit">
																															<EOperation name="getContainedClassifier" type="ConcreteClassifier">
																																<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																	<EStringToStringMapEntry key="body" value="if ( name == null ) { 
																																	return null ; 
																																	} 
																																	for ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier candidate : getClassifiers ( ) ) { 
																																	if ( name .equals ( candidate .getName ( ) ) ) { 
																																	return candidate ; 
																																	} 
																																	} 
																																	return null ; 
																																	"/>
																																	<EStringToStringMapEntry key="documentation" value="
																																	@param name name of the contained Classifier
																																	@return the Classifier
																																	"/>
																																</EAnnotation>
																																<EParameter name="name" type="EString"/>
																															</EOperation>
																															<EOperation name="getClassifiersInSamePackage" upperBound="-1" type="ConcreteClassifier">
																																<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																	<EStringToStringMapEntry key="body" value="org.eclipse.emf.common.util.EList < sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > defaultImportList = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList < sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > ( ) ; 
																																			java.lang.String packageName = getNamespacesAsString ( ) ; 
																																			//locally defined in this container
																																			defaultImportList .addAll ( getClassifiers ( ) ) ; 
																																			defaultImportList .addAll ( getConcreteClassifiers ( packageName , "*" ) ) ; 
																																			return defaultImportList ; 
																																			"/>
																																			<EStringToStringMapEntry key="documentation" value="
																																			@return all classes in the same package imports
																																			"/>
																																		</EAnnotation>
																																	</EOperation>
																																	<ref name="classifiers" upperBound="-1" containment="true" type="ConcreteClassifier"/>
																																</class>
																																<class name="Package">
																																	<ref name="compilationUnits" upperBound="-1" containment="true" type="CompilationUnit"/>
																																	<ref name="subpackages" upperBound="-1" containment="true" type="Package"/>
																																</class>
																																<class name="EmptyModel"/>
																															</package>
																															<package name="expressions" nsURI="http://www.emftext.org/simTL4J/expressions" nsPrefix="expressions">
																																<class name="ExpressionList">
																																	<ref name="expressions" upperBound="-1" containment="true" type="Expression"/>
																																</class>
																																<class name="Expression" abstract="true">
																																	<EOperation name="getType" type="Type">
																																		<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																			<EStringToStringMapEntry key="body" value="return getOneType ( false ) ; 
																																			"/>
																																			<EStringToStringMapEntry key="documentation" value="
																																			Returns the type of the expression considering all concrete
																																			subtypes of Expression.
																																			
																																			@return type of expression
																																			"/>
																																		</EAnnotation>
																																	</EOperation>
																																	<EOperation name="getAlternativeType" type="Type">
																																		<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																			<EStringToStringMapEntry key="body" value="return getOneType ( true ) ; 
																																			"/>
																																			<EStringToStringMapEntry key="documentation" value=""/>
																																		</EAnnotation>
																																	</EOperation>
																																	<EOperation name="getOneType" type="Type">
																																		<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																			<EStringToStringMapEntry key="body" value="sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class stringClass = getStringClass ( ) ; 
																																			sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type type = null ; 
																																			if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) { 
																																			sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference reference = ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) this ; 
																																			//navigate down references
																																			while ( reference .getNext ( ) != null ) { 
																																			reference = reference .getNext ( ) ; 
																																			} 
																																			type = reference .getReferencedType ( ) ; 
																																			} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.literals.Literal ) { 
																																			type = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.literals.Literal ) this ) .getType ( ) ; 
																																			} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.CastExpression ) { 
																																			type = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.CastExpression ) this ) .getTypeReference ( ) .getTarget ( ) ; 
																																			} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.AssignmentExpression ) { 
																																			type = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.AssignmentExpression ) this ) .getChild ( ) .getOneType ( alternative ) ; 
																																			} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.ConditionalExpression && ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.ConditionalExpression ) this ) .getExpressionIf ( ) != null ) { 
																																			if ( alternative ) { 
																																			type = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.ConditionalExpression ) this ) .getExpressionElse ( ) .getOneType ( alternative ) ; 
																																			} else { 
																																			type = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.ConditionalExpression ) this ) .getExpressionIf ( ) .getOneType ( alternative ) ; 
																																			} 
																																			} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.EqualityExpression || this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.RelationExpression || this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.ConditionalOrExpression || this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.ConditionalAndExpression || this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.InstanceOfExpression ) { 
																																			type = getLibClass ( "Boolean" ) ; 
																																			} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.AdditiveExpression || this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.MultiplicativeExpression || this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.InclusiveOrExpression || this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.ExclusiveOrExpression || this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.AndExpression || this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.ShiftExpression ) { 
																																			if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.AdditiveExpression ) { 
																																			sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.AdditiveExpression additiveExpression = ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.AdditiveExpression ) this ; 
																																			for ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.Expression subExp : additiveExpression .getChildren ( ) ) { 
																																			if ( stringClass .equals ( subExp .getOneType ( alternative ) ) ) { 
																																			//special case: string concatenation
																																			return stringClass ; 
																																			} 
																																			} 
																																			} 
																																			@ SuppressWarnings ( "unchecked" ) sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.Expression subExp = ( ( org.eclipse.emf.common.util.EList < sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.Expression > ) this .eGet ( this .eClass ( ) .getEStructuralFeature ( "children" ) ) ) .get ( 0 ) ; 
																																				return subExp .getOneType ( alternative ) ; 
																																				} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.UnaryExpression ) { 
																																				sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.Expression subExp = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.UnaryExpression ) this ) .getChild ( ) ; 
																																				return subExp .getOneType ( alternative ) ; 
																																				} else for ( org.eclipse.emf.common.util.TreeIterator < org.eclipse.emf.ecore.EObject > i = this .eAllContents ( ) ; i .hasNext ( ) ; ) { 
																																					org.eclipse.emf.ecore.EObject next = i .next ( ) ; 
																																					sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type nextType = null ; 
																																					if ( next instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.PrimaryExpression ) { 
																																					if ( next instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) { 
																																					sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ref = ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) next ; 
																																					//navigate down references
																																					while ( ref .getNext ( ) != null ) { 
																																					ref = ref .getNext ( ) ; 
																																					} 
																																					next = ref ; 
																																					} 
																																					if ( next instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.literals.Literal ) { 
																																					nextType = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.literals.Literal ) next ) .getType ( ) ; 
																																					} else if ( next instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.CastExpression ) { 
																																					nextType = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.CastExpression ) next ) .getTypeReference ( ) .getTarget ( ) ; 
																																					} else { 
																																					nextType = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) next ) .getReferencedType ( ) ; 
																																					} 
																																					i .prune ( ) ; 
																																					} 
																																					if ( nextType != null ) { 
																																					type = nextType ; 
																																					//in the special case that this is an expression with
																																					//some string included, everything is converted to string
																																					if ( stringClass .equals ( type ) ) { 
																																					break ; 
																																					} 
																																					} 
																																					} 
																																					//type can be null in cases of unresolved/unresolvable proxies
																																					return type ; 
																																					"/>
																																					<EStringToStringMapEntry key="documentation" value=""/>
																																				</EAnnotation>
																																				<EParameter name="alternative" type="EBoolean"/>
																																			</EOperation>
																																			<EOperation name="getArrayDimension" type="ELong">
																																				<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																					<EStringToStringMapEntry key="body" value="long size = 0 ; 
																																					sg.edu.nus.comp.simTL.language.java.simTL4J.arrays.ArrayTypeable arrayType = null ; 
																																					if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.NestedExpression && ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.NestedExpression ) this ) .getNext ( ) == null ) { 
																																					return ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.NestedExpression ) this ) .getExpression ( ) .getArrayDimension ( ) - ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.NestedExpression ) this ) .getArraySelectors ( ) .size ( ) ; 
																																					} 
																																					if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.ConditionalExpression && ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.ConditionalExpression ) this ) .getExpressionIf ( ) != null ) { 
																																					return ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.ConditionalExpression ) this ) .getExpressionIf ( ) .getArrayDimension ( ) ; 
																																					} 
																																					if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.AssignmentExpression ) { 
																																					return ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.AssignmentExpression ) this ) .getValue ( ) .getArrayDimension ( ) ; 
																																					} 
																																					if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.InstanceOfExpression ) { 
																																					return 0 ; 
																																					} 
																																					if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) { 
																																					sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference reference = ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) this ; 
																																					while ( reference .getNext ( ) != null ) { 
																																					reference = reference .getNext ( ) ; 
																																					} 
																																					//an array clone? -> dimension defined by cloned array
																																						if ( reference instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.ElementReference && reference .getPrevious ( ) != null ) { 
																																						sg.edu.nus.comp.simTL.language.java.simTL4J.references.ReferenceableElement target = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.ElementReference ) reference ) .getTarget ( ) ; 
																																						if ( target instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.members.Method ) { 
																																						if ( "clone" .equals ( ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.members.Method ) target ) .getName ( ) ) ) { 
																																						reference = ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) reference .eContainer ( ) ; 
																																						} 
																																						} 
																																						} 
																																						if ( reference instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.ElementReference ) { 
																																						sg.edu.nus.comp.simTL.language.java.simTL4J.references.ElementReference elementReference = ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.ElementReference ) reference ; 
																																						if ( elementReference .getTarget ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.arrays.ArrayTypeable ) { 
																																						arrayType = ( sg.edu.nus.comp.simTL.language.java.simTL4J.arrays.ArrayTypeable ) elementReference .getTarget ( ) ; 
																																						} 
																																						if ( elementReference .getTarget ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.variables.AdditionalLocalVariable ) { 
																																						sg.edu.nus.comp.simTL.language.java.simTL4J.variables.AdditionalLocalVariable additionalLocalVariable = ( sg.edu.nus.comp.simTL.language.java.simTL4J.variables.AdditionalLocalVariable ) elementReference .getTarget ( ) ; 
																																						arrayType = ( sg.edu.nus.comp.simTL.language.java.simTL4J.variables.LocalVariable ) additionalLocalVariable .eContainer ( ) ; 
																																						size += additionalLocalVariable .getArrayDimensionsAfter ( ) .size ( ) ; 
																																						size -= arrayType .getArrayDimensionsAfter ( ) .size ( ) ; 
																																						} 
																																						if ( elementReference .getTarget ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.members.AdditionalField ) { 
																																						sg.edu.nus.comp.simTL.language.java.simTL4J.members.AdditionalField additionalField = ( sg.edu.nus.comp.simTL.language.java.simTL4J.members.AdditionalField ) elementReference .getTarget ( ) ; 
																																						arrayType = ( sg.edu.nus.comp.simTL.language.java.simTL4J.members.Field ) additionalField .eContainer ( ) ; 
																																						size += additionalField .getArrayDimensionsAfter ( ) .size ( ) ; 
																																						size -= arrayType .getArrayDimensionsAfter ( ) .size ( ) ; 
																																						} 
																																						} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.arrays.ArrayTypeable ) { 
																																						size += ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.arrays.ArrayTypeable ) this ) .getArrayDimensionsBefore ( ) .size ( ) + ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.arrays.ArrayTypeable ) this ) .getArrayDimensionsAfter ( ) .size ( ) ; 
																																						if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.parameters.VariableLengthParameter ) { 
																																						size ++ ; 
																																						} 
																																						} 
																																						size -= reference .getArraySelectors ( ) .size ( ) ; 
																																						} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.arrays.ArrayTypeable ) { 
																																						size += ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.arrays.ArrayTypeable ) this ) .getArrayDimensionsBefore ( ) .size ( ) + ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.arrays.ArrayTypeable ) this ) .getArrayDimensionsAfter ( ) .size ( ) ; 
																																						if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.parameters.VariableLengthParameter ) { 
																																						size ++ ; 
																																						} 
																																						} 
																																						if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.arrays.ArrayInstantiationBySize ) { 
																																						size += ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.arrays.ArrayInstantiationBySize ) this ) .getSizes ( ) .size ( ) ; 
																																						} 
																																						if ( arrayType != null ) { 
																																						size += arrayType .getArrayDimension ( ) ; 
																																						} 
																																						return size ; 
																																						"/>
																																						<EStringToStringMapEntry key="documentation" value=""/>
																																					</EAnnotation>
																																				</EOperation>
																																			</class>
																																			<class name="AssignmentExpression">
																																				<ref name="child" lowerBound="1" containment="true" type="AssignmentExpressionChild"/>
																																				<ref name="assignmentOperator" lowerBound="1" containment="true" type="AssignmentOperator"/>
																																				<ref name="value" lowerBound="1" containment="true" type="Expression"/>
																																			</class>
																																			<class name="AssignmentExpressionChild" abstract="true"/>
																																			<class name="ConditionalExpression">
																																				<ref name="child" containment="true" type="ConditionalExpressionChild"/>
																																				<ref name="expressionIf" lowerBound="1" containment="true" type="Expression"/>
																																				<ref name="expressionElse" lowerBound="1" containment="true" type="AssignmentExpressionChild"/>
																																			</class>
																																			<class name="ConditionalExpressionChild" abstract="true"/>
																																			<class name="ConditionalOrExpression">
																																				<ref name="children" lowerBound="1" upperBound="-1" containment="true" type="ConditionalOrExpressionChild"/>
																																			</class>
																																			<class name="ConditionalOrExpressionChild" abstract="true"/>
																																			<class name="ConditionalAndExpression">
																																				<ref name="children" lowerBound="1" upperBound="-1" containment="true" type="ConditionalAndExpressionChild"/>
																																			</class>
																																			<class name="ConditionalAndExpressionChild" abstract="true"/>
																																			<class name="InclusiveOrExpression">
																																				<ref name="children" lowerBound="1" upperBound="-1" containment="true" type="InclusiveOrExpressionChild"/>
																																			</class>
																																			<class name="InclusiveOrExpressionChild" abstract="true"/>
																																			<class name="ExclusiveOrExpression">
																																				<ref name="children" lowerBound="1" upperBound="-1" containment="true" type="ExclusiveOrExpressionChild"/>
																																			</class>
																																			<class name="ExclusiveOrExpressionChild" abstract="true"/>
																																			<class name="AndExpression">
																																				<ref name="children" lowerBound="1" upperBound="-1" containment="true" type="AndExpressionChild"/>
																																			</class>
																																			<class name="AndExpressionChild" abstract="true"/>
																																			<class name="EqualityExpression">
																																				<ref name="equalityOperators" lowerBound="1" upperBound="-1" containment="true" type="EqualityOperator"/>
																																				<ref name="children" lowerBound="1" upperBound="-1" containment="true" type="EqualityExpressionChild"/>
																																			</class>
																																			<class name="EqualityExpressionChild" abstract="true"/>
																																			<class name="InstanceOfExpression">
																																				<ref name="child" lowerBound="1" containment="true" type="InstanceOfExpressionChild"/>
																																			</class>
																																			<class name="InstanceOfExpressionChild" abstract="true"/>
																																			<class name="RelationExpression">
																																				<ref name="children" lowerBound="1" upperBound="-1" containment="true" type="RelationExpressionChild"/>
																																				<ref name="relationOperators" lowerBound="1" upperBound="-1" containment="true" type="RelationOperator"/>
																																			</class>
																																			<class name="RelationExpressionChild" abstract="true"/>
																																			<class name="ShiftExpression">
																																				<ref name="children" lowerBound="1" upperBound="-1" containment="true" type="ShiftExpressionChild"/>
																																				<ref name="shiftOperators" lowerBound="1" upperBound="-1" containment="true" type="ShiftOperator"/>
																																			</class>
																																			<class name="ShiftExpressionChild" abstract="true"/>
																																			<class name="AdditiveExpression">
																																				<ref name="children" lowerBound="1" upperBound="-1" containment="true" type="AdditiveExpressionChild"/>
																																				<ref name="additiveOperators" lowerBound="1" upperBound="-1" containment="true" type="AdditiveOperator"/>
																																			</class>
																																			<class name="AdditiveExpressionChild" abstract="true"/>
																																			<class name="MultiplicativeExpression">
																																				<ref name="children" lowerBound="1" upperBound="-1" containment="true" type="MultiplicativeExpressionChild"/>
																																				<ref name="multiplicativeOperators" lowerBound="1" upperBound="-1" containment="true" type="MultiplicativeOperator"/>
																																			</class>
																																			<class name="MultiplicativeExpressionChild" abstract="true"/>
																																			<class name="UnaryExpression">
																																				<ref name="operators" lowerBound="1" upperBound="-1" containment="true" type="UnaryOperator"/>
																																				<ref name="child" lowerBound="1" containment="true" type="UnaryExpressionChild"/>
																																			</class>
																																			<class name="UnaryExpressionChild" abstract="true"/>
																																			<class name="UnaryModificationExpression" abstract="true">
																																				<ref name="child" lowerBound="1" containment="true" type="UnaryModificationExpressionChild"/>
																																				<ref name="operator" lowerBound="1" containment="true" type="UnaryModificationOperator"/>
																																			</class>
																																			<class name="PrefixUnaryModificationExpression"/>
																																			<class name="SuffixUnaryModificationExpression"/>
																																			<class name="UnaryModificationExpressionChild" abstract="true"/>
																																			<class name="CastExpression">
																																				<ref name="child" lowerBound="1" containment="true" type="MultiplicativeExpressionChild"/>
																																			</class>
																																			<class name="PrimaryExpression" abstract="true"/>
																																			<class name="NestedExpression">
																																				<ref name="expression" lowerBound="1" containment="true" type="Expression"/>
																																			</class>
																																		</package>
																																		<package name="generics" nsURI="http://www.emftext.org/simTL4J/generics" nsPrefix="generics">
																																			<class name="TypeArgument" abstract="true"/>
																																			<class name="TypeArgumentable" abstract="true">
																																				<ref name="typeArguments" upperBound="-1" containment="true" type="TypeArgument"/>
																																			</class>
																																			<class name="CallTypeArgumentable" abstract="true">
																																				<ref name="callTypeArguments" upperBound="-1" containment="true" type="TypeArgument"/>
																																			</class>
																																			<class name="TypeParametrizable" abstract="true">
																																				<ref name="typeParameters" upperBound="-1" containment="true" type="TypeParameter"/>
																																			</class>
																																			<class name="ExtendsTypeArgument">
																																				<ref name="extendTypes" lowerBound="1" upperBound="-1" containment="true" type="TypeReference"/>
																																			</class>
																																			<class name="QualifiedTypeArgument"/>
																																			<class name="SuperTypeArgument">
																																				<ref name="superType" lowerBound="1" containment="true" type="TypeReference"/>
																																			</class>
																																			<class name="TypeParameter">
																																				<EOperation name="getAllSuperClassifiers" upperBound="-1" type="ConcreteClassifier">
																																					<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																						<EStringToStringMapEntry key="body" value="org.eclipse.emf.common.util.EList < sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > result = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList < sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > ( ) ; 
																																								for ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypeReference typeRef : getExtendTypes ( ) ) { 
																																								sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type type = typeRef .getTarget ( ) ; 
																																								if ( type instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) { 
																																								result .add ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) type ) ; 
																																								} 
																																								if ( type instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Classifier ) { 
																																								result .addAll ( ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Classifier ) type ) .getAllSuperClassifiers ( ) ) ; 
																																								} 
																																								} 
																																								return result ; 
																																								"/>
																																								<EStringToStringMapEntry key="documentation" value="
																																								@return all type restrictions
																																								"/>
																																							</EAnnotation>
																																						</EOperation>
																																						<EOperation name="getAllMembers" upperBound="-1" type="Member">
																																							<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																								<EStringToStringMapEntry key="body" value="org.eclipse.emf.common.util.EList < sg.edu.nus.comp.simTL.language.java.simTL4J.members.Member > memberList = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList < sg.edu.nus.comp.simTL.language.java.simTL4J.members.Member > ( ) ; 
																																										sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList < sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type > possiblyVisibleSuperClassifier = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList < sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type > ( ) ; 
																																												for ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypeReference typeReference : ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeParameter ) this ) .getExtendTypes ( ) ) { 
																																												possiblyVisibleSuperClassifier .add ( typeReference .getTarget ( ) ) ; 
																																												} 
																																												for ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier superClassifier : getAllSuperClassifiers ( ) ) { 
																																												for ( sg.edu.nus.comp.simTL.language.java.simTL4J.members.Member member : superClassifier .getMembers ( ) ) { 
																																												if ( member instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.modifiers.AnnotableAndModifiable ) { 
																																												sg.edu.nus.comp.simTL.language.java.simTL4J.modifiers.AnnotableAndModifiable modifiable = ( sg.edu.nus.comp.simTL.language.java.simTL4J.modifiers.AnnotableAndModifiable ) member ; 
																																												if ( ! modifiable .isHidden ( context ) ) { 
																																												memberList .add ( member ) ; 
																																												} else if ( possiblyVisibleSuperClassifier .contains ( superClassifier ) ) { 
																																												memberList .add ( member ) ; 
																																												} 
																																												} else { 
																																												memberList .add ( member ) ; 
																																												} 
																																												} 
																																												memberList .addAll ( superClassifier .getDefaultMembers ( ) ) ; 
																																												} 
																																												return memberList ; 
																																												"/>
																																												<EStringToStringMapEntry key="documentation" value="
																																												Returns all members of the given classifier including inner classes and 
																																												all members of super types (extended classes and implemented interfaces).
																																												
																																												@param context to check protected visibility
																																												@return member list
																																												"/>
																																											</EAnnotation>
																																											<EParameter name="context" type="Commentable"/>
																																										</EOperation>
																																										<EOperation name="getBoundType" type="Type">
																																											<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																												<EStringToStringMapEntry key="body" value="org.eclipse.emf.common.util.EList < sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type > resultList = new org.eclipse.emf.common.util.BasicEList < sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type > ( ) ; 
																																														sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeParametrizable typeParameterDeclarator = ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeParametrizable ) this .eContainer ( ) ; 
																																														sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference parentReference = null ; 
																																														org.eclipse.emf.common.util.EList < sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type > prevTypeList = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList < sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type > ( ) ; 
																																																if ( reference != null && reference .getPrevious ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.NestedExpression ) { 
																																																sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.NestedExpression nestedExpression = ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.NestedExpression ) reference .getPrevious ( ) ; 
																																																sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.Expression expression = null ; 
																																																if ( nestedExpression .getExpression ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) { 
																																																expression = nestedExpression .getExpression ( ) ; 
																																																} else if ( nestedExpression .getExpression ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.ConditionalExpression ) { 
																																																expression = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.ConditionalExpression ) nestedExpression .getExpression ( ) ) .getExpressionIf ( ) ; 
																																																} 
																																																if ( expression instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) { 
																																																sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference expressionReference = ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) expression ; 
																																																//navigate down references
																																																while ( expressionReference .getNext ( ) != null ) { 
																																																expressionReference = expressionReference .getNext ( ) ; 
																																																} 
																																																parentReference = expressionReference ; 
																																																sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type prevType = nestedExpression .getExpression ( ) .getType ( ) ; 
																																																if ( prevType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.util.TemporalCompositeClassifier ) { 
																																																for ( org.eclipse.emf.ecore.EObject aType : ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.util.TemporalCompositeClassifier ) prevType ) .getSuperTypes ( ) ) { 
																																																prevTypeList .add ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type ) aType ) ; 
																																																} 
																																																} else { 
																																																prevTypeList .add ( prevType ) ; 
																																																} 
																																																} else if ( nestedExpression .getExpression ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.CastExpression ) { 
																																																prevTypeList .add ( ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.CastExpression ) nestedExpression .getExpression ( ) ) .getTypeReference ( ) .getTarget ( ) ) ; 
																																																} 
																																																} else if ( reference != null && reference .getPrevious ( ) != null ) { 
																																																parentReference = reference .getPrevious ( ) ; 
																																																while ( parentReference instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.SelfReference ) { 
																																																if ( ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.SelfReference ) parentReference ) .getSelf ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.literals.Super ) { 
																																																if ( parentReference .eContainer ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) { 
																																																parentReference = ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) parentReference .eContainer ( ) ; 
																																																} else { 
																																																sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier containingClassifier = reference .getContainingConcreteClassifier ( ) ; 
																																																if ( containingClassifier != null ) { 
																																																prevTypeList .add ( containingClassifier ) ; 
																																																} 
																																																parentReference = null ; 
																																																} 
																																																} else { 
																																																break ; 
																																																} 
																																																} 
																																																if ( parentReference != null ) { 
																																																sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type prevType = parentReference .getReferencedType ( ) ; 
																																																if ( prevType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.util.TemporalCompositeClassifier ) { 
																																																for ( org.eclipse.emf.ecore.EObject aType : ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.util.TemporalCompositeClassifier ) prevType ) .getSuperTypes ( ) ) { 
																																																prevTypeList .add ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type ) aType ) ; 
																																																} 
																																																} else { 
																																																prevTypeList .add ( prevType ) ; 
																																																} 
																																																} 
																																																} else if ( reference != null ) { 
																																																//prev type is on of the containing classes which can still bind by inheritance
																																																sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier containingClassifier = reference .getContainingConcreteClassifier ( ) ; 
																																																while ( containingClassifier != null ) { 
																																																prevTypeList .add ( containingClassifier ) ; 
																																																containingClassifier = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.commons.Commentable ) containingClassifier .eContainer ( ) ) .getContainingConcreteClassifier ( ) ; 
																																																} 
																																																} 
																																																for ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type prevType : prevTypeList ) { 
																																																int typeParameterIndex = - 1 ; 
																																																if ( typeParameterDeclarator instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) { 
																																																typeParameterIndex = typeParameterDeclarator .getTypeParameters ( ) .indexOf ( this ) ; 
																																																if ( reference != null ) { 
																																																sg.edu.nus.comp.simTL.language.java.simTL4J.types.ClassifierReference classifierReference = null ; 
																																																if ( parentReference instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.ElementReference ) { 
																																																sg.edu.nus.comp.simTL.language.java.simTL4J.references.ReferenceableElement prevReferenced = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.ElementReference ) parentReference ) .getTarget ( ) ; 
																																																if ( prevReferenced instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypedElement ) { 
																																																sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypeReference prevTypeReference = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypedElement ) prevReferenced ) .getTypeReference ( ) ; 
																																																if ( prevTypeReference != null ) { 
																																																classifierReference = prevTypeReference .getPureClassifierReference ( ) ; 
																																																} 
																																																} 
																																																} 
																																																if ( parentReference instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypedElement ) { 
																																																//e.g. New Constructor Call
																																																sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypeReference prevParentReference = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypedElement ) parentReference ) .getTypeReference ( ) ; 
																																																if ( prevParentReference != null ) { 
																																																classifierReference = prevParentReference .getPureClassifierReference ( ) ; 
																																																} 
																																																} 
																																																if ( prevType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) { 
																																																//bound through inheritance?
																																																int idx = 0 ; 
																																																for ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.ClassifierReference superClassifierReference : ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) prevType ) .getSuperTypeReferences ( ) ) { 
																																																if ( typeParameterIndex < superClassifierReference .getTypeArguments ( ) .size ( ) ) { 
																																																//is this an argument for the correct class?
																																																if ( typeParameterDeclarator .equals ( superClassifierReference .getTarget ( ) ) || ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Classifier ) superClassifierReference .getTarget ( ) ) .getAllSuperClassifiers ( ) .contains ( typeParameterDeclarator ) ) { 
																																																sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeArgument arg = superClassifierReference .getTypeArguments ( ) .get ( typeParameterIndex ) ; 
																																																if ( arg instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.generics.QualifiedTypeArgument ) { 
																																																resultList .add ( idx , ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.QualifiedTypeArgument ) arg ) .getTypeReference ( ) .getTarget ( ) ) ; 
																																																idx ++ ; 
																																																} 
																																																} 
																																																} 
																																																} 
																																																org.eclipse.emf.common.util.EList < sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeArgument > typeArgumentList ; 
																																																	sg.edu.nus.comp.simTL.language.java.simTL4J.util.TemporalTypeArgumentHolder ttah = null ; 
																																																	for ( org.eclipse.emf.common.notify.Adapter adapter : prevType .eAdapters ( ) ) { 
																																																	if ( adapter instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.util.TemporalTypeArgumentHolder ) { 
																																																	ttah = ( sg.edu.nus.comp.simTL.language.java.simTL4J.util.TemporalTypeArgumentHolder ) adapter ; 
																																																	prevType .eAdapters ( ) .remove ( ttah ) ; 
																																																	break ; 
																																																	} 
																																																	} 
																																																	if ( ttah != null ) { 
																																																	typeArgumentList = ttah .getTypeArguments ( ) ; 
																																																	} else if ( classifierReference != null ) { 
																																																	typeArgumentList = classifierReference .getTypeArguments ( ) ; 
																																																	} else { 
																																																	typeArgumentList = org.eclipse.emf.common.util.ECollections .emptyEList ( ) ; 
																																																	} 
																																																	if ( typeParameterIndex < typeArgumentList .size ( ) ) { 
																																																	sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeArgument arg = typeArgumentList .get ( typeParameterIndex ) ; 
																																																	if ( arg instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.generics.QualifiedTypeArgument ) { 
																																																	sg.edu.nus.comp.simTL.language.java.simTL4J.types.ClassifierReference theTypeRef = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.QualifiedTypeArgument ) arg ) .getTypeReference ( ) .getPureClassifierReference ( ) ; 
																																																	if ( theTypeRef != null ) { 
																																																	sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type theType = theTypeRef .getBoundTarget ( parentReference ) ; 
																																																	if ( theType != null ) { 
																																																	if ( ! theTypeRef .getTypeArguments ( ) .isEmpty ( ) ) { 
																																																	ttah = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.TemporalTypeArgumentHolder ( ) ; 
																																																	ttah .getTypeArguments ( ) .addAll ( theTypeRef .getTypeArguments ( ) ) ; 
																																																	theType .eAdapters ( ) .add ( ttah ) ; 
																																																	} 
																																																	resultList .add ( 0 , theType ) ; 
																																																	} 
																																																	} 
																																																	} 
																																																	if ( arg instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.generics.ExtendsTypeArgument ) { 
																																																	for ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypeReference extendedType : ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.ExtendsTypeArgument ) arg ) .getExtendTypes ( ) ) { 
																																																	resultList .add ( 0 , extendedType .getBoundTarget ( parentReference ) ) ; 
																																																	} 
																																																	} 
																																																	} 
																																																	} else if ( prevType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeParameter ) { 
																																																	//the prev. type parameter, although unbound, may contain type restrictions through extends 
																																																	resultList .add ( prevType ) ; 
																																																	for ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypeReference extendedRef : ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeParameter ) prevType ) .getExtendTypes ( ) ) { 
																																																	sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier extended = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) extendedRef .getTarget ( ) ; 
																																																	int idx = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeParametrizable ) prevType .eContainer ( ) ) .getTypeParameters ( ) .indexOf ( prevType ) ; 
																																																	if ( extended .getTypeParameters ( ) .size ( ) > idx ) { 
																																																		//also add more precise bindings from extensions
																																																		resultList .add ( extended .getTypeParameters ( ) .get ( idx ) ) ; 
																																																		} 
																																																		} 
																																																		} 
																																																		} 
																																																		if ( reference != null && reference .eContainer ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.ReflectiveClassReference ) { 
																																																		if ( reference .eContainer ( ) .eContainer ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) { 
																																																		//the ".class" instantiation implicitly binds the T parameter of java.lang.Class to the class itself
																																																		resultList .add ( 0 , ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) reference .eContainer ( ) .eContainer ( ) ) .getReferencedType ( ) ) ; 
																																																		} 
																																																		} 
																																																		} 
																																																		} 
																																																		if ( typeParameterDeclarator instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.members.Method ) { 
																																																		if ( reference instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.MethodCall ) { 
																																																		sg.edu.nus.comp.simTL.language.java.simTL4J.members.Method method = ( sg.edu.nus.comp.simTL.language.java.simTL4J.members.Method ) typeParameterDeclarator ; 
																																																		sg.edu.nus.comp.simTL.language.java.simTL4J.references.MethodCall methodCall = ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.MethodCall ) reference ; 
																																																		if ( method .getTypeParameters ( ) .size ( ) == methodCall .getCallTypeArguments ( ) .size ( ) ) { 
																																																		sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeArgument typeArgument = methodCall .getCallTypeArguments ( ) .get ( method .getTypeParameters ( ) .indexOf ( this ) ) ; 
																																																		if ( typeArgument instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.generics.QualifiedTypeArgument ) { 
																																																		resultList .add ( 0 , ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.QualifiedTypeArgument ) typeArgument ) .getTypeReference ( ) .getBoundTarget ( parentReference ) ) ; 
																																																		} 
																																																		} 
																																																		//class type parameter
																																																		int idx = method .getParameters ( ) .indexOf ( typeReference .eContainer ( ) ) ; 
																																																		//method type parameter
																																																		if ( idx == - 1 ) { 
																																																		for ( sg.edu.nus.comp.simTL.language.java.simTL4J.parameters.Parameter parameter : method .getParameters ( ) ) { 
																																																		for ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeArgument typeArgument : parameter .getTypeArguments ( ) ) { 
																																																		if ( typeArgument instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.generics.QualifiedTypeArgument ) { 
																																																		if ( ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.QualifiedTypeArgument ) typeArgument ) .getTypeReference ( ) .getTarget ( ) .equals ( this ) ) { 
																																																		idx = method .getParameters ( ) .indexOf ( parameter ) ; 
																																																		} 
																																																		} 
																																																		} 
																																																		sg.edu.nus.comp.simTL.language.java.simTL4J.types.ClassifierReference paramTypeReference = parameter .getTypeReference ( ) .getPureClassifierReference ( ) ; 
																																																		if ( paramTypeReference != null ) { 
																																																		for ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeArgument typeArgument : paramTypeReference .getTypeArguments ( ) ) { 
																																																		if ( typeArgument instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.generics.QualifiedTypeArgument ) { 
																																																		if ( this .equals ( ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.QualifiedTypeArgument ) typeArgument ) .getTypeReference ( ) .getTarget ( ) ) ) { 
																																																		idx = method .getParameters ( ) .indexOf ( parameter ) ; 
																																																		} 
																																																		} 
																																																		} 
																																																		} 
																																																		} 
																																																		} 
																																																		if ( idx < methodCall .getArguments ( ) .size ( ) && idx >= 0 ) { 
																																																			sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.Expression argument = methodCall .getArguments ( ) .get ( idx ) ; 
																																																			sg.edu.nus.comp.simTL.language.java.simTL4J.parameters.Parameter parameter = method .getParameters ( ) .get ( idx ) ; 
																																																			sg.edu.nus.comp.simTL.language.java.simTL4J.types.ClassifierReference parameterType = parameter .getTypeReference ( ) .getPureClassifierReference ( ) ; 
																																																			if ( argument instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.instantiations.NewConstructorCall ) { 
																																																			sg.edu.nus.comp.simTL.language.java.simTL4J.types.ClassifierReference argumentType = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.instantiations.NewConstructorCall ) argument ) .getTypeReference ( ) .getPureClassifierReference ( ) ; 
																																																			if ( argumentType != null && parameterType .getTypeArguments ( ) .size ( ) == argumentType .getTypeArguments ( ) .size ( ) ) { 
																																																			for ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeArgument typeArgument : parameterType .getTypeArguments ( ) ) { 
																																																			if ( typeArgument instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.generics.QualifiedTypeArgument ) { 
																																																			if ( ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.QualifiedTypeArgument ) typeArgument ) .getTypeReference ( ) .getTarget ( ) .equals ( this ) ) { 
																																																			resultList .add ( 0 , ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.QualifiedTypeArgument ) argumentType .getTypeArguments ( ) .get ( parameterType .getTypeArguments ( ) .indexOf ( typeArgument ) ) ) .getTypeReference ( ) .getTarget ( ) ) ; 
																																																			} 
																																																			} 
																																																			} 
																																																			} 
																																																			if ( argumentType != null && parameterType .getTarget ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeParameter ) { 
																																																			resultList .add ( 0 , argumentType .getTarget ( ) ) ; 
																																																			} 
																																																			} else if ( parameterType != null && argument instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) { 
																																																			sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference argReference = ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) argument ; 
																																																			while ( argReference .getNext ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference && ! ( argReference .getNext ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.ReflectiveClassReference ) ) { 
																																																			argReference = argReference .getNext ( ) ; 
																																																			} 
																																																			if ( argReference instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.ElementReference ) { 
																																																			sg.edu.nus.comp.simTL.language.java.simTL4J.references.ElementReference elementReference = ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.ElementReference ) argReference ; 
																																																			while ( elementReference .getNext ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.ElementReference ) { 
																																																			elementReference = ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.ElementReference ) elementReference .getNext ( ) ; 
																																																			} 
																																																			if ( elementReference .getTarget ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypedElement ) { 
																																																			sg.edu.nus.comp.simTL.language.java.simTL4J.types.ClassifierReference argumentType = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypedElement ) elementReference .getTarget ( ) ) .getTypeReference ( ) .getPureClassifierReference ( ) ; 
																																																			if ( argumentType != null && parameterType .getTypeArguments ( ) .size ( ) == argumentType .getTypeArguments ( ) .size ( ) ) { 
																																																			for ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeArgument typeArgument : parameterType .getTypeArguments ( ) ) { 
																																																			if ( typeArgument instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.generics.QualifiedTypeArgument ) { 
																																																			if ( ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.QualifiedTypeArgument ) typeArgument ) .getTypeReference ( ) .getTarget ( ) .equals ( this ) ) { 
																																																			int idx2 = parameterType .getTypeArguments ( ) .indexOf ( typeArgument ) ; 
																																																			if ( argumentType .getTypeArguments ( ) .get ( idx2 ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.generics.QualifiedTypeArgument ) { 
																																																			resultList .add ( 0 , ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.QualifiedTypeArgument ) argumentType .getTypeArguments ( ) .get ( idx2 ) ) .getTypeReference ( ) .getTarget ( ) ) ; 
																																																			} else if ( argumentType .getTypeArguments ( ) .get ( idx2 ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.generics.ExtendsTypeArgument ) { 
																																																			for ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypeReference extendedType : ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.ExtendsTypeArgument ) argumentType .getTypeArguments ( ) .get ( idx2 ) ) .getExtendTypes ( ) ) { 
																																																			resultList .add ( 0 , extendedType .getTarget ( ) ) ; 
																																																			} 
																																																			} 
																																																			} 
																																																			} 
																																																			} 
																																																			} 
																																																			if ( argumentType != null && parameterType .getTarget ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeParameter ) { 
																																																			resultList .add ( 0 , argumentType .getTarget ( ) ) ; 
																																																			} 
																																																			} 
																																																			if ( elementReference .getNext ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.ReflectiveClassReference ) { 
																																																			if ( parameterType .getTypeArguments ( ) .size ( ) == 1 ) { 
																																																			for ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeArgument typeArgument : parameterType .getTypeArguments ( ) ) { 
																																																			if ( typeArgument instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.generics.QualifiedTypeArgument ) { 
																																																			if ( ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.QualifiedTypeArgument ) typeArgument ) .getTypeReference ( ) .getTarget ( ) .equals ( this ) ) { 
																																																			resultList .add ( 0 , elementReference .getReferencedType ( ) ) ; 
																																																			} 
																																																			} 
																																																			} 
																																																			} 
																																																			} 
																																																			} else { 
																																																			if ( parameterType .getTarget ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeParameter ) { 
																																																			while ( argReference .getNext ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) { 
																																																			argReference = argReference .getNext ( ) ; 
																																																			} 
																																																			resultList .add ( 0 , ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) argReference ) .getReferencedType ( ) ) ; 
																																																			} 
																																																			} 
																																																			} 
																																																			} 
																																																			//return type
																																																			if ( method .equals ( typeReference .eContainer ( ) ) ) { 
																																																			//bound by the type of a method argument?
																																																			org.eclipse.emf.common.util.EList < sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Classifier > allSuperTypes = null ; 
																																																				for ( sg.edu.nus.comp.simTL.language.java.simTL4J.parameters.Parameter parameter : method .getParameters ( ) ) { 
																																																				if ( this .equals ( parameter .getTypeReference ( ) .getTarget ( ) ) ) { 
																																																				idx = method .getParameters ( ) .indexOf ( parameter ) ; 
																																																				sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Classifier argumentType = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Classifier ) methodCall .getArguments ( ) .get ( idx ) .getType ( ) ; 
																																																				if ( allSuperTypes == null ) { 
																																																				allSuperTypes = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList < sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Classifier > ( ) ; 
																																																					allSuperTypes .add ( argumentType ) ; 
																																																					allSuperTypes .addAll ( argumentType .getAllSuperClassifiers ( ) ) ; 
																																																					} else { 
																																																					allSuperTypes .add ( argumentType ) ; 
																																																					org.eclipse.emf.common.util.EList < sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Classifier > allOtherSuperTypes = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList < sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Classifier > ( ) ; 
																																																							allOtherSuperTypes .add ( argumentType ) ; 
																																																							allOtherSuperTypes .addAll ( argumentType .getAllSuperClassifiers ( ) ) ; 
																																																							org.eclipse.emf.common.util.EList < sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Classifier > temp = allSuperTypes ; 
																																																								allSuperTypes = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList < sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Classifier > ( ) ; 
																																																									for ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Classifier st : allOtherSuperTypes ) { 
																																																									if ( temp .contains ( st ) ) { 
																																																									allSuperTypes .add ( st ) ; 
																																																									} 
																																																									} 
																																																									} 
																																																									} 
																																																									} 
																																																									//all types given by all bindings
																																																									if ( allSuperTypes != null ) { 
																																																									resultList .addAll ( allSuperTypes ) ; 
																																																									} 
																																																									} 
																																																									} 
																																																									} 
																																																									//remove nulls
																																																									for ( java.util.Iterator < ? > it = resultList .iterator ( ) ; it .hasNext ( ) ; ) { 
																																																										if ( it .next ( ) == null ) { 
																																																										it .remove ( ) ; 
																																																										} 
																																																										} 
																																																										if ( resultList .isEmpty ( ) || ( resultList .size ( ) == 1 && resultList .get ( 0 ) .equals ( this ) ) ) { 
																																																										return this ; 
																																																										} else { 
																																																										sg.edu.nus.comp.simTL.language.java.simTL4J.util.TemporalCompositeClassifier temp = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.TemporalCompositeClassifier ( this ) ; 
																																																										for ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type aResult : resultList ) { 
																																																										if ( aResult instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.PrimitiveType ) { 
																																																										aResult = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.PrimitiveType ) aResult ) .wrapPrimitiveType ( ) ; 
																																																										} 
																																																										if ( aResult instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.util.TemporalCompositeClassifier ) { 
																																																										//flatten
																																																										temp .getSuperTypes ( ) .addAll ( ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.util.TemporalCompositeClassifier ) aResult ) .getSuperTypes ( ) ) ; 
																																																										} else { 
																																																										temp .getSuperTypes ( ) .add ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Classifier ) aResult ) ; 
																																																										} 
																																																										} 
																																																										temp .getSuperTypes ( ) .add ( this ) ; 
																																																										return temp ; 
																																																										} 
																																																										"/>
																																																										<EStringToStringMapEntry key="documentation" value="
																																																										Returns the type bound to the given parameter in the context
																																																										of the given reference.
																																																										
																																																										@param typeReference
																																																										@param reference
																																																										@return bound type or parameter if not bound
																																																										"/>
																																																									</EAnnotation>
																																																									<EParameter name="typeReference" type="TypeReference"/>
																																																									<EParameter name="reference" type="Reference"/>
																																																								</EOperation>
																																																								<ref name="extendTypes" upperBound="-1" containment="true" type="TypeReference"/>
																																																							</class>
																																																							<class name="UnknownTypeArgument"/>
																																																						</package>
																																																						<package name="imports" nsURI="http://www.emftext.org/simTL4J/imports" nsPrefix="imports">
																																																							<class name="Import" abstract="true">
																																																								<EOperation name="getImportedClassifier" type="ConcreteClassifier">
																																																									<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																																										<EStringToStringMapEntry key="body" value="java.lang.String containerName = getNamespacesAsString ( ) ; 
																																																										if ( containerName == null ) { 
																																																										return null ; 
																																																										} 
																																																										java.lang.String fullQualifiedName = containerName + name ; 
																																																										return getConcreteClassifier ( fullQualifiedName ) ; 
																																																										"/>
																																																										<EStringToStringMapEntry key="documentation" value="
																																																										Returns the classifier with the given name 
																																																										located in the namespace defined by the import.
																																																										
																																																										@param name the name of the classifier
																																																										@return imported classifier (proxy)
																																																										"/>
																																																									</EAnnotation>
																																																									<EParameter name="name" type="EString"/>
																																																								</EOperation>
																																																								<EOperation name="getImportedClassifiers" upperBound="-1" type="ConcreteClassifier">
																																																									<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																																										<EStringToStringMapEntry key="body" value="java.lang.String containerName = getNamespacesAsString ( ) ; 
																																																										if ( containerName == null ) { 
																																																										return org.eclipse.emf.common.util.ECollections .emptyEList ( ) ; 
																																																										} 
																																																										return getConcreteClassifiers ( containerName , "*" ) ; 
																																																										"/>
																																																										<EStringToStringMapEntry key="documentation" value="
																																																										Returns a list of imported classifiers assuming the import's namespace
																																																										identifies a package.
																																																										
																																																										@param _this 
																																																										@return imported classifier (proxy)
																																																										"/>
																																																									</EAnnotation>
																																																								</EOperation>
																																																								<EOperation name="getImportedMembers" upperBound="-1" type="NamedElement">
																																																									<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																																										<EStringToStringMapEntry key="body" value="sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier concreteClassifier = getClassifierAtNamespaces ( ) ; 
																																																										if ( concreteClassifier == null || concreteClassifier .eIsProxy ( ) ) { 
																																																										return org.eclipse.emf.common.util.ECollections .emptyEList ( ) ; 
																																																										} 
																																																										org.eclipse.emf.common.util.EList < sg.edu.nus.comp.simTL.language.java.simTL4J.commons.NamedElement > result = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList < sg.edu.nus.comp.simTL.language.java.simTL4J.commons.NamedElement > ( ) ; 
																																																												result .addAll ( concreteClassifier .getAllMembers ( this ) ) ; 
																																																												if ( concreteClassifier instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Enumeration ) { 
																																																												result .addAll ( ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Enumeration ) concreteClassifier ) .getConstants ( ) ) ; 
																																																												} 
																																																												return result ; 
																																																												"/>
																																																												<EStringToStringMapEntry key="documentation" value="
																																																												Returns all imported members assuming the import's namespace
																																																												identifies a classifier.
																																																												
																																																												@param _this 
																																																												@return list of imported classifiers (proxies)
																																																												"/>
																																																											</EAnnotation>
																																																										</EOperation>
																																																									</class>
																																																									<class name="ImportingElement" abstract="true">
																																																										<EOperation name="getDefaultImports" upperBound="-1" type="ConcreteClassifier">
																																																											<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																																												<EStringToStringMapEntry key="body" value="org.eclipse.emf.common.util.EList < sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > result = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList < sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier > ( ) ; 
																																																														for ( org.eclipse.emf.ecore.EObject classifier : sg.edu.nus.comp.simTL.language.java.simTL4J.JavaClasspath .get ( this ) .getDefaultImports ( ) ) { 
																																																														result .add ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) classifier ) ; 
																																																														} 
																																																														return result ; 
																																																														"/>
																																																														<EStringToStringMapEntry key="documentation" value=""/>
																																																													</EAnnotation>
																																																												</EOperation>
																																																												<ref name="imports" upperBound="-1" containment="true" type="Import"/>
																																																											</class>
																																																											<class name="StaticImport" abstract="true">
																																																												<ref name="static" lowerBound="1" containment="true" type="Static"/>
																																																											</class>
																																																											<class name="ClassifierImport">
																																																												<ref name="classifier" lowerBound="1" type="ConcreteClassifier"/>
																																																											</class>
																																																											<class name="PackageImport"/>
																																																											<class name="StaticClassifierImport"/>
																																																											<class name="StaticMemberImport">
																																																												<ref name="staticMembers" lowerBound="1" upperBound="-1" type="ReferenceableElement"/>
																																																											</class>
																																																										</package>
																																																										<package name="instantiations" nsURI="http://www.emftext.org/simTL4J/instantiations" nsPrefix="instantiations">
																																																											<class name="Initializable" abstract="true">
																																																												<ref name="initialValue" containment="true" type="Expression"/>
																																																											</class>
																																																											<class name="Instantiation" abstract="true"/>
																																																											<class name="NewConstructorCall">
																																																												<ref name="anonymousClass" containment="true" type="AnonymousClass"/>
																																																											</class>
																																																											<class name="ExplicitConstructorCall">
																																																												<ref name="callTarget" containment="true" type="Self"/>
																																																											</class>
																																																										</package>
																																																										<package name="literals" nsURI="http://www.emftext.org/simTL4J/literals" nsPrefix="literals">
																																																											<class name="Literal" abstract="true">
																																																												<EOperation name="getOneType" type="Type">
																																																													<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																																														<EStringToStringMapEntry key="body" value="//Overrides implementation in Expression
																																																														sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class javaClass = null ; 
																																																														if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.literals.NullLiteral ) { 
																																																														javaClass = getLibClass ( "Void" ) ; 
																																																														} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.literals.BooleanLiteral ) { 
																																																														javaClass = getLibClass ( "Boolean" ) ; 
																																																														} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.literals.DoubleLiteral ) { 
																																																														javaClass = getLibClass ( "Double" ) ; 
																																																														} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.literals.FloatLiteral ) { 
																																																														javaClass = getLibClass ( "Float" ) ; 
																																																														} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.literals.IntegerLiteral ) { 
																																																														javaClass = getLibClass ( "Integer" ) ; 
																																																														} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.literals.LongLiteral ) { 
																																																														javaClass = getLibClass ( "Long" ) ; 
																																																														} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.literals.CharacterLiteral ) { 
																																																														javaClass = getLibClass ( "Character" ) ; 
																																																														} 
																																																														return javaClass ; 
																																																														"/>
																																																														<EStringToStringMapEntry key="documentation" value="
																																																														@return type of the literal
																																																														"/>
																																																													</EAnnotation>
																																																													<EParameter name="alternative" type="EBoolean"/>
																																																												</EOperation>
																																																											</class>
																																																											<class name="Self" abstract="true"/>
																																																											<class name="BooleanLiteral">
																																																												<attr name="value" lowerBound="1" type="//EBoolean"/>
																																																											</class>
																																																											<class name="CharacterLiteral">
																																																												<attr name="value" lowerBound="1" type="//EChar"/>
																																																											</class>
																																																											<class name="FloatLiteral" abstract="true"/>
																																																											<class name="DecimalFloatLiteral">
																																																												<attr name="decimalValue" lowerBound="1" type="//EFloat"/>
																																																											</class>
																																																											<class name="HexFloatLiteral">
																																																												<attr name="hexValue" lowerBound="1" type="//EFloat"/>
																																																											</class>
																																																											<class name="DoubleLiteral" abstract="true"/>
																																																											<class name="DecimalDoubleLiteral">
																																																												<attr name="decimalValue" lowerBound="1" type="//EDouble"/>
																																																											</class>
																																																											<class name="HexDoubleLiteral">
																																																												<attr name="hexValue" lowerBound="1" type="//EDouble"/>
																																																											</class>
																																																											<class name="IntegerLiteral" abstract="true"/>
																																																											<class name="DecimalIntegerLiteral">
																																																												<attr name="decimalValue" lowerBound="1" type="//EBigInteger"/>
																																																											</class>
																																																											<class name="HexIntegerLiteral">
																																																												<attr name="hexValue" lowerBound="1" type="//EBigInteger"/>
																																																											</class>
																																																											<class name="OctalIntegerLiteral">
																																																												<attr name="octalValue" lowerBound="1" type="//EBigInteger"/>
																																																											</class>
																																																											<class name="LongLiteral" abstract="true"/>
																																																											<class name="DecimalLongLiteral">
																																																												<attr name="decimalValue" lowerBound="1" type="//EBigInteger"/>
																																																											</class>
																																																											<class name="HexLongLiteral">
																																																												<attr name="hexValue" lowerBound="1" type="//EBigInteger"/>
																																																											</class>
																																																											<class name="OctalLongLiteral">
																																																												<attr name="octalValue" lowerBound="1" type="//EBigInteger"/>
																																																											</class>
																																																											<class name="NullLiteral"/>
																																																											<class name="Super"/>
																																																											<class name="This"/>
																																																										</package>
																																																										<package name="members" nsURI="http://www.emftext.org/simTL4J/members" nsPrefix="members">
																																																											<class name="ExceptionThrower" abstract="true">
																																																												<ref name="exceptions" upperBound="-1" containment="true" type="NamespaceClassifierReference"/>
																																																											</class>
																																																											<class name="Member" abstract="true"/>
																																																											<class name="MemberContainer" abstract="true">
																																																												<EOperation name="getContainedClassifier" type="ConcreteClassifier">
																																																													<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																																														<EStringToStringMapEntry key="body" value="for ( sg.edu.nus.comp.simTL.language.java.simTL4J.members.Member member : getMembers ( ) ) { 
																																																														if ( member instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier && name .equals ( member .getName ( ) ) ) { 
																																																														return ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) member ; 
																																																														} 
																																																														} 
																																																														return null ; 
																																																														"/>
																																																														<EStringToStringMapEntry key="documentation" value="
																																																														@param name
																																																														@return classifier with the given name defined in this member container
																																																														"/>
																																																													</EAnnotation>
																																																													<EParameter name="name" type="EString"/>
																																																												</EOperation>
																																																												<EOperation name="getContainedField" type="Field">
																																																													<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																																														<EStringToStringMapEntry key="body" value="for ( sg.edu.nus.comp.simTL.language.java.simTL4J.members.Member member : getMembers ( ) ) { 
																																																														if ( member instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.members.Field && name .equals ( member .getName ( ) ) ) { 
																																																														return ( sg.edu.nus.comp.simTL.language.java.simTL4J.members.Field ) member ; 
																																																														} 
																																																														} 
																																																														return null ; 
																																																														"/>
																																																														<EStringToStringMapEntry key="documentation" value="
																																																														@param name
																																																														@return field with the given name defined in this member container
																																																														"/>
																																																													</EAnnotation>
																																																													<EParameter name="name" type="EString"/>
																																																												</EOperation>
																																																												<EOperation name="getContainedMethod" type="Method">
																																																													<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																																														<EStringToStringMapEntry key="body" value="sg.edu.nus.comp.simTL.language.java.simTL4J.members.Method found = null ; 
																																																														for ( sg.edu.nus.comp.simTL.language.java.simTL4J.members.Member member : getMembers ( ) ) { 
																																																														if ( member instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.members.Method && name .equals ( member .getName ( ) ) ) { 
																																																														if ( found != null ) { 
																																																														return null ; 
																																																														} else { 
																																																														found = ( sg.edu.nus.comp.simTL.language.java.simTL4J.members.Method ) member ; 
																																																														} 
																																																														} 
																																																														} 
																																																														return found ; 
																																																														"/>
																																																														<EStringToStringMapEntry key="documentation" value="
																																																														@param name
																																																														@return method with the given name defined in this member container;
																																																														null, if there is no such method 
																																																														or if there are multiple methods with the same name
																																																														"/>
																																																													</EAnnotation>
																																																													<EParameter name="name" type="EString"/>
																																																												</EOperation>
																																																												<ref name="members" upperBound="-1" containment="true" type="Member"/>
																																																												<ref name="defaultMembers" upperBound="-1" transient="true" containment="true" type="Member"/>
																																																											</class>
																																																											<class name="AdditionalField">
																																																												<EOperation name="getArrayDimension" type="ELong">
																																																													<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																																														<EStringToStringMapEntry key="body" value="long size = this .getArrayDimensionsBefore ( ) .size ( ) + this .getArrayDimensionsAfter ( ) .size ( ) ; 
																																																														return size ; 
																																																														"/>
																																																														<EStringToStringMapEntry key="documentation" value=""/>
																																																													</EAnnotation>
																																																												</EOperation>
																																																											</class>
																																																											<class name="Constructor"/>
																																																											<class name="EmptyMember"/>
																																																											<class name="Field">
																																																												<ref name="additionalFields" upperBound="-1" containment="true" type="AdditionalField"/>
																																																											</class>
																																																											<class name="Method" abstract="true">
																																																												<EOperation name="isMethodForCall" type="EBoolean">
																																																													<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																																														<EStringToStringMapEntry key="body" value="org.eclipse.emf.common.util.EList < sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type > argumentTypeList = methodCall .getArgumentTypes ( ) ; 
																																																															org.eclipse.emf.common.util.EList < sg.edu.nus.comp.simTL.language.java.simTL4J.parameters.Parameter > parameterList = new org.eclipse.emf.common.util.BasicEList < sg.edu.nus.comp.simTL.language.java.simTL4J.parameters.Parameter > ( this .getParameters ( ) ) ; 
																																																																	org.eclipse.emf.common.util.EList < sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type > parameterTypeList = new org.eclipse.emf.common.util.BasicEList < sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type > ( ) ; 
																																																																			for ( sg.edu.nus.comp.simTL.language.java.simTL4J.parameters.Parameter parameter : parameterList ) { 
																																																																			//determine types before messing with the parameters
																																																																			parameterTypeList .add ( parameter .getTypeReference ( ) .getBoundTarget ( methodCall ) ) ; 
																																																																			} 
																																																																			if ( ! parameterList .isEmpty ( ) ) { 
																																																																			sg.edu.nus.comp.simTL.language.java.simTL4J.parameters.Parameter lastParameter = parameterList .get ( parameterList .size ( ) - 1 ) ; 
																																																																			sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type lastParameterType = parameterTypeList .get ( parameterTypeList .size ( ) - 1 ) ; 
																																																																			; 
																																																																			if ( lastParameter instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.parameters.VariableLengthParameter ) { 
																																																																			//in case of variable length add/remove some parameters
																																																																			while ( parameterList .size ( ) < argumentTypeList .size ( ) ) { 
																																																																			if ( needsPerfectMatch ) return false ; 
																																																																			parameterList .add ( lastParameter ) ; 
																																																																			parameterTypeList .add ( lastParameterType ) ; 
																																																																			} 
																																																																			if ( parameterList .size ( ) > argumentTypeList .size ( ) ) { 
																																																																				if ( needsPerfectMatch ) return false ; 
																																																																				parameterList .remove ( lastParameter ) ; 
																																																																				parameterTypeList .remove ( parameterTypeList .size ( ) - 1 ) ; 
																																																																				} 
																																																																				} 
																																																																				} 
																																																																				if ( parameterList .size ( ) == argumentTypeList .size ( ) ) { 
																																																																				boolean parametersMatch = true ; 
																																																																				for ( int i = 0 ; i < argumentTypeList .size ( ) ; i ++ ) { 
																																																																				sg.edu.nus.comp.simTL.language.java.simTL4J.parameters.Parameter parameter = parameterList .get ( i ) ; 
																																																																				sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.Expression argument = methodCall .getArguments ( ) .get ( i ) ; 
																																																																				sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type parameterType = parameterTypeList .get ( i ) ; 
																																																																				sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type argumentType = argumentTypeList .get ( i ) ; 
																																																																				if ( argumentType == null || parameterType == null ) { 
																																																																				return false ; 
																																																																				} 
																																																																				if ( parameterType != null && argumentType != null ) { 
																																																																				if ( ! parameterType .eIsProxy ( ) || ! argumentType .eIsProxy ( ) ) { 
																																																																				if ( needsPerfectMatch ) { 
																																																																				parametersMatch = parametersMatch && argumentType .equalsType ( argument .getArrayDimension ( ) , parameterType , parameter .getArrayDimension ( ) ) ; 
																																																																				} else { 
																																																																				parametersMatch = parametersMatch && argumentType .isSuperType ( argument .getArrayDimension ( ) , parameterType , parameter ) ; 
																																																																				} 
																																																																				} else { 
																																																																				return false ; 
																																																																				} 
																																																																				} else { 
																																																																				return false ; 
																																																																				} 
																																																																				} 
																																																																				return parametersMatch ; 
																																																																				} 
																																																																				return false ; 
																																																																				"/>
																																																																				<EStringToStringMapEntry key="documentation" value=""/>
																																																																			</EAnnotation>
																																																																			<EParameter name="methodCall" type="MethodCall"/>
																																																																			<EParameter name="needsPerfectMatch" type="EBoolean"/>
																																																																		</EOperation>
																																																																		<EOperation name="isSomeMethodForCall" type="EBoolean">
																																																																			<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																																																				<EStringToStringMapEntry key="body" value="return isMethodForCall ( methodCall , false ) ; 
																																																																				"/>
																																																																				<EStringToStringMapEntry key="documentation" value="
																																																																				Decides if the given method matches the given call. 
																																																																				
																																																																				@param methodCall
																																																																				@return
																																																																				"/>
																																																																			</EAnnotation>
																																																																			<EParameter name="methodCall" type="MethodCall"/>
																																																																		</EOperation>
																																																																		<EOperation name="isBetterMethodForCall" type="EBoolean">
																																																																			<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																																																				<EStringToStringMapEntry key="body" value="if ( ! isMethodForCall ( methodCall , false ) ) { 
																																																																				return false ; 
																																																																				} 
																																																																				if ( otherMethod .isMethodForCall ( methodCall , true ) ) { 
																																																																				//the other already matches perfectly; I am not better
																																																																				return false ; 
																																																																				} 
																																																																				if ( ! otherMethod .isMethodForCall ( methodCall , false ) ) { 
																																																																				//I match, but the other does not
																																																																				return true ; 
																																																																				} 
																																																																				//we both match, I am only better if I match perfectly <- 
																																																																				//TODO #763: this is not enough: we need to check for "nearest subtype" here
																																																																				return isMethodForCall ( methodCall , true ) ; 
																																																																				"/>
																																																																				<EStringToStringMapEntry key="documentation" value="
																																																																				Only returns true if the given Method is a better match for the given calls than the
																																																																				otherMethod given.
																																																																				
																																																																				@param otherMethod
																																																																				@param methodCall
																																																																				@return
																																																																				"/>
																																																																			</EAnnotation>
																																																																			<EParameter name="otherMethod" type="Method"/>
																																																																			<EParameter name="methodCall" type="MethodCall"/>
																																																																		</EOperation>
																																																																		<EOperation name="getArrayDimension" type="ELong">
																																																																			<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																																																				<EStringToStringMapEntry key="body" value="long size = this .getArrayDimensionsBefore ( ) .size ( ) + this .getArrayDimensionsAfter ( ) .size ( ) ; 
																																																																				if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.parameters.VariableLengthParameter ) { 
																																																																				size ++ ; 
																																																																				} 
																																																																				return size ; 
																																																																				"/>
																																																																				<EStringToStringMapEntry key="documentation" value=""/>
																																																																			</EAnnotation>
																																																																		</EOperation>
																																																																	</class>
																																																																	<class name="InterfaceMethod"/>
																																																																	<class name="ClassMethod"/>
																																																																	<class name="EnumConstant">
																																																																		<ref name="anonymousClass" containment="true" type="AnonymousClass"/>
																																																																	</class>
																																																																</package>
																																																																<package name="modifiers" nsURI="http://www.emftext.org/simTL4J/modifiers" nsPrefix="modifiers">
																																																																	<class name="Modifier" abstract="true"/>
																																																																	<class name="AnnotationInstanceOrModifier" abstract="true"/>
																																																																	<class name="AnnotableAndModifiable" abstract="true">
																																																																		<EOperation name="isHidden" type="EBoolean">
																																																																			<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																																																				<EStringToStringMapEntry key="body" value="//all members of an interface are public by default
																																																																				if ( this .eContainer ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Interface ) { 
																																																																				return false ; 
																																																																				} 
																																																																				if ( context .eIsProxy ( ) ) { 
																																																																				context = ( sg.edu.nus.comp.simTL.language.java.simTL4J.commons.Commentable ) org.eclipse.emf.ecore.util.EcoreUtil .resolve ( context , this ) ; 
																																																																				} 
																																																																				sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier contextClassifier = context .getContainingConcreteClassifier ( ) ; 
																																																																				sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier myClassifier = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.commons.Commentable ) eContainer ( ) ) .getParentConcreteClassifier ( ) ; 
																																																																				//special case: self reference to outer instance
																																																																				if ( context instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) { 
																																																																				if ( ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) context ) .getPrevious ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.SelfReference ) { 
																																																																				sg.edu.nus.comp.simTL.language.java.simTL4J.references.SelfReference selfReference = ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.SelfReference ) ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) context ) .getPrevious ( ) ; 
																																																																				if ( selfReference .getSelf ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.literals.Self ) { 
																																																																				if ( selfReference .getPrevious ( ) != null ) { 
																																																																				sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type type = selfReference .getPrevious ( ) .getReferencedType ( ) ; 
																																																																				if ( type instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) { 
																																																																				contextClassifier = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) type ; 
																																																																				} 
																																																																				} 
																																																																				} 
																																																																				} 
																																																																				} 
																																																																				for ( sg.edu.nus.comp.simTL.language.java.simTL4J.modifiers.AnnotationInstanceOrModifier modifier : this .getAnnotationsAndModifiers ( ) ) { 
																																																																				if ( modifier instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.modifiers.Private ) { 
																																																																				if ( myClassifier .equalsType ( 0 , contextClassifier , 0 ) ) { 
																																																																				return false ; 
																																																																				} 
																																																																				return true ; 
																																																																				} 
																																																																				if ( modifier instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.modifiers.Public ) { 
																																																																				return false ; 
																																																																				} 
																																																																				if ( modifier instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.modifiers.Protected ) { 
																																																																				//package visibility
																																																																				if ( getContainingPackageName ( ) != null && getContainingPackageName ( ) .equals ( context .getContainingPackageName ( ) ) ) { 
																																																																				return false ; 
																																																																				} 
																																																																				//try outer classifiers as well 
																																																																				while ( contextClassifier instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Classifier ) { 
																																																																				if ( contextClassifier .isSuperType ( 0 , myClassifier , null ) ) { 
																																																																				return false ; 
																																																																				} 
																																																																				contextClassifier = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.commons.Commentable ) contextClassifier .eContainer ( ) ) .getParentConcreteClassifier ( ) ; 
																																																																				if ( contextClassifier != null && ! contextClassifier .eIsProxy ( ) && contextClassifier .isSuperType ( 0 , myClassifier , null ) ) { 
																																																																				return false ; 
																																																																				} 
																																																																				} 
																																																																				//visibility through anonymous subclass
																																																																				sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.AnonymousClass anonymousClass = context .getContainingAnonymousClass ( ) ; 
																																																																				while ( anonymousClass != null ) { 
																																																																				contextClassifier = anonymousClass .getSuperClassifier ( ) ; 
																																																																				if ( contextClassifier == null ) { 
																																																																				return true ; 
																																																																				} 
																																																																				if ( contextClassifier .isSuperType ( 0 , myClassifier , null ) ) { 
																																																																				return false ; 
																																																																				} 
																																																																				anonymousClass = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.commons.Commentable ) anonymousClass .eContainer ( ) ) .getContainingAnonymousClass ( ) ; 
																																																																				} 
																																																																				return true ; 
																																																																				} 
																																																																				} 
																																																																				//package visibility?
																																																																				if ( getContainingPackageName ( ) != null && getContainingPackageName ( ) .equals ( context .getContainingPackageName ( ) ) ) { 
																																																																				return false ; 
																																																																				} 
																																																																				return true ; 
																																																																				"/>
																																																																				<EStringToStringMapEntry key="documentation" value=""/>
																																																																			</EAnnotation>
																																																																			<EParameter name="context" type="Commentable"/>
																																																																		</EOperation>
																																																																		<EOperation name="isStatic" type="EBoolean">
																																																																			<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																																																				<EStringToStringMapEntry key="body" value="//all members of an interface as static by default
																																																																				if ( this .eContainer ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Interface ) { 
																																																																				return true ; 
																																																																				} 
																																																																				for ( sg.edu.nus.comp.simTL.language.java.simTL4J.modifiers.AnnotationInstanceOrModifier modifier : this .getAnnotationsAndModifiers ( ) ) { 
																																																																				if ( modifier instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.modifiers.Static ) { 
																																																																				return true ; 
																																																																				} 
																																																																				} 
																																																																				return false ; 
																																																																				"/>
																																																																				<EStringToStringMapEntry key="documentation" value=""/>
																																																																			</EAnnotation>
																																																																		</EOperation>
																																																																		<ref name="annotationsAndModifiers" upperBound="-1" containment="true" type="AnnotationInstanceOrModifier"/>
																																																																	</class>
																																																																	<class name="Modifiable" abstract="true">
																																																																		<ref name="modifiers" upperBound="-1" containment="true" type="Modifier"/>
																																																																	</class>
																																																																	<class name="Abstract"/>
																																																																	<class name="Final"/>
																																																																	<class name="Native"/>
																																																																	<class name="Protected"/>
																																																																	<class name="Public"/>
																																																																	<class name="Private"/>
																																																																	<class name="Static"/>
																																																																	<class name="Strictfp"/>
																																																																	<class name="Synchronized"/>
																																																																	<class name="Transient"/>
																																																																	<class name="Volatile"/>
																																																																</package>
																																																																<package name="operators" nsURI="http://www.emftext.org/simTL4J/operators" nsPrefix="operators">
																																																																	<class name="Operator" abstract="true"/>
																																																																	<class name="AdditiveOperator" abstract="true"/>
																																																																	<class name="AssignmentOperator" abstract="true"/>
																																																																	<class name="EqualityOperator" abstract="true"/>
																																																																	<class name="MultiplicativeOperator" abstract="true"/>
																																																																	<class name="RelationOperator" abstract="true"/>
																																																																	<class name="ShiftOperator" abstract="true"/>
																																																																	<class name="UnaryOperator" abstract="true"/>
																																																																	<class name="UnaryModificationOperator" abstract="true"/>
																																																																	<class name="Assignment"/>
																																																																	<class name="AssignmentAnd"/>
																																																																	<class name="AssignmentDivision"/>
																																																																	<class name="AssignmentExclusiveOr"/>
																																																																	<class name="AssignmentMinus"/>
																																																																	<class name="AssignmentModulo"/>
																																																																	<class name="AssignmentMultiplication"/>
																																																																	<class name="AssignmentLeftShift"/>
																																																																	<class name="AssignmentOr"/>
																																																																	<class name="AssignmentPlus"/>
																																																																	<class name="AssignmentRightShift"/>
																																																																	<class name="AssignmentUnsignedRightShift"/>
																																																																	<class name="Equal"/>
																																																																	<class name="NotEqual"/>
																																																																	<class name="GreaterThan"/>
																																																																	<class name="GreaterThanOrEqual"/>
																																																																	<class name="LessThan"/>
																																																																	<class name="LessThanOrEqual"/>
																																																																	<class name="Addition"/>
																																																																	<class name="Subtraction"/>
																																																																	<class name="Division"/>
																																																																	<class name="Multiplication"/>
																																																																	<class name="Remainder"/>
																																																																	<class name="Complement"/>
																																																																	<class name="MinusMinus"/>
																																																																	<class name="Negate"/>
																																																																	<class name="PlusPlus"/>
																																																																	<class name="LeftShift"/>
																																																																	<class name="RightShift"/>
																																																																	<class name="UnsignedRightShift"/>
																																																																</package>
																																																																<package name="parameters" nsURI="http://www.emftext.org/simTL4J/parameters" nsPrefix="parameters">
																																																																	<class name="Parameter" abstract="true"/>
																																																																	<class name="Parametrizable" abstract="true">
																																																																		<ref name="parameters" upperBound="-1" containment="true" type="Parameter"/>
																																																																	</class>
																																																																	<class name="OrdinaryParameter"/>
																																																																	<class name="VariableLengthParameter"/>
																																																																</package>
																																																																<package name="references" nsURI="http://www.emftext.org/simTL4J/references" nsPrefix="references">
																																																																	<class name="Reference" abstract="true">
																																																																		<EOperation name="getReferencedType" type="Type">
																																																																			<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																																																				<EStringToStringMapEntry key="body" value="if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.literals.Literal ) { 
																																																																				return ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.literals.Literal ) this ) .getType ( ) ; 
																																																																				} 
																																																																				sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type type = null ; 
																																																																				//referenced element point to a type
																																																																				//element points to this or super
																																																																				if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypedElement ) { 
																																																																				sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypeReference typeRef = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypedElement ) this ) .getTypeReference ( ) ; 
																																																																				type = typeRef .getBoundTarget ( this ) ; 
																																																																				} else //element points to the object's class object
																																																																				if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.SelfReference ) { 
																																																																				sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type thisClass = null ; 
																																																																				if ( this .getPrevious ( ) != null ) { 
																																																																				thisClass = this .getPrevious ( ) .getReferencedType ( ) ; 
																																																																				} else { 
																																																																				sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.AnonymousClass anonymousContainer = getContainingAnonymousClass ( ) ; 
																																																																				if ( anonymousContainer != null ) { 
																																																																				thisClass = anonymousContainer ; 
																																																																				} else { 
																																																																				thisClass = getContainingConcreteClassifier ( ) ; 
																																																																				} 
																																																																				} 
																																																																				//find super class if "self" is "super"
																																																																				if ( ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.SelfReference ) this ) .getSelf ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.literals.Super ) { 
																																																																				if ( thisClass instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class ) { 
																																																																				return ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class ) thisClass ) .getSuperClass ( ) ; 
																																																																				} 
																																																																				if ( thisClass instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.AnonymousClass ) { 
																																																																				return ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.AnonymousClass ) thisClass ) .getSuperClassifier ( ) ; 
																																																																				} 
																																																																				} 
																																																																				return thisClass ; 
																																																																				} else //referenced element points to an element with a type
																																																																				if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.ReflectiveClassReference ) { 
																																																																				return getClassClass ( ) ; 
																																																																				} else //Strings may also appear as reference
																																																																				if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.ElementReference ) { 
																																																																				sg.edu.nus.comp.simTL.language.java.simTL4J.references.ReferenceableElement target = ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.ReferenceableElement ) ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.ElementReference ) this ) .getTarget ( ) ; 
																																																																				if ( target .eIsProxy ( ) ) { 
																																																																				type = null ; 
																																																																				} 
																																																																				//Navigate through AdditionalLocalVariable or Field
																																																																				if ( target instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.variables.AdditionalLocalVariable ) { 
																																																																				target = ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.ReferenceableElement ) target .eContainer ( ) ; 
																																																																				} 
																																																																				if ( target instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.members.AdditionalField ) { 
																																																																				target = ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.ReferenceableElement ) target .eContainer ( ) ; 
																																																																				} 
																																																																				if ( target instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypedElement ) { 
																																																																				sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypeReference typeRef = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypedElement ) target ) .getTypeReference ( ) ; 
																																																																				if ( typeRef != null ) { 
																																																																				type = typeRef .getBoundTarget ( this ) ; 
																																																																				} 
																																																																				} else /*e.g. Annotation*/if ( target instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type ) { 
																																																																				return ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type ) target ; 
																																																																				} else if ( target instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.members.EnumConstant ) { 
																																																																				type = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Enumeration ) target .eContainer ( ) ; 
																																																																				} 
																																																																				} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.StringReference ) { 
																																																																				return getStringClass ( ) ; 
																																																																				} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.NestedExpression ) { 
																																																																				type = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.NestedExpression ) this ) .getExpression ( ) .getType ( ) ; 
																																																																				} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.PrimitiveTypeReference ) { 
																																																																				type = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.PrimitiveTypeReference ) this ) .getPrimitiveType ( ) ; 
																																																																				} else { 
																																																																				assert ( false ) ; 
																																																																				} 
																																																																				return type ; 
																																																																				"/>
																																																																				<EStringToStringMapEntry key="documentation" value="
																																																																				Determines the <code>Type</code> of the reference. That is,
																																																																				either the type to which the reference points directly, or the
																																																																				type of the element to which the reference points.
																																																																				
																																																																				@return the determined type
																																																																				"/>
																																																																			</EAnnotation>
																																																																		</EOperation>
																																																																		<EOperation name="getPrevious" type="Reference">
																																																																			<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																																																				<EStringToStringMapEntry key="body" value="if ( eContainer() instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) { 
																																																																				Reference container = (Reference) eContainer( ) ; 
																																																																				if (this.equals(container.getNext())) {
																																																																				return container;
																																																																				}
																																																																				}
																																																																				return null;"/>
																																																																				<EStringToStringMapEntry key="documentation" value=""/>
																																																																			</EAnnotation>
																																																																		</EOperation>
																																																																		<ref name="next" containment="true" type="Reference"/>
																																																																		<ref name="arraySelectors" upperBound="-1" containment="true" type="ArraySelector"/>
																																																																	</class>
																																																																	<class name="Argumentable" abstract="true">
																																																																		<EOperation name="getArgumentTypes" upperBound="-1" type="Type">
																																																																			<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																																																				<EStringToStringMapEntry key="body" value="org.eclipse.emf.common.util.EList < sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type > resultList = new org.eclipse.emf.common.util.BasicEList < sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type > ( ) ; 
																																																																						for ( sg.edu.nus.comp.simTL.language.java.simTL4J.expressions.Expression exp : getArguments ( ) ) { 
																																																																						sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type type = exp .getType ( ) ; 
																																																																						resultList .add ( type ) ; 
																																																																						} 
																																																																						return resultList ; 
																																																																						"/>
																																																																						<EStringToStringMapEntry key="documentation" value="
																																																																						@return list of types of my arguments
																																																																						"/>
																																																																					</EAnnotation>
																																																																				</EOperation>
																																																																				<ref name="arguments" upperBound="-1" containment="true" type="Expression"/>
																																																																			</class>
																																																																			<class name="ReferenceableElement" abstract="true"/>
																																																																			<class name="ElementReference" abstract="true">
																																																																				<ref name="target" type="ReferenceableElement"/>
																																																																			</class>
																																																																			<class name="IdentifierReference"/>
																																																																			<class name="MethodCall"/>
																																																																			<class name="ReflectiveClassReference"/>
																																																																			<class name="PrimitiveTypeReference">
																																																																				<ref name="primitiveType" lowerBound="1" containment="true" type="PrimitiveType"/>
																																																																			</class>
																																																																			<class name="StringReference">
																																																																				<attr name="value" type="//EString"/>
																																																																			</class>
																																																																			<class name="SelfReference">
																																																																				<ref name="self" containment="true" type="Self"/>
																																																																			</class>
																																																																		</package>
																																																																		<package name="statements" nsURI="http://www.emftext.org/simTL4J/statements" nsPrefix="statements">
																																																																			<class name="StatementContainer" abstract="true">
																																																																				<ref name="statement" lowerBound="1" containment="true" type="Statement"/>
																																																																			</class>
																																																																			<class name="StatementListContainer" abstract="true">
																																																																				<ref name="statements" upperBound="-1" containment="true" type="Statement"/>
																																																																			</class>
																																																																			<class name="Conditional" abstract="true">
																																																																				<ref name="condition" lowerBound="1" containment="true" type="Expression"/>
																																																																			</class>
																																																																			<class name="ForLoopInitializer" abstract="true"/>
																																																																			<class name="Statement" abstract="true"/>
																																																																			<class name="SwitchCase" abstract="true"/>
																																																																			<class name="Assert">
																																																																				<ref name="errorMessage" containment="true" type="Expression"/>
																																																																			</class>
																																																																			<class name="Break"/>
																																																																			<class name="Block"/>
																																																																			<class name="CatchBlock">
																																																																				<ref name="parameter" lowerBound="1" containment="true" type="OrdinaryParameter"/>
																																																																			</class>
																																																																			<class name="Condition">
																																																																				<ref name="elseStatement" containment="true" type="Statement"/>
																																																																			</class>
																																																																			<class name="Continue"/>
																																																																			<class name="DefaultSwitchCase"/>
																																																																			<class name="DoWhileLoop"/>
																																																																			<class name="EmptyStatement"/>
																																																																			<class name="ExpressionStatement">
																																																																				<ref name="expression" lowerBound="1" containment="true" type="Expression"/>
																																																																			</class>
																																																																			<class name="ForLoop">
																																																																				<ref name="init" containment="true" type="ForLoopInitializer"/>
																																																																				<ref name="updates" upperBound="-1" containment="true" type="Expression"/>
																																																																			</class>
																																																																			<class name="ForEachLoop">
																																																																				<ref name="next" containment="true" type="OrdinaryParameter"/>
																																																																				<ref name="collection" containment="true" type="Expression"/>
																																																																			</class>
																																																																			<class name="Jump" abstract="true">
																																																																				<ref name="target" type="JumpLabel"/>
																																																																			</class>
																																																																			<class name="JumpLabel"/>
																																																																			<class name="LocalVariableStatement">
																																																																				<ref name="variable" containment="true" type="LocalVariable"/>
																																																																			</class>
																																																																			<class name="NormalSwitchCase"/>
																																																																			<class name="Return">
																																																																				<ref name="returnValue" containment="true" type="Expression"/>
																																																																			</class>
																																																																			<class name="Switch">
																																																																				<ref name="cases" upperBound="-1" containment="true" type="SwitchCase"/>
																																																																				<ref name="variable" containment="true" type="Expression"/>
																																																																			</class>
																																																																			<class name="SynchronizedBlock">
																																																																				<ref name="lockProvider" containment="true" type="Expression"/>
																																																																			</class>
																																																																			<class name="Throw">
																																																																				<ref name="throwable" lowerBound="1" containment="true" type="Expression"/>
																																																																			</class>
																																																																			<class name="TryBlock">
																																																																				<ref name="catcheBlocks" upperBound="-1" containment="true" type="CatchBlock"/>
																																																																				<ref name="finallyBlock" containment="true" type="Block"/>
																																																																			</class>
																																																																			<class name="WhileLoop">
																																																																				<ref name="condition" lowerBound="1" containment="true" type="Expression"/>
																																																																			</class>
																																																																		</package>
																																																																		<package name="types" nsURI="http://www.emftext.org/simTL4J/types" nsPrefix="types">
																																																																			<class name="Type" abstract="true">
																																																																				<EOperation name="equalsType" type="EBoolean">
																																																																					<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																																																						<EStringToStringMapEntry key="body" value="sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type _this = this ; 
																																																																						//do comparison on the classifier level
																																																																						if ( _this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.PrimitiveType ) { 
																																																																						_this = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.PrimitiveType ) _this ) .wrapPrimitiveType ( ) ; 
																																																																						} 
																																																																						if ( otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.PrimitiveType ) { 
																																																																						otherType = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.PrimitiveType ) otherType ) .wrapPrimitiveType ( ) ; 
																																																																						} 
																																																																						if ( arrayDimension == otherArrayDimension && otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Classifier && _this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Classifier && ( otherType .equals ( _this ) ) ) { 
																																																																						return true ; 
																																																																						} 
																																																																						return false ; 
																																																																						"/>
																																																																						<EStringToStringMapEntry key="documentation" value="
																																																																						@param arrayDimension
																																																																						@param otherType
																																																																						@param otherArrayDimension
																																																																						@return if both type are equal
																																																																						"/>
																																																																					</EAnnotation>
																																																																					<EParameter name="arrayDimension" type="ELong"/>
																																																																					<EParameter name="otherType" type="Type"/>
																																																																					<EParameter name="otherArrayDimension" type="ELong"/>
																																																																				</EOperation>
																																																																				<EOperation name="isSuperType" type="EBoolean">
																																																																					<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																																																						<EStringToStringMapEntry key="body" value="if ( otherType == null ) { 
																																																																						return false ; 
																																																																						} 
																																																																						sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type _this = this ; 
																																																																						if ( _this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.util.TemporalCompositeClassifier || otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.util.TemporalCompositeClassifier ) { 
																																																																						org.eclipse.emf.common.util.EList < sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type > _thisTypeList = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList < sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type > ( ) ; 
																																																																								org.eclipse.emf.common.util.EList < sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type > otherTypeList = new sg.edu.nus.comp.simTL.language.java.simTL4J.util.UniqueEList < sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type > ( ) ; 
																																																																										if ( _this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.util.TemporalCompositeClassifier ) { 
																																																																										for ( org.eclipse.emf.ecore.EObject aType : ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.util.TemporalCompositeClassifier ) _this ) .getSuperTypes ( ) ) { 
																																																																										_thisTypeList .add ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type ) aType ) ; 
																																																																										} 
																																																																										} else { 
																																																																										_thisTypeList .add ( _this ) ; 
																																																																										} 
																																																																										if ( otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.util.TemporalCompositeClassifier ) { 
																																																																										for ( org.eclipse.emf.ecore.EObject aType : ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.util.TemporalCompositeClassifier ) otherType ) .getSuperTypes ( ) ) { 
																																																																										otherTypeList .add ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type ) aType ) ; 
																																																																										} 
																																																																										} else { 
																																																																										otherTypeList .add ( _this ) ; 
																																																																										} 
																																																																										for ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type one_thisType : _thisTypeList ) { 
																																																																										for ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type oneOtherType : otherTypeList ) { 
																																																																										boolean result = one_thisType .isSuperType ( arrayDimension , oneOtherType , otherArrayType ) ; 
																																																																										if ( result ) { 
																																																																										return true ; 
																																																																										} 
																																																																										} 
																																																																										} 
																																																																										return false ; 
																																																																										} 
																																																																										//if I am a void, I am of every type
																																																																										if ( _this .equals ( getLibClass ( "Void" ) ) ) { 
																																																																										return true ; 
																																																																										} 
																																																																										//if the other is Object I am a subtype in any case (also array dimensions do not matter)
																																																																										if ( otherType .equals ( getObjectClass ( ) ) ) { 
																																																																										return true ; 
																																																																										} 
																																																																										//String, primitives, and arrays are serializable
																																																																										sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier serializableClass = ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) org.eclipse.emf.ecore.util.EcoreUtil .resolve ( getConcreteClassifier ( "java.io.Serializable" ) , _this ) ; 
																																																																										if ( otherType .equals ( serializableClass ) ) { 
																																																																										if ( _this .equals ( serializableClass ) ) { 
																																																																										return true ; 
																																																																										} else if ( _this .equals ( getStringClass ( ) ) ) { 
																																																																										return true ; 
																																																																										} else if ( _this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.PrimitiveType ) { 
																																																																										return true ; 
																																																																										} else if ( arrayDimension > 0 ) { 
																																																																										//all arrays are serializable
																																																																										return true ; 
																																																																										} 
																																																																										} 
																																																																										//if one of us is a parameter to the best of my knowledge, we might match
																																																																										if ( _this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeParameter ) { 
																																																																										return true ; 
																																																																										} 
																																																																										if ( otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeParameter ) { 
																																																																										return true ; 
																																																																										} 
																																																																										//if array dimensions do not match, I am no subtype
																																																																										boolean isTypeParameter = false ; 
																																																																										if ( otherArrayType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypedElement ) { 
																																																																										sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type type = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypedElement ) otherArrayType ) .getTypeReference ( ) .getTarget ( ) ; 
																																																																										isTypeParameter = type instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeParameter ; 
																																																																										} 
																																																																										boolean isVariableLengthParameter = otherArrayType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.parameters.VariableLengthParameter ; 
																																																																										long otherArrayDim = 0 ; 
																																																																										if ( otherArrayType != null ) { 
																																																																										otherArrayDim = otherArrayType .getArrayDimension ( ) ; 
																																																																										} 
																																																																										if ( isTypeParameter && isVariableLengthParameter ) { 
																																																																										if ( arrayDimension != otherArrayDim && arrayDimension != otherArrayDim - 1 && arrayDimension < otherArrayDim ) { 
																																																																										return false ; 
																																																																										} 
																																																																										} else if ( isTypeParameter ) { 
																																																																										if ( arrayDimension < otherArrayDim ) { 
																																																																										return false ; 
																																																																										} 
																																																																										} else if ( isVariableLengthParameter ) { 
																																																																										if ( arrayDimension != otherArrayDim && arrayDimension != otherArrayDim - 1 ) { 
																																																																										return false ; 
																																																																										} 
																																																																										} else { 
																																																																										if ( arrayDimension != otherArrayDim ) { 
																																																																										return false ; 
																																																																										} 
																																																																										} 
																																																																										//annotations
																																																																										if ( _this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Annotation && ( otherType .equals ( getAnnotationInterface ( ) ) || ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) _this ) .getAllSuperClassifiers ( ) .contains ( getAnnotationInterface ( ) ) ) ) { 
																																																																										return true ; 
																																																																										} 
																																																																										//do comparison on the classifier level
																																																																										if ( _this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.PrimitiveType ) { 
																																																																										_this = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.PrimitiveType ) _this ) .wrapPrimitiveType ( ) ; 
																																																																										} 
																																																																										if ( otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.PrimitiveType ) { 
																																																																										otherType = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.PrimitiveType ) otherType ) .wrapPrimitiveType ( ) ; 
																																																																										} 
																																																																										//compare in type hierarchy
																																																																										if ( otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier && _this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier && ( otherType .equals ( _this ) || ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) _this ) .getAllSuperClassifiers ( ) .contains ( otherType ) ) ) { 
																																																																										return true ; 
																																																																										} 
																																																																										if ( otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier && _this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.AnonymousClass && ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.AnonymousClass ) _this ) .getAllSuperClassifiers ( ) .contains ( otherType ) ) { 
																																																																										return true ; 
																																																																										} 
																																																																										//everything can be implicitly casted to CharSequence, so I match when the other type is a CharSequence
																																																																										sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Interface charSequenceClass = getLibInterface ( "CharSequence" ) ; 
																																																																										if ( otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) { 
																																																																										if ( otherType .equals ( charSequenceClass ) || ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.ConcreteClassifier ) otherType ) .getAllSuperClassifiers ( ) .contains ( charSequenceClass ) ) { 
																																																																										return true ; 
																																																																										} 
																																																																										} 
																																																																										//there are some specifics for primitive types not reflected in the type hierarchy
																																																																										if ( otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class ) { 
																																																																										sg.edu.nus.comp.simTL.language.java.simTL4J.types.PrimitiveType primitiveType = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class ) otherType ) .unWrapPrimitiveType ( ) ; 
																																																																										if ( primitiveType == null ) { 
																																																																										return false ; 
																																																																										} 
																																																																										otherType = primitiveType ; 
																																																																										} 
																																																																										if ( _this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class ) { 
																																																																										sg.edu.nus.comp.simTL.language.java.simTL4J.types.PrimitiveType primitiveType = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class ) _this ) .unWrapPrimitiveType ( ) ; 
																																																																										if ( primitiveType == null ) { 
																																																																										return false ; 
																																																																										} 
																																																																										_this = primitiveType ; 
																																																																										} 
																																																																										if ( _this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Boolean ) { 
																																																																										if ( otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Boolean ) { 
																																																																										return true ; 
																																																																										} else { 
																																																																										return false ; 
																																																																										} 
																																																																										} 
																																																																										if ( _this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Byte || _this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Int || _this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Short || _this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Long || _this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Char ) { 
																																																																										if ( otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Byte || otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Int || otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Short || otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Long || otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Char || otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Float || otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Double ) { 
																																																																										return true ; 
																																																																										} else { 
																																																																										return false ; 
																																																																										} 
																																																																										} 
																																																																										if ( _this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Float || _this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Double ) { 
																																																																										if ( otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Float || otherType instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Double ) { 
																																																																										return true ; 
																																																																										} else { 
																																																																										return false ; 
																																																																										} 
																																																																										} 
																																																																										return false ; 
																																																																										"/>
																																																																										<EStringToStringMapEntry key="documentation" value="
																																																																										@param arrayDimension
																																																																										@param otherType
																																																																										@param otherArrayType
																																																																										@return if the other type is equal to me or a super type of me
																																																																										"/>
																																																																									</EAnnotation>
																																																																									<EParameter name="arrayDimension" type="ELong"/>
																																																																									<EParameter name="otherType" type="Type"/>
																																																																									<EParameter name="otherArrayType" type="ArrayTypeable"/>
																																																																								</EOperation>
																																																																								<EOperation name="getAllMembers" upperBound="-1" type="Member">
																																																																									<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																																																										<EStringToStringMapEntry key="body" value="//method has to be specified in subclasses
																																																																										throw new java.lang.UnsupportedOperationException ( ) ; 
																																																																										"/>
																																																																										<EStringToStringMapEntry key="documentation" value=""/>
																																																																									</EAnnotation>
																																																																									<EParameter name="context" type="Commentable"/>
																																																																								</EOperation>
																																																																							</class>
																																																																							<class name="TypedElement" abstract="true">
																																																																								<ref name="typeReference" containment="true" type="TypeReference"/>
																																																																							</class>
																																																																							<class name="TypeReference" abstract="true">
																																																																								<EOperation name="getTarget" type="Type">
																																																																									<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																																																										<EStringToStringMapEntry key="body" value="return getBoundTarget ( null ) ; 
																																																																										"/>
																																																																										<EStringToStringMapEntry key="documentation" value="
																																																																										Returns the type referenced by this <code>TypeReference</code>
																																																																										considering all concrete subclasses of <code>TypeReference</code> used
																																																																										by the Java metamodel. 
																																																																										
																																																																										@param _this 
																																																																										@return the type
																																																																										"/>
																																																																									</EAnnotation>
																																																																								</EOperation>
																																																																								<EOperation name="getBoundTarget" type="Type">
																																																																									<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																																																										<EStringToStringMapEntry key="body" value="sg.edu.nus.comp.simTL.language.java.simTL4J.types.Type type = null ; 
																																																																										if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.ClassifierReference || this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.NamespaceClassifierReference ) { 
																																																																										sg.edu.nus.comp.simTL.language.java.simTL4J.types.ClassifierReference classifierRef = getPureClassifierReference ( ) ; 
																																																																										if ( classifierRef != null ) { 
																																																																										type = classifierRef .getTarget ( ) ; 
																																																																										} 
																																																																										if ( reference instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.MethodCall ) { 
																																																																										sg.edu.nus.comp.simTL.language.java.simTL4J.references.MethodCall potentialCloneCall = ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.MethodCall ) reference ; 
																																																																										//clone returns the type of the cloned in the case of arrays
																																																																										if ( "clone" .equals ( potentialCloneCall .getTarget ( ) .getName ( ) ) ) { 
																																																																										if ( potentialCloneCall .getPrevious ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.ElementReference ) { 
																																																																										sg.edu.nus.comp.simTL.language.java.simTL4J.references.ElementReference prevRef = ( sg.edu.nus.comp.simTL.language.java.simTL4J.references.ElementReference ) potentialCloneCall .getPrevious ( ) ; 
																																																																										if ( prevRef .getTarget ( ) instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.arrays.ArrayTypeable && ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.arrays.ArrayTypeable ) prevRef .getTarget ( ) ) .getArrayDimension ( ) > 0 ) { 
																																																																											type = prevRef .getReferencedType ( ) ; 
																																																																											} 
																																																																											} 
																																																																											} 
																																																																											} 
																																																																											} else if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.PrimitiveType ) { 
																																																																											return ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.PrimitiveType ) this ; 
																																																																											} 
																																																																											//resolve parameter to real type
																																																																											if ( type instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeParameter ) { 
																																																																											type = ( ( sg.edu.nus.comp.simTL.language.java.simTL4J.generics.TypeParameter ) type ) .getBoundType ( this , reference ) ; 
																																																																											} 
																																																																											if ( type != null && type .eIsProxy ( ) ) { 
																																																																											//this may happen, when e.g. a super type is resolved. It is ok.
																																																																											return null ; 
																																																																											} 
																																																																											return type ; 
																																																																											"/>
																																																																											<EStringToStringMapEntry key="documentation" value="
																																																																											Returns the type referenced by this <code>TypeReference</code>
																																																																											considering all concrete subclasses of <code>TypeReference</code> used
																																																																											by the Java metamodel. If type parameters are bound in the given reference,
																																																																											the bound type will be returned instead of the parameter.
																																																																											
																																																																											@return the type
																																																																											"/>
																																																																										</EAnnotation>
																																																																										<EParameter name="reference" type="Reference"/>
																																																																									</EOperation>
																																																																									<EOperation name="getPureClassifierReference" type="ClassifierReference">
																																																																										<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																																																											<EStringToStringMapEntry key="body" value="sg.edu.nus.comp.simTL.language.java.simTL4J.types.ClassifierReference classifierReference = null ; 
																																																																											if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.ClassifierReference ) { 
																																																																											classifierReference = ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.ClassifierReference ) this ; 
																																																																											} 
																																																																											if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.NamespaceClassifierReference ) { 
																																																																											sg.edu.nus.comp.simTL.language.java.simTL4J.types.NamespaceClassifierReference nsClassifierReference = ( sg.edu.nus.comp.simTL.language.java.simTL4J.types.NamespaceClassifierReference ) this ; 
																																																																											if ( ! nsClassifierReference .getClassifierReferences ( ) .isEmpty ( ) ) { 
																																																																											int lastIndex = nsClassifierReference .getClassifierReferences ( ) .size ( ) - 1 ; 
																																																																											classifierReference = nsClassifierReference .getClassifierReferences ( ) .get ( lastIndex ) ; 
																																																																											} 
																																																																											} 
																																																																											return classifierReference ; 
																																																																											"/>
																																																																											<EStringToStringMapEntry key="documentation" value="
																																																																											Extracts the (possibly nested) classifier reference (if any) 
																																																																											from this type references.
																																																																											
																																																																											@return
																																																																											"/>
																																																																										</EAnnotation>
																																																																									</EOperation>
																																																																								</class>
																																																																								<class name="ClassifierReference">
																																																																									<ref name="target" lowerBound="1" type="Classifier"/>
																																																																								</class>
																																																																								<class name="NamespaceClassifierReference">
																																																																									<ref name="classifierReferences" lowerBound="1" upperBound="-1" containment="true" type="ClassifierReference"/>
																																																																								</class>
																																																																								<class name="PrimitiveType" abstract="true">
																																																																									<EOperation name="getAllMembers" upperBound="-1" type="Member">
																																																																										<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																																																											<EStringToStringMapEntry key="body" value="sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class javaClass = wrapPrimitiveType ( ) ; 
																																																																											return javaClass .getAllMembers ( context ) ; 
																																																																											"/>
																																																																											<EStringToStringMapEntry key="documentation" value="
																																																																											@param context to check protected visibility
																																																																											@return all members (including super type members)
																																																																											"/>
																																																																										</EAnnotation>
																																																																										<EParameter name="context" type="Commentable"/>
																																																																									</EOperation>
																																																																									<EOperation name="wrapPrimitiveType" type="Class">
																																																																										<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																																																											<EStringToStringMapEntry key="body" value="sg.edu.nus.comp.simTL.language.java.simTL4J.classifiers.Class javaClass = null ; 
																																																																											if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Boolean ) { 
																																																																											javaClass = getLibClass ( "Boolean" ) ; 
																																																																											} 
																																																																											if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Byte ) { 
																																																																											javaClass = getLibClass ( "Byte" ) ; 
																																																																											} 
																																																																											if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Char ) { 
																																																																											javaClass = getLibClass ( "Character" ) ; 
																																																																											} 
																																																																											if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Double ) { 
																																																																											javaClass = getLibClass ( "Double" ) ; 
																																																																											} 
																																																																											if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Float ) { 
																																																																											javaClass = getLibClass ( "Float" ) ; 
																																																																											} 
																																																																											if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Int ) { 
																																																																											javaClass = getLibClass ( "Integer" ) ; 
																																																																											} 
																																																																											if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Long ) { 
																																																																											javaClass = getLibClass ( "Long" ) ; 
																																																																											} 
																																																																											if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Short ) { 
																																																																											javaClass = getLibClass ( "Short" ) ; 
																																																																											} 
																																																																											if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.types.Void ) { 
																																																																											javaClass = getLibClass ( "Void" ) ; 
																																																																											} 
																																																																											return javaClass ; 
																																																																											"/>
																																																																											<EStringToStringMapEntry key="documentation" value="
																																																																											@return primitive type as a class representation
																																																																											"/>
																																																																										</EAnnotation>
																																																																									</EOperation>
																																																																								</class>
																																																																								<class name="Boolean"/>
																																																																								<class name="Byte"/>
																																																																								<class name="Char"/>
																																																																								<class name="Double"/>
																																																																								<class name="Float"/>
																																																																								<class name="Int"/>
																																																																								<class name="Long"/>
																																																																								<class name="Short"/>
																																																																								<class name="Void"/>
																																																																							</package>
																																																																							<package name="variables" nsURI="http://www.emftext.org/simTL4J/variables" nsPrefix="variables">
																																																																								<class name="Variable" abstract="true">
																																																																									<EOperation name="getArrayDimension" type="ELong">
																																																																										<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																																																											<EStringToStringMapEntry key="body" value="long size = this .getArrayDimensionsBefore ( ) .size ( ) + this .getArrayDimensionsAfter ( ) .size ( ) ; 
																																																																											if ( this instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.parameters.VariableLengthParameter ) { 
																																																																											size ++ ; 
																																																																											} 
																																																																											return size ; 
																																																																											"/>
																																																																											<EStringToStringMapEntry key="documentation" value=""/>
																																																																										</EAnnotation>
																																																																									</EOperation>
																																																																								</class>
																																																																								<class name="LocalVariable">
																																																																									<ref name="additionalLocalVariables" upperBound="-1" containment="true" type="AdditionalLocalVariable"/>
																																																																								</class>
																																																																								<class name="AdditionalLocalVariable">
																																																																									<EOperation name="getArrayDimension" type="ELong">
																																																																										<EAnnotation source="http://www.eclipse.org/emf/2002/GenModel">
																																																																											<EStringToStringMapEntry key="body" value="long size = this .getArrayDimensionsBefore ( ) .size ( ) + this .getArrayDimensionsAfter ( ) .size ( ) ; 
																																																																											return size ; 
																																																																											"/>
																																																																											<EStringToStringMapEntry key="documentation" value=""/>
																																																																										</EAnnotation>
																																																																									</EOperation>
																																																																								</class>
																																																																							</package>
																																																																							<package name="simTL" nsURI="http://www.emftext.org/simTL4J/simTL" nsPrefix="simTL">
																																																																								<class name="TIf" abstract="true">
																																																																									<EAnnotation source="template_class"/>
																																																																									<EAnnotation source="template_if"/>
																																																																									<ref name="condition" lowerBound="1" containment="true" type="TAbstractMethodStatement"/>
																																																																								</class>
																																																																								<class name="TFor" abstract="true">
																																																																									<EAnnotation source="template_class"/>
																																																																									<EAnnotation source="template_forLoop"/>
																																																																									<ref name="count" lowerBound="1" containment="true" type="TForVariable"/>
																																																																								</class>
																																																																								<class name="TForVariable">
																																																																									<EAnnotation source="template_class"/>
																																																																									<attr name="name" lowerBound="1" type="//EString"/>
																																																																									<ref name="setToBeIterated" lowerBound="1" containment="true" type="TAbstractMethodStatement"/>
																																																																								</class>
																																																																								<class name="Template">
																																																																									<EAnnotation source="template_class">
																																																																										<EStringToStringMapEntry key="objectLanguage" value="http://www.emftext.org/java/"/>
																																																																										<EStringToStringMapEntry key="objectLanguageFactory" value="org.emftext.language.java.resource.java.mopp.JavaResourceFactory"/>
																																																																										<EStringToStringMapEntry key="objectLanguageExtension" value="java"/>
																																																																									</EAnnotation>
																																																																									<ref name="templateHeader" containment="true" type="TemplateHeader"/>
																																																																									<ref name="class" lowerBound="1" containment="true" type="JavaRoot"/>
																																																																								</class>
																																																																								<class name="TemplateHeader">
																																																																									<EAnnotation source="template_class"/>
																																																																									<ref name="modelImports" upperBound="-1" containment="true" type="TModelImport"/>
																																																																								</class>
																																																																								<class name="TModelImport">
																																																																									<EAnnotation source="template_class"/>
																																																																									<attr name="name" lowerBound="1" type="//EString"/>
																																																																									<attr name="uri" lowerBound="1" defaultValueLiteral="" type="//EString"/>
																																																																								</class>
																																																																								<class name="TMethodCall">
																																																																									<EAnnotation source="template_class"/>
																																																																									<attr name="methodName" lowerBound="1" type="//EString"/>
																																																																									<attr name="params" upperBound="-1" type="//EString"/>
																																																																								</class>
																																																																								<class name="TAbstractMethodStatement">
																																																																									<EAnnotation source="template_class"/>
																																																																								</class>
																																																																								<class name="TFor_MemberContainer">
																																																																									<EAnnotation source="template_class"/>
																																																																								</class>
																																																																								<class name="TFor_StatementListContainer">
																																																																									<EAnnotation source="template_class"/>
																																																																								</class>
																																																																								<class name="TIf_MemberContainer">
																																																																									<EAnnotation source="template_class"/>
																																																																								</class>
																																																																								<class name="TIf_StatementListContainer">
																																																																									<EAnnotation source="template_class"/>
																																																																								</class>
																																																																								<class name="TPlaceholder">
																																																																									<EAnnotation source="template_class"/>
																																																																									<EAnnotation source="template_PH"/>
																																																																									<ref name="methodStatement" lowerBound="1" containment="true" type="TAbstractMethodStatement"/>
																																																																								</class>
																																																																								<class name="TPlaceholder_PrimaryExpression">
																																																																									<EAnnotation source="template_class"/>
																																																																								</class>
																																																																								<class name="TUnaryOperator" abstract="true">
																																																																									<EAnnotation source="template_class"/>
																																																																									<ref name="methodStatement" lowerBound="1" containment="true" type="TAbstractMethodStatement"/>
																																																																								</class>
																																																																								<class name="TUnaryOperatorNOT">
																																																																									<EAnnotation source="template_class"/>
																																																																								</class>
																																																																								<class name="TMethodStatementImpl">
																																																																									<EAnnotation source="template_class"/>
																																																																									<attr name="caller" lowerBound="1" type="//EString"/>
																																																																									<ref name="callee" lowerBound="1" upperBound="-1" containment="true" type="TMethodCall"/>
																																																																								</class>
																																																																							</package>
																																																																						</package>
