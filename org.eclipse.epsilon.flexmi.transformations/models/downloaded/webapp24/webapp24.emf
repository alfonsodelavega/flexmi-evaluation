@namespace(uri="http://www.eclipse.org/MoDisco/Javaee/web-app_2_4.xsd", prefix="webapp24")
package webapp24;

import "http://www.eclipse.org/emf/2003/XMLType";
import "platform:/plugin/org.eclipse.emf.ecore/model/XMLNamespace.ecore";

@GenModel(documentation="

	The auth-constraintType indicates the user roles that
	should be permitted access to this resource
	collection. The role-name used here must either correspond
	to the role-name of one of the security-role elements
	defined for this web application, or be the specially
	reserved role-name \"*\" that is a compact syntax for
	indicating all roles in the web application. If both \"*\"
	and rolenames appear, the container interprets this as all
	roles.  If no roles are defined, no user is allowed access
	to the portion of the web application described by the
	containing security-constraint.  The container matches
	role names case sensitively when determining access.

      ")
@ExtendedMetaData(name="auth-constraintType", kind="elementOnly")
class AuthConstraintType {

	@ExtendedMetaData(kind="element", name="description", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val DescriptionType[*] description;

	@ExtendedMetaData(kind="element", name="role-name", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val RoleNameType[*] roleName;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="

	The auth-methodType is used to configure the authentication
	mechanism for the web application. As a prerequisite to
	gaining access to any web resources which are protected by
	an authorization constraint, a user must have authenticated
	using the configured mechanism. Legal values are \"BASIC\",
	\"DIGEST\", \"FORM\", \"CLIENT-CERT\", or a vendor-specific
	authentication scheme.

	Used in: login-config

      ")
@ExtendedMetaData(name="auth-methodType", kind="simple")
class AuthMethodType extends String {
}

@ExtendedMetaData(name="auth-methodType_._base", baseType="http://www.eclipse.org/emf/2003/XMLType#token")
datatype AuthMethodTypeBase : java.lang.String;

@GenModel(documentation="

	The description type is used by a description element to
	provide text describing the parent element.  The elements
	that use this type should include any information that the
	Deployment Component's Deployment File file producer wants
	to provide to the consumer of the Deployment Component's
	Deployment File (i.e., to the Deployer). Typically, the
	tools used by such a Deployment File consumer will display
	the description when processing the parent element that
	contains the description.

	The lang attribute defines the language that the
	description is provided in. The default value is \"en\" (English).

      ")
@ExtendedMetaData(name="descriptionType", kind="simple")
class DescriptionType extends XsdStringType {

	@GenModel(documentation="
    <div xmlns=\"http://www.w3.org/1999/xhtml\">
     
      <h3>lang (as an attribute name)</h3>
      <p>
       denotes an attribute whose value
       is a language code for the natural language of the content of
       any element; its value is inherited.  This name is reserved
       by virtue of its definition in the XML specification.</p>
     
    </div>
    <div xmlns=\"http://www.w3.org/1999/xhtml\">
     <h4>Notes</h4>
     <p>
      Attempting to install the relevant ISO 2- and 3-letter
      codes as the enumerated possible values is probably never
      going to be a realistic possibility.  
     </p>
     <p>
      See BCP 47 at <a href=\"http://www.rfc-editor.org/rfc/bcp/bcp47.txt\">
       http://www.rfc-editor.org/rfc/bcp/bcp47.txt</a>
      and the IANA language subtag registry at
      <a href=\"http://www.iana.org/assignments/language-subtag-registry\">
       http://www.iana.org/assignments/language-subtag-registry</a>
      for further information.
     </p>
     <p>
      The union allows for the 'un-declaration' of xml:lang with
      the empty string.
     </p>
    </div>
   ")
	@ExtendedMetaData(kind="attribute", name="lang", namespace="http://www.w3.org/XML/1998/namespace")
	attr namespace.LangType lang;
}

@GenModel(documentation="

	This type defines a dewey decimal which is used
	to describe versions of documents.

      ")
@ExtendedMetaData(name="dewey-versionType", baseType="http://www.eclipse.org/emf/2003/XMLType#decimal", whiteSpace="collapse")
datatype DeweyVersionType : java.math.BigDecimal;

@GenModel(documentation="

	The dispatcher has four legal values: FORWARD, REQUEST, INCLUDE,
	and ERROR. A value of FORWARD means the Filter will be applied
	under RequestDispatcher.forward() calls.  A value of REQUEST
	means the Filter will be applied under ordinary client calls to
	the path or servlet. A value of INCLUDE means the Filter will be
	applied under RequestDispatcher.include() calls.  A value of
	ERROR means the Filter will be applied under the error page
	mechanism.  The absence of any dispatcher elements in a
	filter-mapping indicates a default of applying filters only under
	ordinary client calls to the path or servlet.

      ")
@ExtendedMetaData(name="dispatcherType", kind="simple")
class DispatcherType extends String {
}

@ExtendedMetaData(name="dispatcherType_._base")
enum DispatcherTypeBase {
	FORWARD = 0;
	INCLUDE = 1;
	REQUEST = 2;
	ERROR = 3;
}

@ExtendedMetaData(name="dispatcherType_._base:Object", baseType="dispatcherType_._base")
datatype DispatcherTypeBaseObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
	<![CDATA[

	  The display-name type contains a short name that is intended
	  to be displayed by tools. It is used by display-name
	  elements.  The display name need not be unique.

	  Example:

	  ...
	     <display-name xml:lang=\"en\">Employee Self Service</display-name>

	  The value of the xml:lang attribute is \"en\" (English) by default.

	  ]]>
      ")
@ExtendedMetaData(name="display-nameType", kind="simple")
class DisplayNameType extends String {

	@GenModel(documentation="
    <div xmlns=\"http://www.w3.org/1999/xhtml\">
     
      <h3>lang (as an attribute name)</h3>
      <p>
       denotes an attribute whose value
       is a language code for the natural language of the content of
       any element; its value is inherited.  This name is reserved
       by virtue of its definition in the XML specification.</p>
     
    </div>
    <div xmlns=\"http://www.w3.org/1999/xhtml\">
     <h4>Notes</h4>
     <p>
      Attempting to install the relevant ISO 2- and 3-letter
      codes as the enumerated possible values is probably never
      going to be a realistic possibility.  
     </p>
     <p>
      See BCP 47 at <a href=\"http://www.rfc-editor.org/rfc/bcp/bcp47.txt\">
       http://www.rfc-editor.org/rfc/bcp/bcp47.txt</a>
      and the IANA language subtag registry at
      <a href=\"http://www.iana.org/assignments/language-subtag-registry\">
       http://www.iana.org/assignments/language-subtag-registry</a>
      for further information.
     </p>
     <p>
      The union allows for the 'un-declaration' of xml:lang with
      the empty string.
     </p>
    </div>
   ")
	@ExtendedMetaData(kind="attribute", name="lang", namespace="http://www.w3.org/XML/1998/namespace")
	attr namespace.LangType lang;
}

@ExtendedMetaData(name="", kind="mixed")
class DocumentRoot {

	@ExtendedMetaData(kind="elementWildcard", name=":mixed")
	!unique attr ecore.EFeatureMapEntry[*] mixed;

	@ExtendedMetaData(kind="attribute", name="xmlns:prefix")
	transient !resolve val ecore.EStringToStringMapEntry[*] xMLNSPrefixMap;

	@ExtendedMetaData(kind="attribute", name="xsi:schemaLocation")
	transient !resolve val ecore.EStringToStringMapEntry[*] xSISchemaLocation;

	@GenModel(documentation="

	The web-app element is the root of the deployment
	descriptor for a web application.  Note that the sub-elements
	of this element can be in the arbitrary order. Because of
	that, the multiplicity of the elements of distributable,
	session-config, welcome-file-list, jsp-config, login-config,
	and locale-encoding-mapping-list was changed from \"?\" to \"*\"
	in this schema.  However, the deployment descriptor instance
	file must not contain multiple elements of session-config,
	jsp-config, and login-config. When there are multiple elements of
	welcome-file-list or locale-encoding-mapping-list, the container
	must concatinate the element contents.  The multiple occurance
	of the element distributable is redundant and the container
	treats that case exactly in the same way when there is only
	one distributable.

      ")
	@ExtendedMetaData(kind="element", name="web-app", namespace="http://java.sun.com/xml/ns/j2ee")
	volatile transient derived !resolve val WebAppType[0..?] webApp;
}

@GenModel(documentation="
	<![CDATA[

	  The ejb-linkType is used by ejb-link
	  elements in the ejb-ref or ejb-local-ref elements to specify
	  that an EJB reference is linked to enterprise bean.

	  The value of the ejb-link element must be the ejb-name of an
	  enterprise bean in the same ejb-jar file or in another ejb-jar
	  file in the same J2EE application unit.

	  Alternatively, the name in the ejb-link element may be
	  composed of a path name specifying the ejb-jar containing the
	  referenced enterprise bean with the ejb-name of the target
	  bean appended and separated from the path name by \"#\".  The
	  path name is relative to the Deployment File containing
	  Deployment Component that is referencing the enterprise
	  bean.  This allows multiple enterprise beans with the same
	  ejb-name to be uniquely identified.

	  Examples:

	      <ejb-link>EmployeeRecord</ejb-link>

	      <ejb-link>../products/product.jar#ProductEJB</ejb-link>

	  ]]>
      ")
@ExtendedMetaData(name="ejb-linkType", kind="simple")
class EjbLinkType extends String {
}

@ExtendedMetaData(name="ejb-linkType_._base", baseType="http://www.eclipse.org/emf/2003/XMLType#token")
datatype EjbLinkTypeBase : java.lang.String;

@GenModel(documentation="

	The ejb-local-refType is used by ejb-local-ref elements for
	the declaration of a reference to an enterprise bean's local
	home. The declaration consists of:

	    - an optional description
	    - the EJB reference name used in the code of the Deployment
	      Component that's referencing the enterprise bean
	    - the expected type of the referenced enterprise bean
	    - the expected local home and local interfaces of the
	      referenced enterprise bean
	    - optional ejb-link information, used to specify the
	      referenced enterprise bean

      ")
@ExtendedMetaData(name="ejb-local-refType", kind="elementOnly")
class EjbLocalRefType {

	@ExtendedMetaData(kind="element", name="description", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val DescriptionType[*] description;

	@ExtendedMetaData(kind="element", name="ejb-ref-name", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val EjbRefNameType[1] ejbRefName;

	@ExtendedMetaData(kind="element", name="ejb-ref-type", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val EjbRefTypeType[1] ejbRefType;

	@ExtendedMetaData(kind="element", name="local-home", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val LocalHomeType[1] localHome;

	@ExtendedMetaData(kind="element", name="local", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val LocalType[1] local;

	@ExtendedMetaData(kind="element", name="ejb-link", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val EjbLinkType ejbLink;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="
	<![CDATA[

	  The ejb-ref-name element contains the name of an EJB
	  reference. The EJB reference is an entry in the
	  Deployment Component's environment and is relative to the
	  java:comp/env context.  The name must be unique within the
	  Deployment Component.

	  It is recommended that name is prefixed with \"ejb/\".

	  Example:

	  <ejb-ref-name>ejb/Payroll</ejb-ref-name>

	  ]]>
      ")
@ExtendedMetaData(name="ejb-ref-nameType", kind="simple")
class EjbRefNameType extends JndiNameType {
}

@ExtendedMetaData(name="ejb-ref-nameType_._base")
datatype EjbRefNameTypeBase : java.lang.String;

@GenModel(documentation="

	The ejb-refType is used by ejb-ref elements for the
	declaration of a reference to an enterprise bean's home. The
	declaration consists of:

	    - an optional description
	    - the EJB reference name used in the code of
	      the Deployment Component that's referencing the enterprise
	      bean
	    - the expected type of the referenced enterprise bean
	    - the expected home and remote interfaces of the referenced
	      enterprise bean
	    - optional ejb-link information, used to specify the
	      referenced enterprise bean

      ")
@ExtendedMetaData(name="ejb-refType", kind="elementOnly")
class EjbRefType {

	@ExtendedMetaData(kind="element", name="description", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val DescriptionType[*] description;

	@ExtendedMetaData(kind="element", name="ejb-ref-name", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val EjbRefNameType[1] ejbRefName;

	@ExtendedMetaData(kind="element", name="ejb-ref-type", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val EjbRefTypeType[1] ejbRefType;

	@ExtendedMetaData(kind="element", name="home", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val HomeType[1] home;

	@ExtendedMetaData(kind="element", name="remote", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val RemoteType[1] remote;

	@ExtendedMetaData(kind="element", name="ejb-link", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val EjbLinkType ejbLink;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="

	The ejb-ref-typeType contains the expected type of the
	referenced enterprise bean.

	The ejb-ref-type designates a value
	that must be one of the following:

	    Entity
	    Session

      ")
@ExtendedMetaData(name="ejb-ref-typeType", kind="simple")
class EjbRefTypeType extends String {
}

@ExtendedMetaData(name="ejb-ref-typeType_._base")
enum EjbRefTypeTypeBase {
	Entity = 0;
	Session = 1;
}

@ExtendedMetaData(name="ejb-ref-typeType_._base:Object", baseType="ejb-ref-typeType_._base")
datatype EjbRefTypeTypeBaseObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="

	This type is used to designate an empty
	element when used.

      ")
@ExtendedMetaData(name="emptyType", kind="empty")
class EmptyType {

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="

	The encodingType defines IANA character sets.

      ")
@ExtendedMetaData(name="encodingType", baseType="http://www.eclipse.org/emf/2003/XMLType#string", pattern="[^\s]+")
datatype EncodingType : java.lang.String;

@GenModel(documentation="

	The env-entryType is used to declare an application's
	environment entry. The declaration consists of an optional
	description, the name of the environment entry, and an
	optional value.  If a value is not specified, one must be
	supplied during deployment.

	It is used by env-entry elements.

      ")
@ExtendedMetaData(name="env-entryType", kind="elementOnly")
class EnvEntryType {

	@ExtendedMetaData(kind="element", name="description", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val DescriptionType[*] description;

	@GenModel(documentation="
	    <![CDATA[

	      The env-entry-name element contains the name of a
	      Deployment Component's environment entry.  The name
	      is a JNDI name relative to the java:comp/env
	      context.  The name must be unique within a
	      Deployment Component. The uniqueness
	      constraints must be defined within the declared
	      context.

	      Example:

	      <env-entry-name>minAmount</env-entry-name>

	      ]]>
	  ")
	@ExtendedMetaData(kind="element", name="env-entry-name", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val JndiNameType[1] envEntryName;

	@ExtendedMetaData(kind="element", name="env-entry-type", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val EnvEntryTypeValuesType[1] envEntryType;

	@GenModel(documentation="
	    <![CDATA[

	      The env-entry-value designates the value of a
	      Deployment Component's environment entry. The value
	      must be a String that is valid for the
	      constructor of the specified type that takes a
	      single String parameter, or for java.lang.Character,
	      a single character.

	      Example:

	      <env-entry-value>100.00</env-entry-value>

	      ]]>
	  ")
	@ExtendedMetaData(kind="element", name="env-entry-value", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val XsdStringType envEntryValue;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="
	<![CDATA[

	  This type contains the fully-qualified Java type of the
	  environment entry value that is expected by the
	  application's code.

	  The following are the legal values of env-entry-type-valuesType:

	      java.lang.Boolean
	      java.lang.Byte
	      java.lang.Character
	      java.lang.String
	      java.lang.Short
	      java.lang.Integer
	      java.lang.Long
	      java.lang.Float
	      java.lang.Double

	  Example:

	  <env-entry-type>java.lang.Boolean</env-entry-type>

	  ]]>
      ")
@ExtendedMetaData(name="env-entry-type-valuesType", kind="simple")
class EnvEntryTypeValuesType extends String {
}

@ExtendedMetaData(name="env-entry-type-valuesType_._base")
enum EnvEntryTypeValuesTypeBase {
	javaLangBoolean = 0;
	javaLangByte = 1;
	javaLangCharacter = 2;
	javaLangString = 3;
	javaLangShort = 4;
	javaLangInteger = 5;
	javaLangLong = 6;
	javaLangFloat = 7;
	javaLangDouble = 8;
}

@ExtendedMetaData(name="env-entry-type-valuesType_._base:Object", baseType="env-entry-type-valuesType_._base")
datatype EnvEntryTypeValuesTypeBaseObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="

	The error-code contains an HTTP error code, ex: 404

	Used in: error-page

      ")
@ExtendedMetaData(name="error-codeType", kind="simple")
class ErrorCodeType extends XsdPositiveIntegerType {
}

@ExtendedMetaData(name="error-codeType_._base", baseType="http://www.eclipse.org/emf/2003/XMLType#positiveInteger", pattern="\d{3}")
datatype ErrorCodeTypeBase : java.math.BigInteger;

@GenModel(documentation="

	The error-pageType contains a mapping between an error code
	or exception type to the path of a resource in the web
	application.

	Used in: web-app

      ")
@ExtendedMetaData(name="error-pageType", kind="elementOnly")
class ErrorPageType {

	@ExtendedMetaData(kind="element", name="error-code", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val ErrorCodeType errorCode;

	@GenModel(documentation="

	      The exception-type contains a fully qualified class
	      name of a Java exception type.

	    ")
	@ExtendedMetaData(kind="element", name="exception-type", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val FullyQualifiedClassType exceptionType;

	@GenModel(documentation="

	    The location element contains the location of the
	    resource in the web application relative to the root of
	    the web application. The value of the location must have
	    a leading `/'.

	  ")
	@ExtendedMetaData(kind="element", name="location", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val WarPathType[1] location;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="

	Declaration of the filter mappings in this web
	application is done by using filter-mappingType.
	The container uses the filter-mapping
	declarations to decide which filters to apply to a request,
	and in what order. The container matches the request URI to
	a Servlet in the normal way. To determine which filters to
	apply it matches filter-mapping declarations either on
	servlet-name, or on url-pattern for each filter-mapping
	element, depending on which style is used. The order in
	which filters are invoked is the order in which
	filter-mapping declarations that match a request URI for a
	servlet appear in the list of filter-mapping elements.The
	filter-name value must be the value of the filter-name
	sub-elements of one of the filter declarations in the
	deployment descriptor.

      ")
@ExtendedMetaData(name="filter-mappingType", kind="elementOnly")
class FilterMappingType {

	@ExtendedMetaData(kind="element", name="filter-name", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val FilterNameType[1] filterName;

	@ExtendedMetaData(kind="element", name="url-pattern", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val UrlPatternType urlPattern;

	@ExtendedMetaData(kind="element", name="servlet-name", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val ServletNameType servletName;

	@ExtendedMetaData(kind="element", name="dispatcher", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val DispatcherType[0..4] dispatcher;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="

	The logical name of the filter is declare
	by using filter-nameType. This name is used to map the
	filter.  Each filter name is unique within the web
	application.

	Used in: filter, filter-mapping

      ")
@ExtendedMetaData(name="filter-nameType", kind="simple")
class FilterNameType extends NonEmptyStringType {
}

@GenModel(documentation="

	The filterType is used to declare a filter in the web
	application. The filter is mapped to either a servlet or a
	URL pattern in the filter-mapping element, using the
	filter-name value to reference. Filters can access the
	initialization parameters declared in the deployment
	descriptor at runtime via the FilterConfig interface.

	Used in: web-app

      ")
@ExtendedMetaData(name="filterType", kind="elementOnly")
class FilterType {

	@ExtendedMetaData(kind="element", name="description", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val DescriptionType[*] description;

	@ExtendedMetaData(kind="element", name="display-name", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val DisplayNameType[*] displayName;

	@ExtendedMetaData(kind="element", name="icon", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val IconType[*] icon;

	@ExtendedMetaData(kind="element", name="filter-name", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val FilterNameType[1] filterName;

	@GenModel(documentation="

	    The fully qualified classname of the filter.

	  ")
	@ExtendedMetaData(kind="element", name="filter-class", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val FullyQualifiedClassType[1] filterClass;

	@GenModel(documentation="

	    The init-param element contains a name/value pair as
	    an initialization param of a servlet filter

	  ")
	@ExtendedMetaData(kind="element", name="init-param", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val ParamValueType[*] initParam;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="

	The form-login-configType specifies the login and error
	pages that should be used in form based login. If form based
	authentication is not used, these elements are ignored.

	Used in: login-config

      ")
@ExtendedMetaData(name="form-login-configType", kind="elementOnly")
class FormLoginConfigType {

	@GenModel(documentation="

	    The form-login-page element defines the location in the web
	    app where the page that can be used for login can be
	    found.  The path begins with a leading / and is interpreted
	    relative to the root of the WAR.

	  ")
	@ExtendedMetaData(kind="element", name="form-login-page", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val WarPathType[1] formLoginPage;

	@GenModel(documentation="

	    The form-error-page element defines the location in
	    the web app where the error page that is displayed
	    when login is not successful can be found.
	    The path begins with a leading / and is interpreted
	    relative to the root of the WAR.

	  ")
	@ExtendedMetaData(kind="element", name="form-error-page", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val WarPathType[1] formErrorPage;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="

	The elements that use this type designate the name of a
	Java class or interface.  The name is in the form of a
	\"binary name\", as defined in the JLS.  This is the form
	of name used in Class.forName().  Tools that need the
	canonical name (the name used in source code) will need
	to convert this binary name to the canonical name.

      ")
@ExtendedMetaData(name="fully-qualified-classType", kind="simple")
class FullyQualifiedClassType extends String {
}

@ExtendedMetaData(name="fully-qualified-classType_._base", baseType="http://www.eclipse.org/emf/2003/XMLType#token")
datatype FullyQualifiedClassTypeBase : java.lang.String;

@GenModel(documentation="

	This type defines four different values which can designate
	boolean values. This includes values yes and no which are
	not designated by xsd:boolean

      ")
@ExtendedMetaData(name="generic-booleanType", kind="simple")
class GenericBooleanType extends String {
}

@ExtendedMetaData(name="generic-booleanType_._base")
enum GenericBooleanTypeBase {
	~true = 0;
	~false = 1;
	yes = 2;
	no = 3;
}

@ExtendedMetaData(name="generic-booleanType_._base:Object", baseType="generic-booleanType_._base")
datatype GenericBooleanTypeBaseObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
	<![CDATA[

	  The homeType defines the fully-qualified name of
	  an enterprise bean's home interface.

	  Example:

	      <home>com.aardvark.payroll.PayrollHome</home>

	  ]]>
      ")
@ExtendedMetaData(name="homeType", kind="simple")
class HomeType extends FullyQualifiedClassType {
}

@ExtendedMetaData(name="homeType_._base")
datatype HomeTypeBase : java.lang.String;

@GenModel(documentation="

	The http-method contains an HTTP method recognized by the
	web-app, for example GET, POST, ...

      ")
@ExtendedMetaData(name="http-methodType", kind="simple")
class HttpMethodType extends String {
}

@ExtendedMetaData(name="http-methodType_._base")
enum HttpMethodTypeBase {
	GET = 0;
	POST = 1;
	PUT = 2;
	DELETE = 3;
	HEAD = 4;
	OPTIONS = 5;
	TRACE = 6;
}

@ExtendedMetaData(name="http-methodType_._base:Object", baseType="http-methodType_._base")
datatype HttpMethodTypeBaseObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="

	The icon type contains small-icon and large-icon elements
	that specify the file names for small and large GIF or
	JPEG icon images used to represent the parent element in a
	GUI tool.

	The xml:lang attribute defines the language that the
	icon file names are provided in. Its value is \"en\" (English)
	by default.

      ")
@ExtendedMetaData(name="iconType", kind="elementOnly")
class IconType {

	@GenModel(documentation="
	    <![CDATA[

	      The small-icon element contains the name of a file
	      containing a small (16 x 16) icon image. The file
	      name is a relative path within the Deployment
	      Component's Deployment File.

	      The image may be either in the JPEG or GIF format.
	      The icon can be used by tools.

	      Example:

	      <small-icon>employee-service-icon16x16.jpg</small-icon>

	      ]]>
	  ")
	@ExtendedMetaData(kind="element", name="small-icon", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val PathType smallIcon;

	@GenModel(documentation="
	    <![CDATA[

	      The large-icon element contains the name of a file
	      containing a large
	      (32 x 32) icon image. The file name is a relative
	      path within the Deployment Component's Deployment
	      File.

	      The image may be either in the JPEG or GIF format.
	      The icon can be used by tools.

	      Example:

	      <large-icon>employee-service-icon32x32.jpg</large-icon>

	      ]]>
	  ")
	@ExtendedMetaData(kind="element", name="large-icon", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val PathType largeIcon;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;

	@GenModel(documentation="
    <div xmlns=\"http://www.w3.org/1999/xhtml\">
     
      <h3>lang (as an attribute name)</h3>
      <p>
       denotes an attribute whose value
       is a language code for the natural language of the content of
       any element; its value is inherited.  This name is reserved
       by virtue of its definition in the XML specification.</p>
     
    </div>
    <div xmlns=\"http://www.w3.org/1999/xhtml\">
     <h4>Notes</h4>
     <p>
      Attempting to install the relevant ISO 2- and 3-letter
      codes as the enumerated possible values is probably never
      going to be a realistic possibility.  
     </p>
     <p>
      See BCP 47 at <a href=\"http://www.rfc-editor.org/rfc/bcp/bcp47.txt\">
       http://www.rfc-editor.org/rfc/bcp/bcp47.txt</a>
      and the IANA language subtag registry at
      <a href=\"http://www.iana.org/assignments/language-subtag-registry\">
       http://www.iana.org/assignments/language-subtag-registry</a>
      for further information.
     </p>
     <p>
      The union allows for the 'un-declaration' of xml:lang with
      the empty string.
     </p>
    </div>
   ")
	@ExtendedMetaData(kind="attribute", name="lang", namespace="http://www.w3.org/XML/1998/namespace")
	attr namespace.LangType lang;
}

@GenModel(documentation="

	The java-identifierType defines a Java identifier.
	The users of this type should further verify that
	the content does not contain Java reserved keywords.

      ")
@ExtendedMetaData(name="java-identifierType", kind="simple")
class JavaIdentifierType extends String {
}

@ExtendedMetaData(name="java-identifierType_._base", baseType="http://www.eclipse.org/emf/2003/XMLType#token", pattern="($|_|\p{L})(\p{L}|\p{Nd}|_|$)*")
datatype JavaIdentifierTypeBase : java.lang.String;

@GenModel(documentation="

	This is a generic type that designates a Java primitive
	type or a fully qualified name of a Java interface/type,
	or an array of such types.

      ")
@ExtendedMetaData(name="java-typeType", kind="simple")
class JavaTypeType extends String {
}

@ExtendedMetaData(name="java-typeType_._base", baseType="http://www.eclipse.org/emf/2003/XMLType#token", pattern="[^\p{Z}]*")
datatype JavaTypeTypeBase : java.lang.String;

@GenModel(documentation="

	The jndi-nameType type designates a JNDI name in the
	Deployment Component's environment and is relative to the
	java:comp/env context.  A JNDI name must be unique within the
	Deployment Component.

      ")
@ExtendedMetaData(name="jndi-nameType", kind="simple")
class JndiNameType extends String {
}

@ExtendedMetaData(name="jndi-nameType_._base", baseType="http://www.eclipse.org/emf/2003/XMLType#token")
datatype JndiNameTypeBase : java.lang.String;

@GenModel(documentation="

	The jsp-configType is used to provide global configuration
	information for the JSP files in a web application. It has
	two subelements, taglib and jsp-property-group.

      ")
@ExtendedMetaData(name="jsp-configType", kind="elementOnly")
class JspConfigType {

	@ExtendedMetaData(kind="element", name="taglib", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val TaglibType[*] taglib;

	@ExtendedMetaData(kind="element", name="jsp-property-group", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val JspPropertyGroupType[*] jspPropertyGroup;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="

	The jsp-file element contains the full path to a JSP file
	within the web application beginning with a `/'.

      ")
@ExtendedMetaData(name="jsp-fileType", kind="simple")
class JspFileType extends PathType {
}

@ExtendedMetaData(name="jsp-fileType_._base")
datatype JspFileTypeBase : java.lang.String;

@GenModel(documentation="

	The jsp-property-groupType is used to group a number of
	files so they can be given global property information.
	All files so described are deemed to be JSP files.  The
	following additional properties can be described:

	    - Control whether EL is ignored
	    - Control whether scripting elements are invalid
	    - Indicate pageEncoding information.
	    - Indicate that a resource is a JSP document (XML)
	    - Prelude and Coda automatic includes.

      ")
@ExtendedMetaData(name="jsp-property-groupType", kind="elementOnly")
class JspPropertyGroupType {

	@ExtendedMetaData(kind="element", name="description", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val DescriptionType[*] description;

	@ExtendedMetaData(kind="element", name="display-name", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val DisplayNameType[*] displayName;

	@ExtendedMetaData(kind="element", name="icon", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val IconType[*] icon;

	@ExtendedMetaData(kind="element", name="url-pattern", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val UrlPatternType[+] urlPattern;

	@GenModel(documentation="

	    Can be used to easily set the isELIgnored
	    property of a group of JSP pages.  By default, the
	    EL evaluation is enabled for Web Applications using
	    a Servlet 2.4 or greater web.xml, and disabled
	    otherwise.

	  ")
	@ExtendedMetaData(kind="element", name="el-ignored", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val TrueFalseType elIgnored;

	@GenModel(documentation="

	    The valid values of page-encoding are those of the
	    pageEncoding page directive.  It is a
	    translation-time error to name different encodings
	    in the pageEncoding attribute of the page directive
	    of a JSP page and in a JSP configuration element
	    matching the page.  It is also a translation-time
	    error to name different encodings in the prolog
	    or text declaration of a document in XML syntax and
	    in a JSP configuration element matching the document.
	    It is legal to name the same encoding through
	    mulitple mechanisms.

	  ")
	@ExtendedMetaData(kind="element", name="page-encoding", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val String pageEncoding;

	@GenModel(documentation="

	    Can be used to easily disable scripting in a
	    group of JSP pages.  By default, scripting is
	    enabled.

	  ")
	@ExtendedMetaData(kind="element", name="scripting-invalid", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val TrueFalseType scriptingInvalid;

	@GenModel(documentation="

	    If true, denotes that the group of resources
	    that match the URL pattern are JSP documents,
	    and thus must be interpreted as XML documents.
	    If false, the resources are assumed to not
	    be JSP documents, unless there is another
	    property group that indicates otherwise.

	  ")
	@ExtendedMetaData(kind="element", name="is-xml", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val TrueFalseType isXml;

	@GenModel(documentation="

	    The include-prelude element is a context-relative
	    path that must correspond to an element in the
	    Web Application.  When the element is present,
	    the given path will be automatically included (as
	    in an include directive) at the beginning of each
	    JSP page in this jsp-property-group.

	  ")
	@ExtendedMetaData(kind="element", name="include-prelude", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val PathType[*] includePrelude;

	@GenModel(documentation="

	    The include-coda element is a context-relative
	    path that must correspond to an element in the
	    Web Application.  When the element is present,
	    the given path will be automatically included (as
	    in an include directive) at the end of each
	    JSP page in this jsp-property-group.

	  ")
	@ExtendedMetaData(kind="element", name="include-coda", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val PathType[*] includeCoda;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="

	The listenerType indicates the deployment properties for a web
	application listener bean.

      ")
@ExtendedMetaData(name="listenerType", kind="elementOnly")
class ListenerType {

	@ExtendedMetaData(kind="element", name="description", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val DescriptionType[*] description;

	@ExtendedMetaData(kind="element", name="display-name", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val DisplayNameType[*] displayName;

	@ExtendedMetaData(kind="element", name="icon", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val IconType[*] icon;

	@GenModel(documentation="

	    The listener-class element declares a class in the
	    application must be registered as a web
	    application listener bean. The value is the fully
	    qualified classname of the listener class.

	  ")
	@ExtendedMetaData(kind="element", name="listener-class", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val FullyQualifiedClassType[1] listenerClass;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="

	The locale-encoding-mapping-list contains one or more
	locale-encoding-mapping(s).

      ")
@ExtendedMetaData(name="locale-encoding-mapping-listType", kind="elementOnly")
class LocaleEncodingMappingListType {

	@ExtendedMetaData(kind="element", name="locale-encoding-mapping", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val LocaleEncodingMappingType[+] localeEncodingMapping;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="

	The locale-encoding-mapping contains locale name and
	encoding name. The locale name must be either \"Language-code\",
	such as \"ja\", defined by ISO-639 or \"Language-code_Country-code\",
	such as \"ja_JP\".  \"Country code\" is defined by ISO-3166.

      ")
@ExtendedMetaData(name="locale-encoding-mappingType", kind="elementOnly")
class LocaleEncodingMappingType {

	@ExtendedMetaData(kind="element", name="locale", namespace="http://java.sun.com/xml/ns/j2ee")
	attr LocaleType[1] locale;

	@ExtendedMetaData(kind="element", name="encoding", namespace="http://java.sun.com/xml/ns/j2ee")
	attr EncodingType[1] encoding;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="

	The localeType defines valid locale defined by ISO-639-1
	and ISO-3166.

      ")
@ExtendedMetaData(name="localeType", baseType="http://www.eclipse.org/emf/2003/XMLType#string", pattern="[a-z]{2}(_|-)?([\p{L}\-\p{Nd}]{2})?")
datatype LocaleType : java.lang.String;

@GenModel(documentation="

	The local-homeType defines the fully-qualified
	name of an enterprise bean's local home interface.

      ")
@ExtendedMetaData(name="local-homeType", kind="simple")
class LocalHomeType extends FullyQualifiedClassType {
}

@ExtendedMetaData(name="local-homeType_._base")
datatype LocalHomeTypeBase : java.lang.String;

@GenModel(documentation="

	The localType defines the fully-qualified name of an
	enterprise bean's local interface.

      ")
@ExtendedMetaData(name="localType", kind="simple")
class LocalType extends FullyQualifiedClassType {
}

@ExtendedMetaData(name="localType_._base")
datatype LocalTypeBase : java.lang.String;

@GenModel(documentation="

	The login-configType is used to configure the authentication
	method that should be used, the realm name that should be
	used for this application, and the attributes that are
	needed by the form login mechanism.

	Used in: web-app

      ")
@ExtendedMetaData(name="login-configType", kind="elementOnly")
class LoginConfigType {

	@ExtendedMetaData(kind="element", name="auth-method", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val AuthMethodType authMethod;

	@GenModel(documentation="

	    The realm name element specifies the realm name to
	    use in HTTP Basic authorization.

	  ")
	@ExtendedMetaData(kind="element", name="realm-name", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val String realmName;

	@ExtendedMetaData(kind="element", name="form-login-config", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val FormLoginConfigType formLoginConfig;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="

	The message-destination-linkType is used to link a message
	destination reference or message-driven bean to a message
	destination.

	The Assembler sets the value to reflect the flow of messages
	between producers and consumers in the application.

	The value must be the message-destination-name of a message
	destination in the same Deployment File or in another
	Deployment File in the same J2EE application unit.

	Alternatively, the value may be composed of a path name
	specifying a Deployment File containing the referenced
	message destination with the message-destination-name of the
	destination appended and separated from the path name by
	\"#\". The path name is relative to the Deployment File
	containing Deployment Component that is referencing the
	message destination.  This allows multiple message
	destinations with the same name to be uniquely identified.

      ")
@ExtendedMetaData(name="message-destination-linkType", kind="simple")
class MessageDestinationLinkType extends String {
}

@ExtendedMetaData(name="message-destination-linkType_._base", baseType="http://www.eclipse.org/emf/2003/XMLType#token")
datatype MessageDestinationLinkTypeBase : java.lang.String;

@GenModel(documentation="
	<![CDATA[

	  The message-destination-ref element contains a declaration
	  of Deployment Component's reference to a message destination
	  associated with a resource in Deployment Component's
	  environment. It consists of:

		  - an optional description
		  - the message destination reference name
		  - the message destination type
		  - a specification as to whether the
		    destination is used for
		    consuming or producing messages, or both
		  - a link to the message destination

	  Examples:

	  <message-destination-ref>
		  <message-destination-ref-name>jms/StockQueue
		  </message-destination-ref-name>
		  <message-destination-type>javax.jms.Queue
		  </message-destination-type>
		  <message-destination-usage>Consumes
		  </message-destination-usage>
		  <message-destination-link>CorporateStocks
		  </message-destination-link>
	  </message-destination-ref>

	  ]]>
      ")
@ExtendedMetaData(name="message-destination-refType", kind="elementOnly")
class MessageDestinationRefType {

	@ExtendedMetaData(kind="element", name="description", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val DescriptionType[*] description;

	@GenModel(documentation="

	    The message-destination-ref-name element specifies
	    the name of a message destination reference; its
	    value is the environment entry name used in
	    Deployment Component code.  The name is a JNDI name
	    relative to the java:comp/env context and must be
	    unique within an ejb-jar (for enterprise beans) or a
	    Deployment File (for others).

	  ")
	@ExtendedMetaData(kind="element", name="message-destination-ref-name", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val JndiNameType[1] messageDestinationRefName;

	@ExtendedMetaData(kind="element", name="message-destination-type", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val MessageDestinationTypeType[1] messageDestinationType;

	@ExtendedMetaData(kind="element", name="message-destination-usage", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val MessageDestinationUsageType[1] messageDestinationUsage;

	@ExtendedMetaData(kind="element", name="message-destination-link", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val MessageDestinationLinkType messageDestinationLink;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="
	<![CDATA[

	  The message-destinationType specifies a message
	  destination. The logical destination described by this
	  element is mapped to a physical destination by the Deployer.

	  The message destination element contains:

		  - an optional description
		  - an optional display-name
		  - an optional icon
		  - a message destination name which must be unique
		    among message destination names within the same
		    Deployment File.

	  Example:

	  <message-destination>
		  <message-destination-name>CorporateStocks
		  </message-destination-name>
	  </message-destination>

	  ]]>
      ")
@ExtendedMetaData(name="message-destinationType", kind="elementOnly")
class MessageDestinationType {

	@ExtendedMetaData(kind="element", name="description", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val DescriptionType[*] description;

	@ExtendedMetaData(kind="element", name="display-name", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val DisplayNameType[*] displayName;

	@ExtendedMetaData(kind="element", name="icon", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val IconType[*] icon;

	@GenModel(documentation="

	    The message-destination-name element specifies a
	    name for a message destination.  This name must be
	    unique among the names of message destinations
	    within the Deployment File.

	  ")
	@ExtendedMetaData(kind="element", name="message-destination-name", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val String[1] messageDestinationName;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="
	<![CDATA[

	  The message-destination-typeType specifies the type of
	  the destination. The type is specified by the Java interface
	  expected to be implemented by the destination.

	  Example:

	    <message-destination-type>javax.jms.Queue
	    </message-destination-type>

	  ]]>
      ")
@ExtendedMetaData(name="message-destination-typeType", kind="simple")
class MessageDestinationTypeType extends FullyQualifiedClassType {
}

@ExtendedMetaData(name="message-destination-typeType_._base")
datatype MessageDestinationTypeTypeBase : java.lang.String;

@GenModel(documentation="

	The message-destination-usageType specifies the use of the
	message destination indicated by the reference.  The value
	indicates whether messages are consumed from the message
	destination, produced for the destination, or both.  The
	Assembler makes use of this information in linking producers
	of a destination with its consumers.

	The value of the message-destination-usage element must be
	one of the following:
	    Consumes
	    Produces
	    ConsumesProduces

      ")
@ExtendedMetaData(name="message-destination-usageType", kind="simple")
class MessageDestinationUsageType extends String {
}

@ExtendedMetaData(name="message-destination-usageType_._base")
enum MessageDestinationUsageTypeBase {
	Consumes = 0;
	Produces = 1;
	ConsumesProduces = 2;
}

@ExtendedMetaData(name="message-destination-usageType_._base:Object", baseType="message-destination-usageType_._base")
datatype MessageDestinationUsageTypeBaseObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="

	The mime-mappingType defines a mapping between an extension
	and a mime type.

	Used in: web-app

      ")
@ExtendedMetaData(name="mime-mappingType", kind="elementOnly")
class MimeMappingType {

	@ExtendedMetaData(kind="element", name="extension", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val String[1] extension;

	@ExtendedMetaData(kind="element", name="mime-type", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val MimeTypeType[1] mimeType;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="

	The mime-typeType is used to indicate a defined mime type.

	Example:
	\"text/plain\"

	Used in: mime-mapping

      ")
@ExtendedMetaData(name="mime-typeType", kind="simple")
class MimeTypeType extends String {
}

@ExtendedMetaData(name="mime-typeType_._base", baseType="http://www.eclipse.org/emf/2003/XMLType#token", pattern="[^\p{Cc}^\s]+/[^\p{Cc}^\s]+")
datatype MimeTypeTypeBase : java.lang.String;

@GenModel(documentation="
	This type defines a string which contains at least one
	character.
      ")
@ExtendedMetaData(name="nonEmptyStringType", kind="simple")
class NonEmptyStringType extends String {
}

@ExtendedMetaData(name="nonEmptyStringType_._base", baseType="http://www.eclipse.org/emf/2003/XMLType#token", minLength="1")
datatype NonEmptyStringTypeBase : java.lang.String;

@GenModel(documentation="

	This type is a general type that can be used to declare
	parameter/value lists.

      ")
@ExtendedMetaData(name="param-valueType", kind="elementOnly")
class ParamValueType {

	@ExtendedMetaData(kind="element", name="description", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val DescriptionType[*] description;

	@GenModel(documentation="

	    The param-name element contains the name of a
	    parameter.

	  ")
	@ExtendedMetaData(kind="element", name="param-name", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val String[1] paramName;

	@GenModel(documentation="

	    The param-value element contains the value of a
	    parameter.

	  ")
	@ExtendedMetaData(kind="element", name="param-value", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val XsdStringType[1] paramValue;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="

	The elements that use this type designate either a relative
	path or an absolute path starting with a \"/\".

	In elements that specify a pathname to a file within the
	same Deployment File, relative filenames (i.e., those not
	starting with \"/\") are considered relative to the root of
	the Deployment File's namespace.  Absolute filenames (i.e.,
	those starting with \"/\") also specify names in the root of
	the Deployment File's namespace.  In general, relative names
	are preferred.  The exception is .war files where absolute
	names are preferred for consistency with the Servlet API.

      ")
@ExtendedMetaData(name="pathType", kind="simple")
class PathType extends String {
}

@ExtendedMetaData(name="pathType_._base", baseType="http://www.eclipse.org/emf/2003/XMLType#token")
datatype PathTypeBase : java.lang.String;

@GenModel(documentation="

	The port-component-ref element declares a client dependency
	on the container for resolving a Service Endpoint Interface
	to a WSDL port. It optionally associates the Service Endpoint
	Interface with a particular port-component. This is only used
	by the container for a Service.getPort(Class) method call.

      ")
@ExtendedMetaData(name="port-component-refType", kind="elementOnly")
class PortComponentRefType {

	@GenModel(documentation="

	    The service-endpoint-interface element defines a fully qualified
	    Java class that represents the Service Endpoint Interface of a
	    WSDL port.

	  ")
	@ExtendedMetaData(kind="element", name="service-endpoint-interface", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val FullyQualifiedClassType[1] serviceEndpointInterface;

	@GenModel(documentation="

	    The port-component-link element links a port-component-ref
	    to a specific port-component required to be made available
	    by a service reference.

	    The value of a port-component-link must be the
	    port-component-name of a port-component in the same module
	    or another module in the same application unit. The syntax
	    for specification follows the syntax defined for ejb-link
	    in the EJB 2.0 specification.

	  ")
	@ExtendedMetaData(kind="element", name="port-component-link", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val String portComponentLink;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="
	<![CDATA[

	  The remote element contains the fully-qualified name
	  of the enterprise bean's remote interface.

	  Example:

	      <remote>com.wombat.empl.EmployeeService</remote>

	  ]]>
      ")
@ExtendedMetaData(name="remoteType", kind="simple")
class RemoteType extends FullyQualifiedClassType {
}

@ExtendedMetaData(name="remoteType_._base")
datatype RemoteTypeBase : java.lang.String;

@GenModel(documentation="

	The res-authType specifies whether the Deployment Component
	code signs on programmatically to the resource manager, or
	whether the Container will sign on to the resource manager
	on behalf of the Deployment Component. In the latter case,
	the Container uses information that is supplied by the
	Deployer.

	The value must be one of the two following:

	    Application
	    Container

      ")
@ExtendedMetaData(name="res-authType", kind="simple")
class ResAuthType extends String {
}

@ExtendedMetaData(name="res-authType_._base")
enum ResAuthTypeBase {
	Application = 0;
	Container = 1;
}

@ExtendedMetaData(name="res-authType_._base:Object", baseType="res-authType_._base")
datatype ResAuthTypeBaseObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
	<![CDATA[

	  The resource-env-refType is used to define
	  resource-env-type elements.  It contains a declaration of a
	  Deployment Component's reference to an administered object
	  associated with a resource in the Deployment Component's
	  environment.  It consists of an optional description, the
	  resource environment reference name, and an indication of
	  the resource environment reference type expected by the
	  Deployment Component code.

	  Example:

	  <resource-env-ref>
	      <resource-env-ref-name>jms/StockQueue
	      </resource-env-ref-name>
	      <resource-env-ref-type>javax.jms.Queue
	      </resource-env-ref-type>
	  </resource-env-ref>

	  ]]>
      ")
@ExtendedMetaData(name="resource-env-refType", kind="elementOnly")
class ResourceEnvRefType {

	@ExtendedMetaData(kind="element", name="description", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val DescriptionType[*] description;

	@GenModel(documentation="

	    The resource-env-ref-name element specifies the name
	    of a resource environment reference; its value is
	    the environment entry name used in
	    the Deployment Component code.  The name is a JNDI
	    name relative to the java:comp/env context and must
	    be unique within a Deployment Component.

	  ")
	@ExtendedMetaData(kind="element", name="resource-env-ref-name", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val JndiNameType[1] resourceEnvRefName;

	@GenModel(documentation="

	    The resource-env-ref-type element specifies the type
	    of a resource environment reference.  It is the
	    fully qualified name of a Java language class or
	    interface.

	  ")
	@ExtendedMetaData(kind="element", name="resource-env-ref-type", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val FullyQualifiedClassType[1] resourceEnvRefType;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="
	<![CDATA[

	  The resource-refType contains a declaration of a
	  Deployment Component's reference to an external resource. It
	  consists of an optional description, the resource manager
	  connection factory reference name, the indication of the
	  resource manager connection factory type expected by the
	  Deployment Component code, the type of authentication
	  (Application or Container), and an optional specification of
	  the shareability of connections obtained from the resource
	  (Shareable or Unshareable).

	  Example:

	  <resource-ref>
	      <res-ref-name>jdbc/EmployeeAppDB</res-ref-name>
	      <res-type>javax.sql.DataSource</res-type>
	      <res-auth>Container</res-auth>
	      <res-sharing-scope>Shareable</res-sharing-scope>
	  </resource-ref>

	  ]]>
      ")
@ExtendedMetaData(name="resource-refType", kind="elementOnly")
class ResourceRefType {

	@ExtendedMetaData(kind="element", name="description", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val DescriptionType[*] description;

	@GenModel(documentation="

	    The res-ref-name element specifies the name of a
	    resource manager connection factory reference.
	    The name is a JNDI name relative to the
	    java:comp/env context.
	    The name must be unique within a Deployment File.

	  ")
	@ExtendedMetaData(kind="element", name="res-ref-name", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val JndiNameType[1] resRefName;

	@GenModel(documentation="

	    The res-type element specifies the type of the data
	    source. The type is specified by the fully qualified
	    Java language class or interface
	    expected to be implemented by the data source.

	  ")
	@ExtendedMetaData(kind="element", name="res-type", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val FullyQualifiedClassType[1] resType;

	@ExtendedMetaData(kind="element", name="res-auth", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val ResAuthType[1] resAuth;

	@ExtendedMetaData(kind="element", name="res-sharing-scope", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val ResSharingScopeType resSharingScope;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="

	The res-sharing-scope type specifies whether connections
	obtained through the given resource manager connection
	factory reference can be shared. The value, if specified,
	must be one of the two following:

	    Shareable
	    Unshareable

	The default value is Shareable.

      ")
@ExtendedMetaData(name="res-sharing-scopeType", kind="simple")
class ResSharingScopeType extends String {
}

@ExtendedMetaData(name="res-sharing-scopeType_._base")
enum ResSharingScopeTypeBase {
	Shareable = 0;
	Unshareable = 1;
}

@ExtendedMetaData(name="res-sharing-scopeType_._base:Object", baseType="res-sharing-scopeType_._base")
datatype ResSharingScopeTypeBaseObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="

	The role-nameType designates the name of a security role.

	The name must conform to the lexical rules for a token.

      ")
@ExtendedMetaData(name="role-nameType", kind="simple")
class RoleNameType extends String {
}

@ExtendedMetaData(name="role-nameType_._base", baseType="http://www.eclipse.org/emf/2003/XMLType#token")
datatype RoleNameTypeBase : java.lang.String;

@GenModel(documentation="

	The run-asType specifies the run-as identity to be
	used for the execution of a component. It contains an
	optional description, and the name of a security role.

      ")
@ExtendedMetaData(name="run-asType", kind="elementOnly")
class RunAsType {

	@ExtendedMetaData(kind="element", name="description", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val DescriptionType[*] description;

	@ExtendedMetaData(kind="element", name="role-name", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val RoleNameType[1] roleName;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="

	The security-constraintType is used to associate
	security constraints with one or more web resource
	collections

	Used in: web-app

      ")
@ExtendedMetaData(name="security-constraintType", kind="elementOnly")
class SecurityConstraintType {

	@ExtendedMetaData(kind="element", name="display-name", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val DisplayNameType[*] displayName;

	@ExtendedMetaData(kind="element", name="web-resource-collection", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val WebResourceCollectionType[+] webResourceCollection;

	@ExtendedMetaData(kind="element", name="auth-constraint", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val AuthConstraintType authConstraint;

	@ExtendedMetaData(kind="element", name="user-data-constraint", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val UserDataConstraintType userDataConstraint;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="

	The security-role-refType contains the declaration of a
	security role reference in a component's or a
	Deployment Component's code. The declaration consists of an
	optional description, the security role name used in the
	code, and an optional link to a security role. If the
	security role is not specified, the Deployer must choose an
	appropriate security role.

      ")
@ExtendedMetaData(name="security-role-refType", kind="elementOnly")
class SecurityRoleRefType {

	@ExtendedMetaData(kind="element", name="description", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val DescriptionType[*] description;

	@GenModel(documentation="

	    The value of the role-name element must be the String used
	    as the parameter to the
	    EJBContext.isCallerInRole(String roleName) method or the
	    HttpServletRequest.isUserInRole(String role) method.

	  ")
	@ExtendedMetaData(kind="element", name="role-name", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val RoleNameType[1] roleName;

	@GenModel(documentation="

	    The role-link element is a reference to a defined
	    security role. The role-link element must contain
	    the name of one of the security roles defined in the
	    security-role elements.

	  ")
	@ExtendedMetaData(kind="element", name="role-link", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val RoleNameType roleLink;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="
	<![CDATA[

	  The security-roleType contains the definition of a security
	  role. The definition consists of an optional description of the
	  security role, and the security role name.

	  Example:

	      <security-role>
	      <description>
		  This role includes all employees who are authorized
		  to access the employee service application.
	      </description>
	      <role-name>employee</role-name>
	      </security-role>

	  ]]>
      ")
@ExtendedMetaData(name="security-roleType", kind="elementOnly")
class SecurityRoleType {

	@ExtendedMetaData(kind="element", name="description", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val DescriptionType[*] description;

	@ExtendedMetaData(kind="element", name="role-name", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val RoleNameType[1] roleName;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="

	Declares the handler for a port-component. Handlers can access the
	init-param name/value pairs using the HandlerInfo interface. If
	port-name is not specified, the handler is assumed to be associated
	with all ports of the service.

	Used in: service-ref

      ")
@ExtendedMetaData(name="service-ref_handlerType", kind="elementOnly")
class ServiceRefHandlerType {

	@ExtendedMetaData(kind="element", name="description", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val DescriptionType[*] description;

	@ExtendedMetaData(kind="element", name="display-name", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val DisplayNameType[*] displayName;

	@ExtendedMetaData(kind="element", name="icon", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val IconType[*] icon;

	@GenModel(documentation="

	    Defines the name of the handler. The name must be unique
	    within the module.

	  ")
	@ExtendedMetaData(kind="element", name="handler-name", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val String[1] handlerName;

	@GenModel(documentation="

	    Defines a fully qualified class name for the handler
	    implementation.

	  ")
	@ExtendedMetaData(kind="element", name="handler-class", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val FullyQualifiedClassType[1] handlerClass;

	@ExtendedMetaData(kind="element", name="init-param", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val ParamValueType[*] initParam;

	@GenModel(documentation="

	    Defines the QName of a SOAP header that will be processed
	    by the handler.

	  ")
	@ExtendedMetaData(kind="element", name="soap-header", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val XsdQNameType[*] soapHeader;

	@GenModel(documentation="

	    The soap-role element contains a SOAP actor definition that
	    the Handler will play as a role.

	  ")
	@ExtendedMetaData(kind="element", name="soap-role", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val String[*] soapRole;

	@GenModel(documentation="

	    The port-name element defines the WSDL port-name that a
	    handler should be associated with.

	  ")
	@ExtendedMetaData(kind="element", name="port-name", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val String[*] portName;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="

	The service-ref element declares a reference to a Web
	service. It contains optional description, display name and
	icons, a declaration of the required Service interface,
	an optional WSDL document location, an optional set
	of JAX-RPC mappings, an optional QName for the service element,
	an optional set of Service Endpoint Interfaces to be resolved
	by the container to a WSDL port, and an optional set of handlers.

      ")
@ExtendedMetaData(name="service-refType", kind="elementOnly")
class ServiceRefType {

	@ExtendedMetaData(kind="element", name="description", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val DescriptionType[*] description;

	@ExtendedMetaData(kind="element", name="display-name", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val DisplayNameType[*] displayName;

	@ExtendedMetaData(kind="element", name="icon", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val IconType[*] icon;

	@GenModel(documentation="

	    The service-ref-name element declares logical name that the
	    components in the module use to look up the Web service. It
	    is recommended that all service reference names start with
	    \"service/\".

	  ")
	@ExtendedMetaData(kind="element", name="service-ref-name", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val JndiNameType[1] serviceRefName;

	@GenModel(documentation="

	    The service-interface element declares the fully qualified class
	    name of the JAX-RPC Service interface the client depends on.
	    In most cases the value will be javax.xml.rpc.Service.  A JAX-RPC
	    generated Service Interface class may also be specified.

	  ")
	@ExtendedMetaData(kind="element", name="service-interface", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val FullyQualifiedClassType[1] serviceInterface;

	@GenModel(documentation="

	    The wsdl-file element contains the URI location of a WSDL
	    file. The location is relative to the root of the module.

	  ")
	@ExtendedMetaData(kind="element", name="wsdl-file", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val XsdAnyURIType wsdlFile;

	@GenModel(documentation="

	    The jaxrpc-mapping-file element contains the name of a file that
	    describes the JAX-RPC mapping between the Java interaces used by
	    the application and the WSDL description in the wsdl-file.  The
	    file name is a relative path within the module file.

	  ")
	@ExtendedMetaData(kind="element", name="jaxrpc-mapping-file", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val PathType jaxrpcMappingFile;

	@GenModel(documentation="

	    The service-qname element declares the specific WSDL service
	    element that is being refered to.  It is not specified if no
	    wsdl-file is declared.

	  ")
	@ExtendedMetaData(kind="element", name="service-qname", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val XsdQNameType serviceQname;

	@GenModel(documentation="

	    The port-component-ref element declares a client dependency
	    on the container for resolving a Service Endpoint Interface
	    to a WSDL port. It optionally associates the Service Endpoint
	    Interface with a particular port-component. This is only used
	    by the container for a Service.getPort(Class) method call.

	  ")
	@ExtendedMetaData(kind="element", name="port-component-ref", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val PortComponentRefType[*] portComponentRef;

	@GenModel(documentation="

	    Declares the handler for a port-component. Handlers can
	    access the init-param name/value pairs using the
	    HandlerInfo interface. If port-name is not specified, the
	    handler is assumed to be associated with all ports of the
	    service.

	  ")
	@ExtendedMetaData(kind="element", name="handler", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val ServiceRefHandlerType[*] handler;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="

	The servlet-mappingType defines a mapping between a
	servlet and a url pattern.

	Used in: web-app

      ")
@ExtendedMetaData(name="servlet-mappingType", kind="elementOnly")
class ServletMappingType {

	@ExtendedMetaData(kind="element", name="servlet-name", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val ServletNameType[1] servletName;

	@ExtendedMetaData(kind="element", name="url-pattern", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val UrlPatternType[1] urlPattern;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="

	The servlet-name element contains the canonical name of the
	servlet. Each servlet name is unique within the web
	application.

      ")
@ExtendedMetaData(name="servlet-nameType", kind="simple")
class ServletNameType extends NonEmptyStringType {
}

@GenModel(documentation="

	The servletType is used to declare a servlet.
	It contains the declarative data of a
	servlet. If a jsp-file is specified and the load-on-startup
	element is present, then the JSP should be precompiled and
	loaded.

	Used in: web-app

      ")
@ExtendedMetaData(name="servletType", kind="elementOnly")
class ServletType {

	@ExtendedMetaData(kind="element", name="description", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val DescriptionType[*] description;

	@ExtendedMetaData(kind="element", name="display-name", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val DisplayNameType[*] displayName;

	@ExtendedMetaData(kind="element", name="icon", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val IconType[*] icon;

	@ExtendedMetaData(kind="element", name="servlet-name", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val ServletNameType[1] servletName;

	@GenModel(documentation="

	      The servlet-class element contains the fully
	      qualified class name of the servlet.

	    ")
	@ExtendedMetaData(kind="element", name="servlet-class", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val FullyQualifiedClassType servletClass;

	@ExtendedMetaData(kind="element", name="jsp-file", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val JspFileType jspFile;

	@ExtendedMetaData(kind="element", name="init-param", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val ParamValueType[*] initParam;

	@GenModel(documentation="

	    The load-on-startup element indicates that this
	    servlet should be loaded (instantiated and have
	    its init() called) on the startup of the web
	    application. The optional contents of these
	    element must be an integer indicating the order in
	    which the servlet should be loaded. If the value
	    is a negative integer, or the element is not
	    present, the container is free to load the servlet
	    whenever it chooses. If the value is a positive
	    integer or 0, the container must load and
	    initialize the servlet as the application is
	    deployed. The container must guarantee that
	    servlets marked with lower integers are loaded
	    before servlets marked with higher integers. The
	    container may choose the order of loading of
	    servlets with the same load-on-start-up value.

	  ")
	@ExtendedMetaData(kind="element", name="load-on-startup", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val XsdIntegerType loadOnStartup;

	@ExtendedMetaData(kind="element", name="run-as", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val RunAsType runAs;

	@ExtendedMetaData(kind="element", name="security-role-ref", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val SecurityRoleRefType[*] securityRoleRef;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="

	The session-configType defines the session parameters
	for this web application.

	Used in: web-app

      ")
@ExtendedMetaData(name="session-configType", kind="elementOnly")
class SessionConfigType {

	@GenModel(documentation="

	    The session-timeout element defines the default
	    session timeout interval for all sessions created
	    in this web application. The specified timeout
	    must be expressed in a whole number of minutes.
	    If the timeout is 0 or less, the container ensures
	    the default behaviour of sessions is never to time
	    out. If this element is not specified, the container
	    must set its default timeout period.

	  ")
	@ExtendedMetaData(kind="element", name="session-timeout", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val XsdIntegerType sessionTimeout;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="

	This is a special string datatype that is defined by J2EE as
	a base type for defining collapsed strings. When schemas
	require trailing/leading space elimination as well as
	collapsing the existing whitespace, this base type may be
	used.

      ")
@ExtendedMetaData(name="string", kind="simple")
class String {

	@ExtendedMetaData(name=":0", kind="simple")
	attr type.Token value;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="

	The taglibType defines the syntax for declaring in
	the deployment descriptor that a tag library is
	available to the application.  This can be done
	to override implicit map entries from TLD files and
	from the container.

      ")
@ExtendedMetaData(name="taglibType", kind="elementOnly")
class TaglibType {

	@GenModel(documentation="

	    A taglib-uri element describes a URI identifying a
	    tag library used in the web application.  The body
	    of the taglib-uri element may be either an
	    absolute URI specification, or a relative URI.
	    There should be no entries in web.xml with the
	    same taglib-uri value.

	  ")
	@ExtendedMetaData(kind="element", name="taglib-uri", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val String[1] taglibUri;

	@GenModel(documentation="

	    the taglib-location element contains the location
	    (as a resource relative to the root of the web
	    application) where to find the Tag Library
	    Description file for the tag library.

	  ")
	@ExtendedMetaData(kind="element", name="taglib-location", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val PathType[1] taglibLocation;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="

	The transport-guaranteeType specifies that the communication
	between client and server should be NONE, INTEGRAL, or
	CONFIDENTIAL. NONE means that the application does not
	require any transport guarantees. A value of INTEGRAL means
	that the application requires that the data sent between the
	client and server be sent in such a way that it can't be
	changed in transit. CONFIDENTIAL means that the application
	requires that the data be transmitted in a fashion that
	prevents other entities from observing the contents of the
	transmission. In most cases, the presence of the INTEGRAL or
	CONFIDENTIAL flag will indicate that the use of SSL is
	required.

	Used in: user-data-constraint

      ")
@ExtendedMetaData(name="transport-guaranteeType", kind="simple")
class TransportGuaranteeType extends String {
}

@ExtendedMetaData(name="transport-guaranteeType_._base")
enum TransportGuaranteeTypeBase {
	NONE = 0;
	INTEGRAL = 1;
	CONFIDENTIAL = 2;
}

@ExtendedMetaData(name="transport-guaranteeType_._base:Object", baseType="transport-guaranteeType_._base")
datatype TransportGuaranteeTypeBaseObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="

	This simple type designates a boolean with only two
	permissible values

	- true
	- false

      ")
@ExtendedMetaData(name="true-falseType", kind="simple")
class TrueFalseType extends XsdBooleanType {
}

@ExtendedMetaData(name="true-falseType_._base", baseType="http://www.eclipse.org/emf/2003/XMLType#boolean", pattern="(true|false)")
datatype TrueFalseTypeBase : boolean;

@ExtendedMetaData(name="true-falseType_._base:Object", baseType="true-falseType_._base")
datatype TrueFalseTypeBaseObject : java.lang.Boolean;

@GenModel(documentation="

	The url-patternType contains the url pattern of the mapping.
	It must follow the rules specified in Section 11.2 of the
	Servlet API Specification. This pattern is assumed to be in
	URL-decoded form and must not contain CR(#xD) or LF(#xA).
	If it contains those characters, the container must inform
	the developer with a descriptive error message.
	The container must preserve all characters including whitespaces.

      ")
@ExtendedMetaData(name="url-patternType", kind="simple")
class UrlPatternType {

	@ExtendedMetaData(name=":0", kind="simple")
	attr type.String value;
}

@GenModel(documentation="

	The user-data-constraintType is used to indicate how
	data communicated between the client and container should be
	protected.

	Used in: security-constraint

      ")
@ExtendedMetaData(name="user-data-constraintType", kind="elementOnly")
class UserDataConstraintType {

	@ExtendedMetaData(kind="element", name="description", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val DescriptionType[*] description;

	@ExtendedMetaData(kind="element", name="transport-guarantee", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val TransportGuaranteeType[1] transportGuarantee;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="

	The elements that use this type designate a path starting
	with a \"/\" and interpreted relative to the root of a WAR
	file.

      ")
@ExtendedMetaData(name="war-pathType", kind="simple")
class WarPathType extends String {
}

@ExtendedMetaData(name="war-pathType_._base", baseType="http://www.eclipse.org/emf/2003/XMLType#token", pattern="/.*")
datatype WarPathTypeBase : java.lang.String;

@ExtendedMetaData(name="web-appType", kind="elementOnly")
class WebAppType {

	@ExtendedMetaData(kind="group", name="group:0")
	!unique attr ecore.EFeatureMapEntry[*] group;

	@ExtendedMetaData(kind="element", name="description", namespace="http://java.sun.com/xml/ns/j2ee", group="#group:0")
	volatile transient derived !resolve val DescriptionType[*] description;

	@ExtendedMetaData(kind="element", name="display-name", namespace="http://java.sun.com/xml/ns/j2ee", group="#group:0")
	volatile transient derived !resolve val DisplayNameType[*] displayName;

	@ExtendedMetaData(kind="element", name="icon", namespace="http://java.sun.com/xml/ns/j2ee", group="#group:0")
	volatile transient derived !resolve val IconType[*] icon;

	@ExtendedMetaData(kind="element", name="distributable", namespace="http://java.sun.com/xml/ns/j2ee", group="#group:0")
	volatile transient derived !resolve val EmptyType[*] distributable;

	@GenModel(documentation="

	    The context-param element contains the declaration
	    of a web application's servlet context
	    initialization parameters.

	  ")
	@ExtendedMetaData(kind="element", name="context-param", namespace="http://java.sun.com/xml/ns/j2ee", group="#group:0")
	volatile transient derived !resolve val ParamValueType[*] contextParam;

	@ExtendedMetaData(kind="element", name="filter", namespace="http://java.sun.com/xml/ns/j2ee", group="#group:0")
	volatile transient derived !resolve val FilterType[*] filter;

	@ExtendedMetaData(kind="element", name="filter-mapping", namespace="http://java.sun.com/xml/ns/j2ee", group="#group:0")
	volatile transient derived !resolve val FilterMappingType[*] filterMapping;

	@ExtendedMetaData(kind="element", name="listener", namespace="http://java.sun.com/xml/ns/j2ee", group="#group:0")
	volatile transient derived !resolve val ListenerType[*] listener;

	@ExtendedMetaData(kind="element", name="servlet", namespace="http://java.sun.com/xml/ns/j2ee", group="#group:0")
	volatile transient derived !resolve val ServletType[*] servlet;

	@ExtendedMetaData(kind="element", name="servlet-mapping", namespace="http://java.sun.com/xml/ns/j2ee", group="#group:0")
	volatile transient derived !resolve val ServletMappingType[*] servletMapping;

	@ExtendedMetaData(kind="element", name="session-config", namespace="http://java.sun.com/xml/ns/j2ee", group="#group:0")
	volatile transient derived !resolve val SessionConfigType[*] sessionConfig;

	@ExtendedMetaData(kind="element", name="mime-mapping", namespace="http://java.sun.com/xml/ns/j2ee", group="#group:0")
	volatile transient derived !resolve val MimeMappingType[*] mimeMapping;

	@ExtendedMetaData(kind="element", name="welcome-file-list", namespace="http://java.sun.com/xml/ns/j2ee", group="#group:0")
	volatile transient derived !resolve val WelcomeFileListType[*] welcomeFileList;

	@ExtendedMetaData(kind="element", name="error-page", namespace="http://java.sun.com/xml/ns/j2ee", group="#group:0")
	volatile transient derived !resolve val ErrorPageType[*] errorPage;

	@ExtendedMetaData(kind="element", name="jsp-config", namespace="http://java.sun.com/xml/ns/j2ee", group="#group:0")
	volatile transient derived !resolve val JspConfigType[*] jspConfig;

	@ExtendedMetaData(kind="element", name="security-constraint", namespace="http://java.sun.com/xml/ns/j2ee", group="#group:0")
	volatile transient derived !resolve val SecurityConstraintType[*] securityConstraint;

	@ExtendedMetaData(kind="element", name="login-config", namespace="http://java.sun.com/xml/ns/j2ee", group="#group:0")
	volatile transient derived !resolve val LoginConfigType[*] loginConfig;

	@ExtendedMetaData(kind="element", name="security-role", namespace="http://java.sun.com/xml/ns/j2ee", group="#group:0")
	volatile transient derived !resolve val SecurityRoleType[*] securityRole;

	@ExtendedMetaData(kind="element", name="env-entry", namespace="http://java.sun.com/xml/ns/j2ee", group="#group:0")
	volatile transient derived !resolve val EnvEntryType[*] envEntry;

	@ExtendedMetaData(kind="element", name="ejb-ref", namespace="http://java.sun.com/xml/ns/j2ee", group="#group:0")
	volatile transient derived !resolve val EjbRefType[*] ejbRef;

	@ExtendedMetaData(kind="element", name="ejb-local-ref", namespace="http://java.sun.com/xml/ns/j2ee", group="#group:0")
	volatile transient derived !resolve val EjbLocalRefType[*] ejbLocalRef;

	@ExtendedMetaData(kind="element", name="service-ref", namespace="http://java.sun.com/xml/ns/j2ee", group="#group:0")
	volatile transient derived !resolve val ServiceRefType[*] serviceRef;

	@ExtendedMetaData(kind="element", name="resource-ref", namespace="http://java.sun.com/xml/ns/j2ee", group="#group:0")
	volatile transient derived !resolve val ResourceRefType[*] resourceRef;

	@ExtendedMetaData(kind="element", name="resource-env-ref", namespace="http://java.sun.com/xml/ns/j2ee", group="#group:0")
	volatile transient derived !resolve val ResourceEnvRefType[*] resourceEnvRef;

	@ExtendedMetaData(kind="element", name="message-destination-ref", namespace="http://java.sun.com/xml/ns/j2ee", group="#group:0")
	volatile transient derived !resolve val MessageDestinationRefType[*] messageDestinationRef;

	@ExtendedMetaData(kind="element", name="message-destination", namespace="http://java.sun.com/xml/ns/j2ee", group="#group:0")
	volatile transient derived !resolve val MessageDestinationType[*] messageDestination;

	@ExtendedMetaData(kind="element", name="locale-encoding-mapping-list", namespace="http://java.sun.com/xml/ns/j2ee", group="#group:0")
	volatile transient derived !resolve val LocaleEncodingMappingListType[*] localeEncodingMappingList;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;

	@ExtendedMetaData(kind="attribute", name="version")
	unsettable attr WebAppVersionType[1] version;
}

@GenModel(documentation="

	This type contains the recognized versions of
	web-application supported. It is used to designate the
	version of the web application.

      ")
@ExtendedMetaData(name="web-app-versionType")
enum WebAppVersionType {
	_24 = 0;
}

@ExtendedMetaData(name="web-app-versionType:Object", baseType="web-app-versionType")
datatype WebAppVersionTypeObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="

	The web-resource-collectionType is used to identify a subset
	of the resources and HTTP methods on those resources within
	a web application to which a security constraint applies. If
	no HTTP methods are specified, then the security constraint
	applies to all HTTP methods.

	Used in: security-constraint

      ")
@ExtendedMetaData(name="web-resource-collectionType", kind="elementOnly")
class WebResourceCollectionType {

	@GenModel(documentation="

	    The web-resource-name contains the name of this web
	    resource collection.

	  ")
	@ExtendedMetaData(kind="element", name="web-resource-name", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val String[1] webResourceName;

	@ExtendedMetaData(kind="element", name="description", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val DescriptionType[*] description;

	@ExtendedMetaData(kind="element", name="url-pattern", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val UrlPatternType[+] urlPattern;

	@ExtendedMetaData(kind="element", name="http-method", namespace="http://java.sun.com/xml/ns/j2ee")
	!resolve val HttpMethodType[*] httpMethod;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="

	The welcome-file-list contains an ordered list of welcome
	files elements.

	Used in: web-app

      ")
@ExtendedMetaData(name="welcome-file-listType", kind="elementOnly")
class WelcomeFileListType {

	@GenModel(documentation="

	    The welcome-file element contains file name to use
	    as a default welcome file, such as index.html

	  ")
	@ExtendedMetaData(kind="element", name="welcome-file", namespace="http://java.sun.com/xml/ns/j2ee")
	!unique attr type.String[+] welcomeFile;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="

	This type adds an \"id\" attribute to xsd:anyURI.

      ")
@ExtendedMetaData(name="xsdAnyURIType", kind="simple")
class XsdAnyURIType {

	@ExtendedMetaData(name=":0", kind="simple")
	attr type.AnyURI value;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="

	This type adds an \"id\" attribute to xsd:boolean.

      ")
@ExtendedMetaData(name="xsdBooleanType", kind="simple")
class XsdBooleanType {

	@ExtendedMetaData(name=":0", kind="simple")
	unsettable attr type.Boolean value;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="

	This type adds an \"id\" attribute to xsd:integer.

      ")
@ExtendedMetaData(name="xsdIntegerType", kind="simple")
class XsdIntegerType {

	@ExtendedMetaData(name=":0", kind="simple")
	attr type.Integer value;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="

	This type adds an \"id\" attribute to xsd:NMTOKEN.

      ")
@ExtendedMetaData(name="xsdNMTOKENType", kind="simple")
class XsdNMTOKENType {

	@ExtendedMetaData(name=":0", kind="simple")
	attr type.NMTOKEN value;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="

	This type adds an \"id\" attribute to xsd:nonNegativeInteger.

      ")
@ExtendedMetaData(name="xsdNonNegativeIntegerType", kind="simple")
class XsdNonNegativeIntegerType {

	@ExtendedMetaData(name=":0", kind="simple")
	attr type.NonNegativeInteger value;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="

	This type adds an \"id\" attribute to xsd:positiveInteger.

      ")
@ExtendedMetaData(name="xsdPositiveIntegerType", kind="simple")
class XsdPositiveIntegerType {

	@ExtendedMetaData(name=":0", kind="simple")
	attr type.PositiveInteger value;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="

	This type adds an \"id\" attribute to xsd:QName.

      ")
@ExtendedMetaData(name="xsdQNameType", kind="simple")
class XsdQNameType {

	@ExtendedMetaData(name=":0", kind="simple")
	attr type.QName value;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

@GenModel(documentation="

	This type adds an \"id\" attribute to xsd:string.

      ")
@ExtendedMetaData(name="xsdStringType", kind="simple")
class XsdStringType {

	@ExtendedMetaData(name=":0", kind="simple")
	attr type.String value;

	@ExtendedMetaData(kind="attribute", name="id")
	id attr type.ID ~id;
}

